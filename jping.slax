/*
*
*    PURPOSE: To quickly probe a far end device to
*             determine connectivity status.
*
*    CREATED: 04/16/10
*    BY: Jay Wilson (Solutions Architect - Western Area)
*    LAST MOD: 04/27/10
*    BY: Jay Wilson
*    VERSION: 1.10
*
*    MODIFICATION HISTORY:
*        V1.00 = Initial release
*         1.10 = Added logic to flip-routes
*
*/
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns exsl = "http://exslt.org/common";
import "../import/junos.xsl";
var $arguments = {
    <argument> {
        <name> "host";
        <description> "IPv4 address of the remote device";
    }
    <argument> {
        <name> "source";
        <description> "IPv4 address of the source device";
    }
    <argument> {
        <name> "iterations";
        <description> "Number of times to probe per test set";
    }
    <argument> {
        <name> "delay";
        <description> "Millseconds of delay between each probe in a test set";
    }
    <argument> {
        <name> "debug";
        <description> "Any none blank character turns on debugging (1,3,5)";
    }
    <argument> {
        <name> "latency";
        <description> "Latency tolerance in Millseconds between pings";
    }
    <argument> {
        <name> "lcheck";
        <description> "Turn on Latency checking";
    }
    <argument> {
        <name> "dprefix-1";
        <description> "Prefix of the Destination 1st half";
    }
    <argument> {
        <name> "dprefix-2";
        <description> "Prefix of the Destination 2nd half";
    }
    <argument> {
        <name> "sp-1-nh";
        <description> "Service Provider 1 next-hop";
    }
    <argument> {
        <name> "sp-2-nh";
        <description> "Service Provider 2 next-hop";
    }
}


param $host;
param $source;
param $host-sec;
param $source-sec;
param $iterations;
param $delay;
param $debug;
param $latency;
param $lcheck;
param $dprefix-1;
param $dprefix-2;
param $sp-1-nh;
param $sp-2-nh;

/* 
*  Using a connection to improve script processing speed
*/
var $connection = jcs:open();

match / {

/*
*   Determine how many loops can be completed in 1 minute
*   based on the the values of "delay" and "iterations"
*/
    var $main-loop-count = { 
        expr ( 60 div ( ( $delay * $iterations ) div 1000 ) );
    }
/*
*   Main loop will loop for 1 minute.  How many times it is 
*   called depends on the values of "delay" and "iterations"
*/
    call main-loop($loops = $main-loop-count, $latency = $latency, $con=$connection);
/*
*   Close the connection before existing the script
*/
    expr jcs:close($connection);
}
/*
*   NAME: MAIN-LOOP
*   PURPOSE: To loop for 1 minute and during that 1 minute
*            call PING-LOOP the correct number of times.
*   CALLED: Called after script initialization and by itself.
*
*   PARMS PASSED:
*        $status = was the last ping probe successful or not
*        $loops = number of times that it needs to be called in
*                 1 minute 
*/
template main-loop($status = 0, $loops = 60, $latency = 300, $con) {
    if ($debug) {
         expr jcs:output("In Main Loop -- count down = ", $loops);
    }
    if ($status = 0) {
        if ($loops > 0) {
            var $stat = { call ping-loop ($status = 0, $host = $host, $iterations =$iterations, $delay = $delay, $prevrtt = 0, $latency = $latency); }
            call main-loop($status = $stat, $loops = $loops - 1, $latency = $latency, $con);
        }
        else {
           expr jcs:output("PROBE: Completed successfully");
        }
    }
    else {
            var $rpc = <ping> {
                           <host> $host-sec;
                           <source> $source-sec;
                           <count> 1;
                           <wait> 0;
                           <no-resolve>;
                           <brief>;
                       }
            var $good = jcs:execute($connection,$rpc); 
            if ($good/ping-success) {
               expr jcs:output("PROBE: Premiary Link Missed a probe");
               call chg-route($con=$con);
            }
            else {
               expr jcs:output("PROBE: Primary Link Missed a probe");
               expr jcs:output("PROBE: Secondary Link not available");
            }    
    }

/*
*   After changing the route call the main loop to finish out the minute
*   loop.  Status needs to be reset.
*/
 call main-loop($status = 0, $loops = $loops - 1, $latency = $latency, $con);
    }
}
/*
*   NAME: PING-LOOP 
*   PURPOSE: Issues a ping probe to a device
*   CALLED: Called by the main loop and by itself.
*
*   PARMS PASSED:
*        $status = was the last ping probe successful or not
*        $host = device to send the ping probe to
*        $iterations = how many times to call itself
*        $delay = how long to wait before calling itself
*        $prevrtt = the rtt value of the last ping or 0
*                   if the start of a ping cycle
*        $latency = the amount of difference allowed in rtt
*                  between ping
*/
template ping-loop($status, $host, $iterations = 1, $delay = 333, $prevrtt, $latency = 300) {
    if ($status = 0) { 
        if ($iterations > 0) {
            if ($debug) {
                expr jcs:output("In Iteration Loop --- count down = ", $iterations);
            }
            var $rpc = <ping> {
                           <host> $host;
                           <source> $source;
                           <count> 1;
                           <wait> 0;
                           <no-resolve>;
                           <brief>;
                       }
            var $good = jcs:execute($connection,$rpc); 
            if ($debug == 5) {
               call jcs:dump($out = $good,$style="<>");
            }
            else if ($debug == 3) {
               expr jcs:output("PREVRTT=", $prevrtt, "  RTT=", $good/probe-result/rtt, "  DIFF=", $good/probe-result/rtt - $prevrtt);
            }
            var $rtt = { 
                if ($good/ping-success) {
                    expr $good/probe-result/rtt;
                }
                else {
                    expr 0;
                }    
            }
            var $stat = { 
                if ($good/ping-success) {
                   if ( $prevrtt != 0 and $lcheck) {
                       var $dif = {
                           if ($rtt - $prevrtt < 0) {
                              expr ( ( $rtt - $prevrtt) * -1);
                           }
                           else {
                              expr ( $rtt - $prevrtt );
                           }
                       }
                       if ( $dif > $latency ) {
                           if ($debug) {
                               expr jcs:output("Dif < latency: ", $dif, ":", $latency);
                           }
                           expr 2;
                       }
                       else {
                           if ($debug) {
                               expr jcs:output("Dif > latency: ", $dif, ":", $latency);
                           }
                           expr 0;
                       }
                   }
                   else {
                       expr 0;
                   }
                }
                else {
                   expr 1;
                }
            }
            expr jcs:sleep(0,$delay);
            call ping-loop($status = $stat, $host = $host, $iterations=$iterations - 1, $prevrtt = $rtt, $latency = $latency );
        }
        else {
            expr 0;
        }
    }
    else {
       expr 1;
    }
}
/*
*   NAME: DUMP
*   PURPOSE: Print the output from a RPC
*   CALLED: Called by PING-LOOP if debug is set to 7
*
*   PARMS PASSED:
*        $out = what varible to display
*        $style = "<>" means XML, empty means JUNOS
*        $name = a string that is prepended to any output
*        $indent = spacing between $name and output
*/
template jcs:dump ($name, $out, $indent = "", $style)
{
    var $mydent = {
        if ($name) {
            expr $indent _ "  ";
        } else {
            expr $indent;
        }
    }
    if ($name) {
        expr jcs:output($indent, $name, " = {");
    }
    var $oq = {
        if ($style == "<>") {
            expr "<";
        }
    }
    var $cq = {
        if ($style == "<>") {
            expr ">";
        }
    }

    if (exsl:object-type($out) == "string") {
        expr jcs:output($mydent, "'", $out, "';");

    } else if (name($out)) {
        var $text = $out/text();

        if ($out/ *) {
            expr jcs:output($mydent, $oq, name($out), $cq, " {");
            for-each ($out/ *) {
                call jcs:dump($out = ., $indent = "  " _ $mydent);
            }
            expr jcs:output($mydent, "}");

        } else if ($text) {
            if (string-length($out) == 1 && starts-with($out, "\n")) {
                expr jcs:output($mydent, $oq, name($out), $cq, ";");
            } else {
                expr jcs:output($mydent, $oq, name($out), $cq,
                                " '", $text, "';");
            }

        } else if (string-length($out) == 0
                   || string-length($out) == 1 && starts-with($out, "\n")) {
            expr jcs:output($mydent, $oq, name($out), $cq, ";");
        } else {
            expr jcs:output($mydent, $oq, name($out), $cq, " {");
            for-each ($out/ *) {
                call jcs:dump($out = ., $indent = "  " _ $mydent);
            }
            expr jcs:output($mydent, "}");
        }

    } else if ($out/node()) {
        for-each ($out/ *) {
            call jcs:dump($out = ., $indent = $mydent);
        }

    } else if ($out/text()) {
        expr jcs:output($mydent, .);
    }

    if ($name) {
        expr jcs:output($indent, "}");
    }
}
template chg-route($con) {
/*
*  Verify that 4 params have been passed in.
*  NOTE: the script do not valid the values of the params
*/
    if ($sp-1-nh and $sp-2-nh and $dprefix-1 and $dprefix-2) {
/*
*  Find the correct static routes
*/
        var $rpc = <get-route-information> {
                       <detail>;
                       <protocol> "static";
                       <community> "no-export";
        }
        var $route-output = jcs:execute($con, $rpc);
/*
*  If currently using SP-1 flip to SP-2
*  If currently using SP-2 flip to SP-1
*/
        if ($route-output//protocol-nh/to == $sp-1-nh) {
           if ($debug) {
               expr jcs:output("INFO: sp-1-nh found");
           }
           call flip-route($current = 1, $con=$con);
        }
        else if ($route-output//protocol-nh/to == $sp-2-nh) {
           if ($debug) {
               expr jcs:output("INFO: sp-2-nh found");
           }
           call flip-route($current = 2, $con=$con);
        }
        else {
           if ($debug) {
             expr jcs:output("INFO: not found");
             call jcs:dump($out=$route-output,$style="<>");
           }
        }
   }
   else {
       expr jcs:output("ERROR: missing a param!");
   } 
}
/*
*   NAME: FLIP-ROUTE
*   PURPOSE: Changes the static routes to point to the SP NOT being used
*   CALLED: Called after a static route matching the params has been found.
*
*
*   PARMS PASSED:
*        $current = (1 means SP-1 is currently being used)
*                   (2 means SP-2 is currently being used)
*        $con = The connection to MGD
*/
template flip-route($current, $con) {
/*
*  Set the variables used in the XML call to the correct values
*/
    var $pre-current = {
        if ($current == 1) {
            expr $sp-1-nh;
        }
        else {
            expr $sp-2-nh;
        }
     }
     var $pre-new = {
         if ($current == 1) {
             expr $sp-2-nh;
         }
         else {
             expr $sp-1-nh;
         }
     }
/*
*  Build the XML for the configuration
*/
     var $xml = {
         <configuration> {
             <routing-options> {
                 <static> {
                     <route> {
                     <name> $dprefix-1;
                     <next-hop delete="delete"> $pre-current;
                     <next-hop> $pre-new;
                     }
                 }
                 <static> {
                     <route> {
                     <name> $dprefix-2;
                     <next-hop delete="delete"> $pre-current;
                     <next-hop> $pre-new;
                     }
                 }
             }
         }
     }
/*
*  Apply the XML changes to the configuration
*/
     var $results := {
         call jcs:load-configuration($connection = $con, $configuration = $xml);
     }
     if ($debug) {
         call jcs:dump($out=$results,$style="<>");
     }
/*
*  Check the results and process them
*/

        for-each ($results//xnm:warning) {
            if (not(contains(message,"statement not found:"))) {
            call write-output($level = "user.warning", $id = "WARNING: ", $type = "chg-static.slax[Warning]: ", $where = "b", $message = message);
            }
        }
        if ($results//xnm:error) {
            for-each ($results//xnm:error) {
                call write-output($level = "user.error", $id = "ERROR: ", $type = "chg-static.slax[Error]: ", $where = "b", $message = message);
            }
        }
        else {
            call write-output($level = "user.info", $id = "INFO: ", $type = "chg-static.slax[Success]: ", $where = "b", $message = "Successfully changed routes");
        }
}
/*
*   NAME: WRITE-OUTPUT
*   PURPOSE: Writes a message to standard and/or the syslog depending on 
*            the parms passed to it.
*   CALLED: Called after the XML changes have been submitted to MGD process.
*
*
*   PARMS PASSED:
*        $level = The syslog message level
*        $id = Standout message ID
*        $type = The string identifying the type of message
*        $message = The string to print out 
*        $where = Used to specify if "b"oth STDOUT and SYSLOG
*                 should be written to or only "S"TDOUT
*
*/
template write-output($level = "user.info", $id = "INFO: ", $type = " ", $where = "b", $message) {
     var $stdmessage = $id _ $message;

     if ($where == "s") {
        expr jcs:output($stdmessage);
     }
     else {
         expr jcs:syslog($level, $type, $message);
         
         expr jcs:output($stdmessage);
     }         

}
