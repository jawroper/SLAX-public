/*
*
*    PURPOSE: Created for Apple to be able to load a JUNOS configuration
*             that is in XML format into a switch.
*
*
*    CREATED: 08/13/12
*    BY: Jay Wilson (Sr Consulting Eng DC -- Americas)
*    LAST MOD: 08/13/12
*    BY: Jay Wilson
*    VERSION: 1.00
*
*    MODIFICATION HISTORY:
*        V1.00 = Initial release
*
*/
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";

var $arguments = {
    <argument> {
        <name> "file";
        <description> "File to load";
    }
    <argument> {
        <name> "server";
        <description> "Server name or IP";
    }
}

param $file;
param $debug;
param $server;

match / {
    if ($file and $server) {
/*
*
*   Open a connection with mgd
*
*/
        var $con = jcs:open();
        if (not($con)) {
            call write-output($level = "user.error", $id = "ERROR: ", $type = "load-xml.slax[Error]: ", $where = "b", $message = "Not able to connect to local mgd");
        }
/*
*   Grab the file from the server
*/
   var $flocal = "/var/tmp/xml-conf";
   var $where = "ftp://anonymous:load-xml@" _ $server _ "/" _ $file;
   var $rpc = <file-copy> {
                 <source> $where;
                 <destination> $flocal;
              }
   var $result = jcs:execute($con,$rpc);
/*
*
*   XML structure for disabling the INTERFACE
*
*/
        var $xml = document($flocal);
/*
*
*   Use load-configuration template defined in junos.xsl to load and
*   commit the configuration
*
*/
        var $results := {
            call jcs:load-configuration($connection = $con, $configuration = $xml);
        }
/*
*
*   Check the results and process them
*
*/

        for-each ($results//xnm:warning) {
            if (not(contains(message,"statement not found:"))) {
            call write-output($level = "user.warning", $id = "WARNING: ", $type = "load-xml.slax[Warning]: ", $where = "b", $message = message);
            }
        }
        if ($results//xnm:error) {
            for-each ($results//xnm:error) {
                call write-output($level = "user.error", $id = "ERROR: ", $type = "load-xml.slax[Error]: ", $where = "b", $message = message);
            }
        }
        else {
            call write-output($level = "user.info", $id = "INFO: ", $type = "load-xml.slax[Success]: ", $where = "b", $message = "Successfully activated the XML configuration");
        }

/*
*
*   Close the mgd connection
*
*/
        expr jcs:close($con);
    }
    else {
        call write-output($where = "s", $message = "No file and/or Server was specified!");
    } 
}

/*
*   NAME: WRITE-OUTPUT
*   PURPOSE: Writes a message to standard and/or the syslog depending on 
*            the parms passed to it.
*   CALLED: Called after the XML changes have been submitted to MGD process.
*
*
*   PARMS PASSED:
*        $level = The syslog message level
*        $id = Standout message ID
*        $type = The string identifying the type of message
*        $message = The string to print out 
*        $where = Used to specify if "b"oth STDOUT and SYSLOG
*                 should be written to or only "S"TDOUT
*
*/
template write-output($level = "user.info", $id = "INFO: ", $type = " ", $where = "b", $message) {
     var $stdmessage = $id _ $message;

     if ($where == "s") {
        expr jcs:output($stdmessage);
     }
     else {
         expr jcs:syslog($level, $type, $message);     
         expr jcs:output($stdmessage);
     }         

}
