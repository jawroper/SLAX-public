/*
 * Author        : Curtis Call
 * Version       : 1.0
 * Last Modified : September 29, 2009
 * Platform      : all
 * Release       : 9.6 and above
 * License       : Public Domain
 *
 * Description   : This is a fully functional 350-point version of the classic
 * Colossal Cave Adventure game - written in SLAX as a JUNOS op script.
 *
 * Due to PR 474781, this game should be played on lab boxes only, not production 
 * JUNOS devices.  Its memory utilization will grow from 1-2M per turn until it 
 * reaches 131M and the script crashes.  The action prompt displays the current 
 * memory status, it is best to 'quit' the game before reaching that point, 
 * restart the script, and then reload the game via the 'restore' command.  
 * No penalty will be applied to points for games that were quit and later 
 * restarted.
 *
 * Due to PR 473816, it is best to always append '| no-more' when invoking the
 * script.  Otherwise, long outputs might be truncated by the input prompt.
 *
 * The game can be played simultaneously by multiple users, but each JUNOS user
 * can have only a single running game at a time.  The game is saved automatically
 * to the SNMP Utility MIB and can be retrieved later by using the 'restore'
 * command.
 *
 * This game makes heavy usage of the SNMP Utility MIB.  If you wish to remove
 * all MIB instances related to the game then use the "clear mib" command at the
 * script prompt.  This will erase all game data (All instances that start with
 * AD!C# and AD!P#) and will quit the game. 
 */ 
version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns str = "http://exslt.org/strings";
ns exsl = "http://exslt.org/common";
ns math = "http://exslt.org/math";
ns func extension = "http://exslt.org/functions";
ns adv extension = "http://xml.juniper.net/adventure";

import "../import/junos.xsl";

/* Game connection jcs:execute is much faster for bulk operations than jcs:invoke */
var $connection = jcs:open();

/* Game modes */
var $normal = "normal";
var $novice = "novice";
var $debug = "debug";           /* Hidden option, set $mode to $debug to see debug messages */

/* Command-line argument for game mode */
var $arguments = {
    <argument> {
        <name> "mode";
        <description> "Select either 'novice' or 'normal'.  (Normal is the default.)";
    }
}
param $mode = $normal;          /* The game mode, either novice or normal with normal the default. */

/* SNMP Utility MIB instance name variables */
var $lead-string = "AD";        /* This precedes all instance names */
var $id-tag = "#";              /* String ID follows this in instance name */
var $user-tag = "@";            /* User name follows this in instance name */
var $type-tag = "!";            /* Type C or P follows this in instance name */
var $current = "C";             /* Current game */
var $past = "P";                /* Prior game */

/* 
 * Data is stored in the Utility MIB in indexed strings for two reasons.  First,
 * it allows bulk reads and writes which minimizes the MIB usage and lessons the
 * impact of PR 474781.  Second, it requires keeps the Utility MIB from being
 * too cluttered by game variables.
 */
var $string-id-object-location = 1;           
var $string-id-object-status = 2;
var $string-id-dwarves = 3;
var $string-id-misc = 4;
/* Each field stores two rooms, the room number (1-70) and room number + 70. */
var $string-id-visited = 5;                   
/* Not included in save/restore cycles.  This is a comma delimited list of the PIDs that were open when the game started - used to track memory usage */
var $string-id-pid = 6;                      

/* There are a total of 140 rooms but two rooms share each index in the string */
var $visited-max = 70;                      

/* 
 * These are the adjustment values for the dwarf variables in their indexed string
 * The index in the string will be dwarf-number + adjust-index for the variable desired
 */
/* offset values for the dwarf string*/
var $id-dwarf-room = 1;             /* dloc */
var $id-old-dwarf-room = 2;         /* odloc */
var $id-dwarf-seen = 3;             /* dseen */

var $dwarf-adjust-index := {
    <var> {
        <value> $id-dwarf-room;
        <adjust> 0;
    }
    <var> {
        <value> $id-old-dwarf-room;
        <adjust> 7;
    }
    <var> {
        <value> $id-dwarf-seen;
        <adjust> 14;
    }
}

/* Index values for misc variables stored in the Utility MIB */
var $misc-id-mem-warn = 1;
var $misc-id-gaveup = 2;
var $misc-id-wzdark = 3; 
var $misc-id-closed = 4;
var $misc-id-closing = 5;
var $misc-id-holding = 6;
var $misc-id-dflag = 7;
var $misc-id-limit = 8;
var $misc-id-tally = 9;
var $misc-id-tally2 = 10;
var $misc-id-new-room = 11;      
var $misc-id-room = 12;          
var $misc-id-old-room = 13;      
var $misc-id-old-room2 = 14;     
var $misc-id-knfloc = 15;
var $misc-id-dkill = 16;
var $misc-id-clock = 17;
var $misc-id-clock2 = 18;
var $misc-id-panic = 19;
var $misc-id-bonus = 20;
var $misc-id-numdie = 21;
var $misc-id-lmwarn = 22;
var $misc-id-foobar = 23;
var $misc-id-scratch-k = 24;    
var $misc-id-scratch-t = 25;
var $misc-id-motion = 26;
var $misc-id-verb = 27;
var $misc-id-object = 28;
var $misc-id-word1 = 29;
var $misc-id-word2 = 30;

var $pirate = 7;        /* The dwarf number of the pirate */

var $treasure-start = 50; /* Treasure objects start at 50 */
var $maxdie = 3;        /* max # of deaths before close	*/

/* Specific room numbers referenced in the code */
var $chest-location = 114; /* Dead End */
var $message-location = 140; /* Dead End */
var $dwarf-alt-location = 18; /* Gold Nugget Room */

/* Misc object, verb, and motion numbers - not all are assigned a variable */
var $keys = 1;
var $lamp = 2;
var $grate = 3;
var $cage = 4;
var $rod = 5;
var $rod2 = 6;
var $steps = 7;
var $bird = 8;
var $door = 9;
var $pillow = 10;
var $snake = 11;
var $fissure = 12;
var $tablet = 13;
var $clam = 14;
var $oyster = 15;
var $magazine = 16;
var $dwarf = 17;
var $knife = 18;
var $food = 19;
var $bottle = 20;
var $water = 21;
var $oil = 22;
var $mirror = 23;
var $plant = 24;
var $plant-top = 25;
var $shadowy-figure = 27;
var $axe = 28;
var $dragon = 31;
var $chasm = 32;
var $troll = 33;
var $troll-hidden = 34;
var $bear = 35;
var $message = 36;
var $vend = 38;
var $batteries = 39;
var $satyr = 41;
var $tome = 42;
var $mib = 43;
var $nugget = 50;
var $coins = 54;
var $chest = 55;
var $eggs = 56;
var $trident = 57;
var $vase = 58;
var $emerald = 59;
var $pyramid = 60;
var $pearl = 61;
var $rug = 62;
var $spices = 63;
var $chain = 64;
var $nullx = 21;
var $back = 8;
var $look = 57;
var $cave = 67;
var $entrance = 64;
var $depression = 63;

var $take = 1;
var $drop = 2;
var $say = 3;
var $open = 4;
var $nothing = 5;
var $lock = 6;
var $on = 7;
var $off = 8;
var $wave = 9;
var $calm = 10;
var $walk = 11;
var $kill = 12;
var $pour = 13;
var $eat = 14;
var $drink = 15;
var $rub = 16;
var $throw = 17;
var $quit = 18;
var $find = 19;
var $inventory = 20;
var $feed = 21;
var $fill = 22;
var $blast = 23;
var $score = 24;
var $foo = 25;
var $brief = 26;
var $read = 27;
var $break = 28;
var $wake = 29;
var $suspend = 30;
var $hours = 31;
var $log = 32;
var $restore = 33;
var $set-room = 34;
var $set-dead = 35;
var $clear = 36;
var $set-tally = 37;
var $set-clock = 38;
var $set-clock2 = 39;
var $set-limit = 40;

var $up = 29;
var $down = 30;
var $jump = 39;
var $over = 41;
var $across = 42;
var $east = 43;
var $west = 44;
var $north = 45;
var $south = 46;
var $northeast = 47;
var $northwest = 50;
var $climb = 56;
var $slab = 61;
var $cross = 69;
var $instructions = 78;

var $word-type-motion = 0;
var $word-type-object = 1;
var $word-type-verb = 2;
var $word-type-special-verb = 3;


/* 
 * match / - Main template starts memory tracking, displays introductory message,
 * saves prior game variables, and starts turn looping
 */
match / {
    
    /* Check minimum version */
    expr adv:check-version( "9.6", "Sorry, no adventuring until JUNOS 9.6 or above." );

    /* Always track memory for now... */
    expr adv:start-memory-tracking();

    /* Display intro message */
    expr adv:write-message( 65 );
    
    /* Check for current game, save and tell them about it */
    var $string = adv:read-string( adv:build-instance-name( $string-id-misc ) );
    if( string-length( $string ) > 0 ) {
        /* This means a past game exists...notify them and move on... */
        expr jcs:output( "      (Enter 'restore' to load prior game)" );
        expr adv:save-prior();
    }

    /* Init the game variables */
    expr adv:init-game();
    
    /* Check the game mode */
    if( $mode == $novice ) {
        /* Display introductions */
        expr jcs:output( "Using novice mode..." );
        expr adv:write-message(  1 );
        
        /* Set limit to 1000 */
        expr adv:set-misc-value(  $misc-id-limit,  1000 );        
    }
    
    /* Start turn looping... */
    expr adv:turn-loop();    
}


/*
 * adv:start-memory-tracking - Retrieves the current list of "cscript" processes
 * and stores them in the Utility MIB so that subsequence memory checks can
 * reference the correct script.  Because we do no know the precise PID we might
 * end up tracking multiple scripts, but that is the best we can do.
 */
<func:function name="adv:start-memory-tracking"> {
    var $processes = adv:get-process-memory();
    
    /* Record the process numbers to the pid string */
    var $string = {
        for-each( $processes/process ) {
            expr pid;
            if( last() != position() ) {
                expr ",";
            }
        }
    }
    
    /* Write to MIB */
    var $string-name = adv:build-instance-name( $string-id-pid );
    expr adv:write-string( $string-name, $string );
}


/* 
 * adv:get-memory-string - This function builds a string based on the tracked
 * cscript processes memory usage. e.g. [10M].  It also displays warning messages
 * when the memory has hit 50M and 100M.
 *
 * Returns: string of memory usage
 */
<func:function name="adv:get-memory-string"> {
    
    var $processes = adv:get-process-memory();

    var $string-name = adv:build-instance-name( $string-id-pid );
    var $process-string = adv:read-string( $string-name );
    
    var $process-set = jcs:split( ",", $process-string );

    /* Should we warn about memory? */
    var $warn-set := {
        for-each( $processes/process ) {
            var $pid-number = pid;
            if( $process-set[. == $pid-number] ) {
                var $size = substring( size, 1, string-length( size ) - 1 );
                if( $size >= 100 ) {
                    <warn-100>;
                }
                else if( $size > 50 ) {
                    <warn-50>;
                }
            }
        }
    }    

    /* Check if we should warn for one or the other */
    if( $warn-set/warn-100 ) {
        var $warn = adv:get-misc-value( $misc-id-mem-warn );
        if( $warn != 100 ) {
            expr adv:set-misc-value( $misc-id-mem-warn, 100 );
            var $warning-string = " \n[Warning: PR 474781 is present in this version of JUNOS, it causes a\n" _
                                  "memory leak in scripts such as the Adventure game.  The script memory\n" _
                                  "has now exceeded 100M and will crash at 131M.  I recommend that you quit\n" _
                                  "your game now, then restart the script and type 'restore' to reload.]\n" _
                                  "--Press enter to continue--";
            var $absorb = jcs:get-secret( $warning-string ); 
        }
    }
    else if( $warn-set/warn-50 ) {
        var $warn = adv:get-misc-value( $misc-id-mem-warn );
        if( 50 > $warn ) {
            expr adv:set-misc-value( $misc-id-mem-warn, 50 );
            var $warning-string = " \n[Warning: PR 474781 is present in this version of JUNOS, it causes a\n" _
                                  "memory leak in scripts such as the Adventure game.  The script memory\n" _
                                  "has now exceeded 50M and will continue to grow between 1M-2M per turn\n" _
                                  "Keep your eye on the memory status in the game prompt and quit, restart\n" _
                                  "the script, and type 'restore' to reload your game when the memory\n" _
                                  "usage grows too high.]\n" _
                                  "--Press enter to continue--";
            var $absorb = jcs:get-secret( $warning-string ); 
        }
    }

    /* Build memory string of all tracked processes */    
    var $memory-string = {
        for-each( $processes/process ) {
            var $pid-number = pid;
            if( $process-set[. == $pid-number] ) {
                expr "[Mem:" _ size _ "]";
            }
        }
    }
    <func:result select="$memory-string">;
}


/* 
 * adv:wait-for-enter - Displays a prompt and waits for enter to be pressed.
 * Uses jcs:get-secret() so that any extra entered characters are hidden
 */
<func:function name="adv:wait-for-enter"> {
    var $absorb = jcs:get-secret( "--Press enter to continue--" );
}


/*
 * adv:get-process-memory - Retrieves the current memory usage of all tracked
 * processes as reported by "show system processes extensive"
 *
 * Returns: Node-set containing multiple processes of the form:
 * <process> {
 *     <pid> #;
 *     <size> "#M";
 * }
 */
<func:function name="adv:get-process-memory"> {
    var $command-rpc = <command> "show system processes extensive";
    var $command-output = jcs:execute($connection, $command-rpc );
    var $command-lines = jcs:break-lines( $command-output );
    
    var $processes := {
        for-each( $command-lines ) {
            if( jcs:regex( ".*cscript.*", . ) ) {

                /* In case it has leading spaces */
                var $normalized = normalize-space( . );
            
                var $split = jcs:split( "( )+", $normalized );
                
                <process> {
                    <pid> $split[1];
                    var $memory = {
                        if( contains( $split[6], "K" ) ) {
                            expr floor( translate( $split[6], "K", "" ) div 1000 ) _ "M";
                        }
                        else {
                            expr $split[6];
                        }
                    }
                    <size> $memory;
                }
            }
        }
    }
    <func:result select="$processes">;
}


/* 
 * adv:save-prior - Saves the MIB variables from the past game into its respective
 * MIB instances.
 */
<func:function name="adv:save-prior"> {
    /* Read all the strings */

    /* object locations */
    var $object-string-1-name = adv:build-instance-name( $string-id-object-location );
    var $object-string-1 = adv:read-string( $object-string-1-name );
    
    /* object status */
    var $object-status-string-1-name = adv:build-instance-name( $string-id-object-status );
    var $object-status-string-1 = adv:read-string( $object-status-string-1-name );
        
    /* Misc Variables */
    var $misc-string-1-name = adv:build-instance-name( $string-id-misc );
    var $misc-string-1 = adv:read-string( $misc-string-1-name );

    /* Dwarf Variables */
    var $dwarf-string-name = adv:build-instance-name( $string-id-dwarves );
    var $dwarf-string-1 = adv:read-string( $dwarf-string-name );
    
    /* Visited */
    var $visited-string-1-name = adv:build-instance-name( $string-id-visited );
    var $visited-string-1 = adv:read-string( $visited-string-1-name );

    /* Now write them */
    
    /* object locations */
    var $object-string-1-past-name = adv:build-instance-name( $string-id-object-location, $past );
    expr adv:write-string( $object-string-1-past-name, $object-string-1 );
    
    /* object status */
    var $object-status-string-1-past-name = adv:build-instance-name( $string-id-object-status, $past );
    expr adv:write-string( $object-status-string-1-past-name, $object-status-string-1 );
        
    /* Misc Variables */
    var $misc-string-1-past-name = adv:build-instance-name( $string-id-misc, $past );
    expr adv:write-string( $misc-string-1-past-name, $misc-string-1 );

    /* Dwarf Variables */
    var $dwarf-string-past-name = adv:build-instance-name( $string-id-dwarves, $past );
    expr adv:write-string( $dwarf-string-past-name, $dwarf-string-1 );
    
    /* Visited */
    var $visited-string-1-past-name = adv:build-instance-name( $string-id-visited, $past );
    expr adv:write-string( $visited-string-1-past-name, $visited-string-1 );
}

/*
 * adv:turn-loop - This outer function to the turn() function is used to minimize
 * the amount of recursion.  It loops through the room nodes ensuring that 140
 * turns can be processed before it has to recall itself recursively.
 */
<func:function name="adv:turn-loop"> {

    for-each( $database/rooms/room ) { /* Calls turn() 140 times before looping again */
    
        expr adv:write-debug-message("adv:turn-loop", position() );
        expr adv:turn();
    }
    
    /* Recursively loop */
    expr adv:turn-loop();    
}


/*
 * adv:turn - The turn by turn logic of the game.  Performs initial checks on
 * the current room, the dwarf activity, etc.  Describes the current room and
 * the items within it, retrieves commands, and then executes those commands.
 */
<func:function name="adv:turn"> {
    
    /* 
     * Check for special conditions and do dwarf stuff - provide same room 
     * variable to all since it isn't changed in any of them 
     */
    var $loc = adv:get-misc-value( $misc-id-room );
    var $new-room = adv:closing-check($loc);
    var $new-room2 = adv:dwarf-check( $loc, $new-room );
    expr adv:dwarf-activity( $loc, $new-room2 );
    
    /* Use this string to minimize MIB usage */
    var $misc-string = adv:get-string-by-id( $string-id-misc );

    /* New room could have been changed by the above functions */
    var $new-loc = adv:get-misc-value( $misc-id-new-room, $misc-string );
    
    /* 
     * Did the location change? - Record if we need to end the turn or not
     * by returning an <end-turn> node to the $results node-set.
     */
    var $results := {
        if( $loc != $new-loc ) {
        
            expr adv:set-misc-value( $misc-id-room,  $new-loc );

            /* Are you dead? - Use new-loc instead of loc since loc was set to new-loc and I don't want to reread loc */
            if( $new-loc == 0 ) {

                expr adv:death();
                <end-turn>;        
            }
            else {
        
                /* Use new-loc since loc is no longer accurate */
                var $forced = adv:is-forced-at-location(  $new-loc );
    
                /* Are they forced to move? */
                if( $forced  ) {
                    expr adv:describe();
                    /* Set motion to 1 to cause them to move */
                    expr adv:set-misc-value( $misc-id-motion, 1 );
                    var $motion-misc-string = adv:get-string-by-id( $string-id-misc );
                    expr adv:process-movement($motion-misc-string);
                    <end-turn>;        
                }
                else {
                
                    var $wzdark = adv:get-misc-value(  $misc-id-wzdark, $misc-string );
                    var $dark = adv:is-dark( $new-loc );
                    var $random-number = adv:random-number();

                    /* Are they wandering in the dark? */
                    if( $wzdark && $dark && 35 >= $random-number ) {
                
                        expr adv:write-message( 23 );
                    
                        /* Use new-loc instead of loc because loc equals new-loc and loc variable isn't reliable anymore */
                        expr adv:set-misc-value(  $misc-id-old-room2,  $new-loc );
                        expr adv:death();
                        <end-turn>;        
                    }
                    else {
                
                        /* Describe the situation */
                        expr adv:describe();
                        if( not( $dark ) ) {
                            /* use new-loc because loc variable is not reliable */
                            expr adv:set-visited-room( $new-loc, true() );
                            expr adv:describe-visible-items();
                        }
                    }
                }
            }
        }
        else {
            /* Describe it anyway! - and always mention items - unless it is dark */
            expr adv:describe();
            if( not( adv:is-dark( $new-loc ) ) ) {
                expr adv:describe-visible-items();
            }
        }
    }
    
    /* Only continue if turn processing hasn't ended */
    if( jcs:empty( $results/end-turn ) ) {
    
        /* 
         * At this point, show-all, old-room2, and room are not valid in the 
         * $misc-string variable , everything else is 
         */
    
        var $closed = adv:get-misc-value(  $misc-id-closed, $misc-string );

        if( $closed ) {
            
            var $oyster-status = adv:get-object-status( $oyster );
            var $toting-oyster = adv:is-toting(  $oyster );
            if( 0 > $oyster-status && $toting-oyster  ) {
                
                expr adv:write-object-message( $oyster,  3 );
                /* Fix the oyster's status */
                expr adv:set-object-status( $oyster, 0 );
            }
        }        
        var $dark = adv:is-dark( $new-loc ); /* $new-loc should still be valid here */
        if( $dark ) {
            expr adv:set-misc-value( $misc-id-wzdark, true() );
        }
        else {
            expr adv:set-misc-value( $misc-id-wzdark, false() );
        }
    
        /* wzdark is no longer valid in $misc-string */
        
        /* I don't know what knfloc is for, reproduced logic from C code */
        var $knfloc = adv:get-misc-value(  $misc-id-knfloc, $misc-string );
        /* Use new-loc instead of loc because loc variable isn't reliable */
        if( $knfloc > 0 && $knfloc != $new-loc ) {
            expr adv:set-misc-value( $misc-id-knfloc, 0 );
        }
    
        /* 
         * Perform time-based events, it returns true if the turn should end
         */
        var $timer-result = adv:timer-events( $new-loc );

        if( not( $timer-result ) ) {

            /* 
             * This is recursive until a valid command is received, it gathers
             * instructions from the player 
             */
            expr adv:command-loop();
            
            /* 
             * Execute the action - First, grab a new misc string because of 
             * all the changes from adv:command-loop()... 
             */
            var $command-misc-string = adv:get-string-by-id( $string-id-misc );
            
            var $motion = adv:get-misc-value( $misc-id-motion, $command-misc-string );
            var $verb = adv:get-misc-value( $misc-id-verb, $command-misc-string );
            var $object = adv:get-misc-value( $misc-id-object, $command-misc-string );
            var $debug-only = $database/vocabulary/word[number == $verb][verb][debug-only];
            if( $motion != 0 ) { 
                expr adv:process-movement( $command-misc-string );
            }
            /* This handles actions like say "something"... */
            else if( $verb != 0 && $object == -1 ) {
                expr adv:transitive-verb( $command-misc-string );
            }
            /* Execute a debug command */
            else if( not( jcs:empty( $debug-only ) ) ) { 
                expr adv:transitive-verb( $command-misc-string );
            }
            /* Execute commands with included objects */
            else if( $object != 0 ) {
                expr adv:process-object( $command-misc-string );
            }
            /* Execute commands that lack a specific object */
            else {
                expr adv:intransitive-verb( $command-misc-string );
            }
        }
    }
}


/* 
 * adv:command-loop - This functions loops until an actionable input has been
 * entered.
 */
<func:function name="adv:command-loop"> {
    
    var $something-to-do = adv:get-command();
    
    /* Do we need to loop again? */
    if( not( $something-to-do ) ) {
        expr adv:command-loop();
    }
}

/*
 * adv:get-command - Retrieves input from user and processes it to determine if
 * it is a valid command or not.
 *
 * Returns: boolean - true for good command, false for bad
 */
<func:function name="adv:get-command"> {

    /* Retrieve the input */
    var $word1 = adv:get-words();
    
    /* If blank then return false */
    if( string-length( $word1 ) == 0 ) {
        <func:result select="false()">;
    }
    else {
        
        var $word1-type = adv:get-word-type( $word1 );
        
        /* The word isn't known, return false */
        if( $word1-type == -1 ) {
            <func:result select="false()">;
        }
        else {
        
            /* Get word numbers... */
            var $word1-number = adv:get-word-number( $word1 );
            var $debug-only = $database/vocabulary/word[number == $word1-number][verb][debug-only];
            
            /* Don't process word 2 with say and its synonyms, just do it... */
            if( $word1-type == $word-type-verb && $word1-number == $say ) {
                expr adv:set-misc-value( $misc-id-verb, $say );

                /* Causes the transitive-verb function to be called in the turn() function*/
                expr adv:set-misc-value( $misc-id-object, -1 );
                expr adv:set-misc-value( $misc-id-motion, 0 );
                <func:result select="true()">;
            }
            /* Debug commands don't need to process word 2 because it is a number relating to the command */
            else if( $word1-type == $word-type-verb && not( jcs:empty( $debug-only ) ) ) { 
                var $word2 = adv:get-misc-value(  $misc-id-word2 );
                expr adv:set-misc-value( $misc-id-verb, $word1-number );
                expr adv:set-misc-value( $misc-id-object, number( $word2 ) );
                expr adv:set-misc-value( $misc-id-motion, 0 );
                
                expr adv:write-debug-message( "adv:get-command", "Setting object to ", number( $word2 ) );
                <func:result select="true()">;
            }
            else {
            
                /* Word2 can be blank... */
                var $word2 = adv:get-misc-value(  $misc-id-word2 );
                
                var $word2-type = {
                    if( string-length( $word2 ) > 0 ) {
                        expr adv:get-word-type( $word2 );
                    }
                    else {
                        expr -1; /* no word2 */
                    }
                }
            
                /* If there is an unknown word 2 then return false... */
                if( string-length( $word2 ) > 0 && $word2-type == -1 ) {
                    <func:result select="false()">;
                }
                else {
                    
                    var $word2-number = {
                        if( $word2-type != -1 ) {
                            expr adv:get-word-number( $word2 ); 
                        }
                        /* If word is invalid then don't bother gathering it... */
                        else {
                            expr -1;
                        }
                    }
                    
                    if( $word1-type == $word-type-special-verb && $word2-type == $word-type-special-verb &&
                        $word1-number == 51 && $word2-number == 51 ) {
                    
                        expr adv:show-vocabulary();
                        <func:result select="false()">;
                    }
                    /* Special verbs just provide a unique message that equals the verb number */
                    else if( $word1-type == $word-type-special-verb ) {
                        expr adv:write-message(  $word1-number );
                        <func:result select="false()">;
                    }
                    else if( $word2-type == $word-type-special-verb ) {
                        expr adv:write-message(  $word2-number );
                        <func:result select="false()">;
                    }
                    else if( $word1-type == $word-type-motion ) {
                        /* Can't be two motion words... */
                        if( $word2-type == $word-type-motion ) {
                            expr adv:write-raw-message( "That's some bad grammer!" );
                            <func:result select="false()">;
                        }
                        else {
                            expr adv:set-misc-value( $misc-id-motion, $word1-number );
                            expr adv:set-misc-value( $misc-id-verb, 0 );
                            expr adv:set-misc-value( $misc-id-object, 0 );
                            <func:result select="true()">;
                        }
                    }
                    else if( $word2-type == $word-type-motion ) {
                        expr adv:set-misc-value( $misc-id-motion, $word2-number );
                        expr adv:set-misc-value( $misc-id-verb, 0 );
                        expr adv:set-misc-value( $misc-id-object, 0 );
                        <func:result select="true()">;
                    }
                    else if( $word1-type == $word-type-object ) {
                        expr adv:set-misc-value( $misc-id-object, $word1-number );
                        
                        /* two objects are a bad combination... */
                        if( $word2-type == $word-type-object ) {
                            expr adv:write-raw-message( "That's some bad grammer!" );
                            <func:result select="false()">;
                        }
                        else {
                            /* Add the verb if present */
                            if( $word2-type == $word-type-verb ) {
                                expr adv:set-misc-value( $misc-id-verb, $word2-number );
                            }
                            else {
                                expr adv:set-misc-value( $misc-id-verb, 0 );
                            }
                            expr adv:set-misc-value( $misc-id-motion, 0 );
                            <func:result select="true()">;
                        }
                    }
                    else if( $word1-type == $word-type-verb ) {
                        
                        /* two verbs together are bad... */
                        if( $word2-type == $word-type-verb ) {
                            expr adv:write-raw-message( "That's some bad grammer!" );
                            <func:result select="false()">;
                        }
                        else {
                        
                            expr adv:set-misc-value( $misc-id-verb, $word1-number );
                            
                            /* If there is an object then grab it... */
                            if( $word2-type == $word-type-object ) {
                                expr adv:set-misc-value( $misc-id-object, $word2-number );
                            }
                            else {
                                expr adv:set-misc-value( $misc-id-object, 0 );
                            }
                            expr adv:set-misc-value( $misc-id-motion, 0 );
                            <func:result select="true()">;
                        }
                    }
                    else {
                        expr adv:write-raw-message( "Error in the get-command() function" );
                        <func:result select="false()">;
                    }
                }
            }
        }
    }
}


/* 
 * adv:show-vocabulary - Displays a very crude list of most of the available 
 * verbs and motions.  Does not display objects, special-verbs, or debug-only
 * commands.
 */
<func:function name="adv:show-vocabulary"> {
    
    /* Assemble all the words to display */
    var $words := {
        for-each( $database/vocabulary/word[verb || motion][not(debug-only)] ) {
            <word> word;
        }
    }

    /* Be lazy for now and just output them all to the screen on a single line, let wordwrap handle it... */
    var $output-string = {
        expr "Possible commands: ";
        for-each( $words/word ) {
            expr . _ " ";
        }
    }
    
    expr adv:write-raw-message( $output-string );
}


/*
 * adv:get-words - Displays a prompt and retrieves input from the user.  Only
 * two words are gathered with a maximum length of 20 bytes each.  The second
 * word consists of everything on the line following the first space.  All
 * words are converted into lowercase for processing.  Any detected control codes
 * will cause the entire input to be invalid.  Removes any , from input to ensure
 * that it doesn't corrupt the indexed strings in the MIB.
 *
 * Returns: string - the first word of the input
 */
<func:function name="adv:get-words"> {

    /* Build the prompt and gather the input. */
    var $memory-string = adv:get-memory-string();
    var $prompt = " \n" _ $memory-string _ "--What now?> ";
    var $input = jcs:get-input( $prompt );
    
    /* Is anything there? */
    if( string-length( $input ) > 0 ) {
        
        /* Ok, so what about a space?  If not then we only have one word... */
        if( not( contains( $input, " " ) ) ) {
            /* Convert to lowercase */
            var $raw-word = adv:to-lower-case( $input );
            
            /* Remove any commas */
            var $word = translate( $raw-word, ",", "" );
            
            /* Check for presence of control codes */
            var $word-valid = adv:is-valid-ascii(  $word );
            
            /* Max of 20 characters */
            var $good-word = {
                if( string-length( $word ) > 20 ) {
                    expr substring( $word, 1, 20 );
                }
                else {
                    expr $word;
                }
            }
            
            expr adv:set-misc-value( $misc-id-word2, "" );
            if( $word-valid  ) {
                expr adv:set-misc-value( $misc-id-word1, $good-word );
                <func:result select="$good-word">;
            }
            else {
                expr jcs:output( "Error in get-words - XML doesn't like control characters." );
                expr adv:set-misc-value( $misc-id-word1, "" );
                var $bad-word = "";
                <func:result select="$bad-word">;
            }
        }
        else {
            /* assign the first word */
            var $raw-word = adv:to-lower-case( substring-before( $input, " " ) );
            var $word = translate( $raw-word, ",", "" );
            var $word-valid = adv:is-valid-ascii(  $word );
            /* Max of 20 characters */
            var $good-word = {
                if( string-length( $word ) > 20 ) {
                    expr substring( $word, 1, 20 );
                }
                else {
                    expr $word;
                }
            }
            
            var $result-word = {
                if( $word-valid  ) {
                    expr adv:set-misc-value( $misc-id-word1, $good-word );
                    expr $good-word;
                }
                else {
                    expr jcs:output( "Error in get-words - XML doesn't like control characters." );
                    expr adv:set-misc-value( $misc-id-word1, "" );
                    expr "";
                }
            }
            
            /* Everything else is the second word... */
            var $other = substring-after( $input, " " );
            
            /* assign the rest */
            var $raw-word2 = adv:to-lower-case( $other );
            var $word2 = translate( $raw-word2, ",", "" );
            var $word2-valid = adv:is-valid-ascii(  $word2 );
            /* Max of 20 characters */
            var $good-word2 = {
                if( string-length( $word2 ) > 20 ) {
                    expr substring( $word2, 1, 20 );
                }
                else {
                    expr $word2;
                }
            }
            
            if( $word2-valid  ) {
                expr adv:set-misc-value( $misc-id-word2, $good-word2 );
            }
            else {
                expr jcs:output( "Error in get-words - XML doesn't like control characters." );
                expr adv:set-misc-value( $misc-id-word2, "" );
            }
            <func:result select="$result-word">;
        }
    }
}


/*
 * adv:is-valid-ascii - Tests if the given word is composed solely of XML-valid
 * ascii characters or not.  Control Codes cause a script failure so they must
 * be detected and avoided.
 *
 * Returns: boolean - true if all the characters are valid, false otherwise
 */
<func:function name="adv:is-valid-ascii"> {
    param $word;

    /* Build giant string of all the valid ascii characters */    
    var $valid-ascii = {
        for-each( $ascii/char ) {
            expr sym;
        }
    }
    
    /* Nuke all non-whitespace */
    var $word-run1 = translate( $word, $valid-ascii, "" );
    
    /* 
     * Nuke white-space - only look for tabs and spaces since there will be no
     * newlines or carriage returns in this input
     */
    var $word-run2 = translate( $word-run1, " \t", "" );
    
    /* If anything is left, then it isn't valid ascii! */
    if( string-length( $word-run2 ) > 0 ) {
        <func:result select = "false()">;
    }
    else {
        <func:result select = "true()">;
    }
}

/*
 * adv:describe-visible-items - Describes what important structures, creatures,
 * and objects are in the room.  Some things are not intended to be displayed and
 * they are marked with an <unlisted> XML node.  The first time a treasure is 
 * shown it decrements a tally.  When all treasures have been shown the end game
 * can start.
 */
<func:function name="adv:describe-visible-items"> {

    /* Grab strings to minimize MIB usage */
    var $misc-string = adv:get-string-by-id( $string-id-misc );
    var $object-string = adv:get-string-by-id( $string-id-object-location );
    var $object-status-string = adv:get-string-by-id( $string-id-object-status );
    
    /* Retrieve these values outside of the loop to minimize cycles - they are constant throughout the loop */
    var $closed = adv:get-misc-value(  $misc-id-closed, $misc-string );
    var $toting-nugget = adv:is-toting( $nugget, $object-string );
    var $room = adv:get-misc-value( $misc-id-room, $misc-string );

    /* Load the XML data structures so that we don't have to do 100 reads of the MIB */ 
    var $split-object-array = jcs:split( ",", $object-string );
    
    /* Build the XML structures */
    var $object-data := {
        for-each( $split-object-array ) {
            <object> .;
        }
    }
    
    /* Structures first, without a count, so they blend into the description */
    for-each( $database/objects/object ) {
        if( structure && not( unlisted ) ) {
            var $object-at = adv:loaded-is-at( number, $room, $object-data );
        
            /* 
             * Do not go forward if the object is steps and they are toting a 
             * nugget.  Only move forward if object is in room
             */
            if( ( number != $steps || not( $toting-nugget ) ) && $object-at  ) {
                var $status = adv:get-object-status( number, $object-status-string );

                if( number == $steps && $room == 15 ) { /* steps has a couple differnet messages, do this manually */
                    expr adv:write-object-message( number, 3 );
                }
                else {
                    expr adv:write-object-message( number, $status + 2 );
                }
            }
        }
    }
    
    /* Creatures next */
    var $creature-count = {
        var $temp-count := {
            for-each( $database/objects/object ) {
                var $object-at = adv:loaded-is-at( number, $room, $object-data );
                if( $object-at && not( unlisted ) && creature ) {
                    <object>;
                }
            }
        }
        expr count( $temp-count/object );
    }
    if( $creature-count == 1 ) {
        expr jcs:output("* There is a creature here:" );
    }
    else if( $creature-count > 1 ) {
        expr jcs:output("* There are creatures here:" );
    }
    for-each( $database/objects/object ) {
        if( creature && not( unlisted ) ) {
            var $object-at = adv:loaded-is-at( number, $room, $object-data );
        
            if( $object-at  ) {
                var $status = adv:get-object-status( number, $object-status-string );

                /* Do satyr differently... */
                if( number == $satyr ) {
                    /* get the haiku */
                    var $haiku-command = <command> "show version and haiku";
                    var $haiku-output = jcs:execute( $connection, $haiku-command );
                    var $haiku-content = $haiku-output/haiku/content;
                    var $haiku-raw = substring( $haiku-content, 2, string-length( $haiku-content ) - 2 );
                    var $lines = jcs:split("\n", $haiku-raw );
                    expr adv:write-object-message( number, 2 );
                    for-each( $lines ) {
                        var $line = {
                            if( position() == 1 ) {
                                expr " \n        '" _ .;
                            }
                            else {
                                expr "         " _ .;
                            }
                            if( position() == last() ) {
                                expr "'";
                            }
                        }
                        expr jcs:output( $line );
                    }
                }
                else {
                    expr adv:write-object-message( number, $status + 2 );
                }
            }
        }
    }
    
    
    /* Display message informing them that there are objects in the room */
    var $count = {
        var $temp-count := {
            for-each( $database/objects/object ) {
                var $object-at = adv:loaded-is-at( number, $room, $object-data );
                if( $object-at && not( unlisted ) && not( creature ) && not( structure ) ) {
                    <object>;
                }
            }
        }
        expr count( $temp-count/object );
    }
    if( $count == 1 ) {
        expr jcs:output("* There is an object here:" );
    }
    else if( $count > 1 ) {
        expr jcs:output("* There are objects here:" );
    }
    
    /*if( $mode == $debug ) {
        expr adv:write-debug-message( "adv:describe-visible-items", "Toting Nugget: ", $toting-nugget );
        expr adv:write-debug-message( "adv:describe-visible-items", "Room: ", $room );
        expr adv:write-debug-message( "adv:describe:visible-items", "Object String: ", $object-string );
        var $message = {
            for-each( $object-data/object ) {
                expr "[" _ position() _ "-" _ . _ "]";
            }
        }
        expr adv:write-debug-message( "adv:describe:visible-items", "Objects: ", $message );
    }*/
    
    for-each( $database/objects/object ) {
        if( not( creature ) && not( unlisted ) && not( structure ) ) {
            var $object-at = adv:loaded-is-at( number, $room, $object-data );
        
            if( $object-at ) {
                var $status = adv:get-object-status( number, $object-status-string );

                /* Do not go forward if the object status is 255 and closed is set */
                /* 
                 * Treasures are set to 255 until they are seen, then they are 
                 * changed to 0 or 1 and the tally does down 
                 */
                var $new-status = {
                    if( not( $closed ) || $status != 255 ) {
                        if( $status == 255 ) {
                            if( number == $rug || number == $chain ) {
                                expr adv:set-object-status(  number, 1 );
                                expr 1;
                            }
                            else {
                                expr adv:set-object-status( number, 0 );
                                expr 0;
                            }
                            /* Remove one from tally */
                            expr adv:increment-misc-value( $misc-id-tally, -1 );
                        }
                        else {
                            expr $status;
                        }
                    }
                    else {
                        expr $status;
                    }
                }
                expr adv:write-object-message( number, $new-status + 2 );
            }
        }
    }
    /* Tally has changed and needs to be loaded fresh */
    var $tally = adv:get-misc-value(  $misc-id-tally );
    
    expr adv:write-debug-message( "adv:describe-items", "New Tally: ", $tally );
    
    /* I don't know why this code logic exists, but it is copied from the C code */
    var $tally2 = adv:get-misc-value(  $misc-id-tally2, $misc-string );
    var $limit = adv:get-misc-value(  $misc-id-limit , $misc-string);
    if( $tally == $tally2 && $tally != 0 && $limit > 35 ) {
        expr adv:set-misc-value( $misc-id-limit, 35 );
    }
}


/*
 * adv:describe - Describes the current room.  Uses long description the first 
 * time and shorter description for rooms that have already been visited
 */
<func:function name="adv:describe"> {

    /* Load these here to minimize MIB usage */
    var $misc-string = adv:get-string-by-id( $string-id-misc );
    var $misc-set = jcs:split( ",", $misc-string );
    var $object-location-string = adv:get-string-by-id( $string-id-object-location );

    /* Give message that bear is tagging along... */
    var $toting-bear = adv:is-toting( $bear, $object-location-string );
    if( $toting-bear  ) {
        expr adv:write-message(  141 );
    }
    
    /* Give them dark message, or long message (first time) or short message */
    var $loc = $misc-set[ number( $misc-id-room ) ];
    var $data-room = $database/rooms/room[number == $loc];
    var $room-name = {
        if( $data-room/name ) {
            expr "-=|"_ $data-room/name _ "|=-\n";
        }
        else {
            expr "";
        }
    }
    if( adv:is-dark( $loc, $object-location-string )  ) {
        expr adv:write-message(  16 );
    }
    else if( adv:has-visited-room( $loc )  ) {
        /* Write short text */
        expr adv:write-raw-message( $room-name, $data-room/short-text );
    }
    else {
        /* Write name and long text */
        var $message = {
            if( $data-room/name ) {
                expr $room-name _ $data-room/long-text;
            }
            else {
                expr $data-room/long-text;
            }
        }
        expr adv:write-raw-message( $message );
    }
    
    var $percent = adv:random-number();
    var $closing = $misc-set[ number( $misc-id-closing ) ];

    /* Give them the Plugh message at Y2 randomly */    
    if( $loc == 33 && 25 >= $percent && not( $closing ) ) {
        expr adv:write-message(  8 );
    }
}
 

/* 
 * adv:process-movement - Used to handle movement, typically will defer
 * to do-travel but it also allows you to move to prior room and it handles
 * the 'look' and 'instructions' commands.
 */
<func:function name="adv:process-movement"> {
    param $misc-string;
    
    var $misc-set = jcs:split( ",", $misc-string );
    
    var $loc = $misc-set[ number( $misc-id-room) ];
    var $motion = $misc-set[ number($misc-id-motion) ];

    if( $motion == $nullx ) {
        /* Do Nothing */
    }
    /* Handle forced rooms - which only exist to give messages */
    else if( $motion == 1 && adv:is-forced-at-location( $loc ) ) {
        expr adv:do-travel($loc, $motion);
    }
    else if( $motion == $back ) {
        expr adv:go-back();
    }
    else if( $motion == $look ) { /* Causes the room to be displayed all over again */
        expr adv:set-misc-value( $misc-id-wzdark, 0 );
        expr adv:set-visited-room( $loc, false() );
    }
    else if( $motion == $cave ) {
        if( 8 > $loc ) {
            expr adv:write-message(  57 );
        }
        else {
            expr adv:write-message(  58 );
        }
    }
    /* handle instructions here */
    else if( $motion == $instructions ) {
        expr adv:write-message(  1 );
    }
    else {
        var $oldloc = $misc-set[ number( $misc-id-old-room ) ];
        expr adv:set-misc-value( $misc-id-old-room2, $oldloc );
        expr adv:set-misc-value( $misc-id-old-room, $loc );
        expr adv:do-travel($loc, $motion);
    }
}


/*
 * adv:go-back - Return to past room if possible.
 */
<func:function name="adv:go-back"> {

    var $old-location = adv:get-misc-value( $misc-id-old-room );
    var $forced = adv:is-forced-at-location( $old-location );
    
    /* Where they want to go? */
    var $wanted-room = {
        if( $forced  ) {
            expr adv:get-misc-value( $misc-id-old-room2 );
        }
        else {
            expr $old-location;
        }
    }
    
    expr adv:set-misc-value( $misc-id-old-room2, $old-location );
    var $location = adv:get-misc-value(  $misc-id-room );
    expr adv:set-misc-value( $misc-id-old-room, $location );

    /* scratch-t is used to indicate that the processing should end */
    expr adv:set-misc-value( $misc-id-scratch-t, 0 );
    expr adv:set-misc-value( $misc-id-scratch-k, 0 );
    
    if( $wanted-room == $location ) {
        expr adv:write-message(  91 );
    }
    else {
        for-each( $database/cave-travel/room[number == $location]/travel-destination ) {
            var $t-current = adv:get-misc-value(  $misc-id-scratch-t );
            if( $t-current == 0 ) {
                if( condition == 0 && room == $wanted-room ) {
                    expr adv:set-misc-value( $misc-id-motion, motion );
                    expr adv:do-travel();
                    /* Signals the rest of the function that no further processing should be done */
                    expr adv:set-misc-value( $misc-id-scratch-t, 1 ); 
                }
                else if( condition == 0 ) {
                    expr adv:set-misc-value( $misc-id-scratch-k, position() );
                    var $try-room = room;
                    var $forced2 = adv:is-forced-at-location( $try-room );
                    
                    if( $forced2  && $database/cave-travel/room[number == $try-room]/travel-destination[1]/room == $wanted-room ) {
                        expr adv:set-misc-value( $misc-id-scratch-k, $try-room );
                    }
                }
            }
        }
        var $scratch-k = adv:get-misc-value(  $misc-id-scratch-k ); 
        var $scratch-t = adv:get-misc-value(  $misc-id-scratch-t ); 
        if( $scratch-t == 0 ) {
            if( $scratch-k > 0 ) {
                expr adv:set-misc-value( $misc-id-motion, $database/cave-travel/room[number == $location]/travel-destination/motion );
                expr adv:do-travel();
            }
            else if( $scratch-t == 0 ) {
                expr adv:write-message(  140 );
            }
        }
    }
}


/*
 * adv:do-travel - Reads the <travel-destinations> and determines what result
 * a particular motion has.  Sometimes this is straightforward but othertimes
 * there are specific conditions that must be met in order for travel to a 
 * room to be successful.
 */
<func:function name="adv:do-travel"> {
    param $room;
    param $chosen-motion;

    var $percent = adv:random-number();
    
    /* Process all valid destinations and return the matching ones in the set - take the first */
    var $destination-set := {    
        for-each( $database/cave-travel/room[number == $room]/travel-destination ) {
            /* The object is embedded in some conditions */
            var $object = condition mod 100;
            if( motion == 1 || motion == $chosen-motion  ) {
                var $extract-raw = condition div 100;
                var $extract = floor( $extract-raw );
                var $toting = adv:is-toting( $object );
                
                /* 0 means no conditions, less than 100 means that it works a percent of the time */
                if( $extract == 0 ) {
                    if( condition == 0 || condition > $percent ) {
                        /* Set the destination */
                        <destination> room;
                    }
                }
                /* 100-200 depends on possession of a particular object */
                else if( $extract == 1 ) {
                    if( $object == 0 || $toting ) {
                        /* Set the destination */
                        <destination> room;
                    }
                }
                /* 200-300 depends on presence of object in room or inventory */
                else if( $extract == 2 ) {
                    var $at = adv:is-at( $object, $room );
                    if( $toting  || $at  ) {
                        /* Set the destination */
                        <destination> room;
                    }
                }
                /* 3, 4, and 5 are special ones, like the dragon */
                else if( $extract == 3 || $extract == 4 || $extract == 5 ) {
                    var $object-status = adv:get-object-status( $object );
                    /* Dragon has rooms set to 331, so 31 for dragon and 3 for extract.  Dragon is alive and
                       threatening with a status of 0 and is dead with a status of 2 */
                    if( $object-status != ( $extract ) - 3 ) {
                        /* Set the destination */
                        <destination> room;
                    }
                }
                /* 7 is for plant, only allow if status is 6 */
                else if( $extract == 7 ) { 
                    var $object-status = adv:get-object-status( $object );

                    if( $object-status == ( $extract ) - 3 ) {
                        /* Set the destination */
                        <destination> room;
                    }
                }
                else {
                    /* Report an error */
                    expr jcs:output( "Error in the do-travel routine." );
                }
            }
        }
    }
    
    if( count( $destination-set/destination ) == 0 ) {
        expr adv:bad-move();
    }
    /* Greater than 500 just write a message to the user */
    else if( $destination-set/destination[1] > 500 ) {
        expr adv:write-message(  $destination-set/destination[1] - 500 );
    }
    /* 300s are special moves that depend on various factors */
    else if( $destination-set/destination[1] > 300 ) {
        expr adv:special-move( $destination-set/destination[1] );
    }
    else {
        /* Success!  Move there... */
        expr adv:set-misc-value( $misc-id-new-room, $destination-set/destination[1] );
    }
}


/*
 * adv:bad-move - Report that move will not work.
 */
<func:function name="adv:bad-move"> {

    var $motion = adv:get-misc-value(  $misc-id-motion );
    var $verb = adv:get-misc-value(  $misc-id-verb );
    
    /* Determine the message... */
    var $message-id = {
        if( $motion >= 43 && 50 >= $motion ) {
            expr 9;
        }
        else if( $motion == 20 || $motion == 30 ) {
            expr 9;
        }
        else if( $motion == 7 || $motion == 36 || $motion == 37 ) {
            expr 10;
        }
        else if( $motion == 11 || $motion == 19 ) {
            expr 11;
        }
        else if( $verb == $find || $verb == $inventory ) {
            if( $motion == 62 || $motion == 65 ) {
                expr 42;
            }
            else if( $motion == 17 ) {
                expr 80;
            }
            else {
                expr 59;
            }
        }
        else if( $motion == 62 || $motion == 65 ) {
            expr 42;
        }
        else if( $motion == 17 ) {
            expr 80;
        }
        else {
            expr 12;
        }
    }
    expr adv:write-message( $message-id );
}


/*
 * adv:special-move - Handle all the special conditions like the plover room
 * and the troll bridge.
 */
<func:function name="adv:special-move"> {
    param $destination;

    var $modified = $destination - 300;
    if( $modified == 1 ) { /* plover movement via alcove */
        
        var $holding = adv:get-misc-value(  $misc-id-holding );
        var $toting-emerald = adv:is-toting(  $emerald );
        
        if( $holding == 0 || ( $holding == 1 && $toting-emerald  ) ) {
            var $room = adv:get-misc-value($misc-id-room );
            expr adv:set-misc-value( $misc-id-new-room, 199 - $room );    
        }
        else {
            expr adv:write-message(  117 );
        }
    }
    else if( $modified == 2 ) { /* trying to remove plover, but the route is bad */
        var $room = adv:get-misc-value($misc-id-room );
        expr adv:drop-object( $emerald, $room );
    }
    else if( $modified == 3 ) { /* troll bridge apparently */
        
        var $troll-status = adv:get-object-status( $troll );
        var $room = adv:get-misc-value( $misc-id-room );
        if( $troll-status == 1 ) { /* Blocks your way - again! */
            expr adv:write-object-message( $troll, 3 );
            expr adv:set-object-status( $troll, 0 ); /* Stands by bridge */
            expr adv:drop-object( $troll-hidden, 0 );
            expr adv:drop-object( $troll, 117 );
            
            expr adv:set-misc-value( $misc-id-new-room, $room );
        }
        else {
            if( $room == 117 ) {
                expr adv:set-misc-value( $misc-id-new-room, 122 );
            }
            else {
                expr adv:set-misc-value( $misc-id-new-room, 117 );
            }
            if( $troll-status == 0 ) { /* Stands by bridge */
                expr adv:set-object-status( $troll, 1 ); /* Blocks your way */
            }
            var $toting-bear = adv:is-toting(  $bear );
            if( $toting-bear  ) { /* If you try to go over the bridge with the bear it will collapse */
                expr adv:write-message(  162 );
                expr adv:set-object-status( $chasm, 1 ); /* chasm is open (no bridge) */
                expr adv:set-object-status( $troll, 2 ); /* Dead or gone? */
                var $new-room = adv:get-misc-value(  $misc-id-new-room );
                expr adv:drop-object( $bear, $new-room );
                expr adv:set-object-status( $bear,   3 ); /* Collapsed over the bridge? */
                
                var $spices-status = adv:get-object-status( $spices );
                if( 0 > $spices-status ) {
                    expr adv:increment-misc-value( $misc-id-tally2 );
                }
                expr adv:set-misc-value( $misc-id-old-room2, $new-room );
                expr adv:death();
            }
        }
    }
    else {
        expr jcs:output( "Error in the special-move function." );
    }
}


/*
 * adv:is-at - Determines if object is in the room as opposed to within your
 * inventory.  Processes <fixed> objects as well as normal objects.
 *
 * Arguments: 
 *     $object-number - [Required] - The number of the object to check
 *     $room-number - [Optional] - The room to check, if not filled then a MIB 
 *     read is performed.
 *
 * Returns: boolean - true if object is present, false otherwise
 */
<func:function name="adv:is-at"> {
    param $object-number;
    param $room-number = -12345;
    
    var $object-string = adv:get-string-by-id( $string-id-object-location );
    var $split-object-array = jcs:split( ",", $object-string );
    
    var $object-data := {
        for-each( $split-object-array ) {
            <object> .;
        }
    }
    var $result = adv:loaded-is-at( $object-number, $room-number, $object-data );
    
    <func:result select="$result">;
}


/*
 * adv:loaded-is-at - More efficient version of is-at because it requires that
 * its data structures be preloaded so a calling function can load them once and
 * make multiple is-at checks.  Otherwise, fulfills the same purpose as is-at()
 *
 * Arguments:
 *     $object-number - [Required] - The number of the object to check
 *     $room-number - [Required] - The room to check, if not filled then a MIB 
 *     read is performed.
 *     $object-data - [Required] - node-set of the object location string
 *     
 * Returns: boolean - true if object is present, false otherwise
 */
<func:function name="adv:loaded-is-at"> {
    param $object-number;
    param $room-number = -12345;
    param $object-data;
    
    var $room = { 
        if( $room-number == -12345 ) {
            expr adv:get-misc-value( $misc-id-room ); 
        }
        else {
            expr $room-number;
        }
    }
    
    var $place = $object-data/object[ position() == $object-number];
    
    /* Special objects - mirror - it is at 116 as well as 115 when set to 115 */
    if( $object-number == $mirror && $place == 115 && $room == 116 ) {
        <func:result select="true()">;
    }
    /* Rug and dragon , at first it is in both room 119 and 121, along with the dragon */
    else if( ( $object-number == $rug || $object-number == $dragon ) && $place == 119 && $room == 121 ) {
        <func:result select="true()">;
    }
    /* Troll, if at 117 then he is at 122, same with chasm too */
    else if( ( $object-number == $troll || $object-number == $troll-hidden || $object-number == $chasm ) &&
               $place == 117 && $room == 122 ) {
        <func:result select="true()">;
    }
    /* Grate 8 and 9 */
    else if( $object-number == $grate && $place == 8 && $room == 9 ) {
        <func:result select="true()">;
    }
    /* Steps 14 and 15 */
    else if( $object-number == $steps && $place == 14 && $room == 15 ) {
        <func:result select="true()">;
    }
    /* Fissure 17 and 27 */
    else if( $object-number == $fissure && $place == 17 && $room == 27 ) {
        <func:result select="true()">;
    }
    /* Fissure 35 and 110 */
    else if( $object-number == $shadowy-figure && $place == 35 && $room == 110 ) {
        <func:result select="true()">;
    }
    else if( $place == $room ) {
        <func:result select="true()">;
    }
    else {
        <func:result select="false()">;
    }
}


/*
 * adv:random-number - Returns a random number between the $min and the $max.
 * math:random() is not being seeded right now by JUNOS (PR 471625) so I pull
 * in a timer value from sysctl to add some extra randomness.
 *
 * Arguments:
 *     $min - [Optional] - The minimum number (should be greater than zero)
 *     $max - [Optional] - The maximum number
 *
 * Returns: number - the random number
 */
<func:function name="adv:random-number"> {
    param $min = 1;
    param $max = 100;

    /* 
     * The math:random() function isn't seeded right now in JUNOS, so I added this modification
     * to help make it more random.  
     */
    var $difference = $max - $min;

    var $time = jcs:sysctl( "kern.timecounter.nmicrotime", "i" );
    var $random = math:random();
    
    var $result = { 
        if( $time mod 3 == 0 ) {
            expr ( floor( $random * ( $difference + 1 ) ) + $min );
        }
        else {
            expr ( ( $time mod ( $difference + 1 ) ) + $min );
        }
    }

    <func:result select="number($result)">;
}

/*
 * adv:dwarf-activity - Called every turn to make the dwarves move about and
 * cause mischief.  First a dwarf throws an axe which misses.  Next, up to six
 * of the dwarfs move randomly and attack you when they see you.  The seventh
 * dwarf is a pirate who can steal your treasures.
 */
<func:function name="adv:dwarf-activity"> {
    param $loc;
    param $new-loc;
    
    var $forced = adv:is-forced-at-location(  $new-loc );
    var $no-pirate = $database/rooms/room[number == $new-loc]/no-pirate;
    
    /* Do nothing unless dwarves are allowed in the new location */
    if( $new-loc != 0 && not( $forced ) && jcs:empty( $no-pirate ) ) {
    
        /* Are dwarves active?  If not then set them to active */
        var $dflag = adv:get-misc-value( $misc-id-dflag );
        
        /* Dwarves aren't active */
        if( $dflag == 0 ) {
            /* If location is beyond 15 then get them moving! */
            if( $new-loc > 15 ) {
                expr adv:set-misc-value(  $misc-id-dflag, 1 );
            }
        }
        /* First encounter - possibly kill 1-2 dwarves... */
        else if ( $dflag == 1 ) {
            var $random-1 = adv:random-number();
            
            /* I increased the frequency of this happening because the random number function is flakey */
            if( $new-loc > 15 && 10 >= $random-1  ) {

                expr adv:set-misc-value(  $misc-id-dflag, 2 );
                
                var $random-2 = adv:random-number();
                var $random-3 = adv:random-number();
                
                if( $random-2 > 50 ) {
                    var $random-4 = adv:random-number( 1, 5 );
                    expr adv:set-dwarf-id-value( $id-dwarf-room,  $random-4, 0 );
                }
                if( $random-3 > 50 ) {
                    var $random-5 = adv:random-number( 1, 5 );
                    expr adv:set-dwarf-id-value( $id-dwarf-room, $random-5, 0 );
                }
                for-each( $starting-values/dwarf-locations/dwarf ) {
                    /* Load it from the starting-values array, they haven't moved yet */
                    var $dloc = location;
                    
                    if( $dloc == $new-loc ) {
                        expr adv:set-dwarf-id-value(  $id-dwarf-room,  position(),  $dwarf-alt-location );
                        expr adv:set-dwarf-id-value(  $id-old-dwarf-room,  position(),  $dwarf-alt-location );
                    }
                    else {
                        expr adv:set-dwarf-id-value(  $id-old-dwarf-room,  position(),  $dloc );
                    }
                 }
                 
                 /* Drop an axe */
                 expr adv:write-message(  3 ); /* Threw an axe and ran */
                 expr adv:drop-object(  $axe,  $new-loc );
            }
        }
        else {

            /* Loop through all the dwarves and build node-set of all the changes that need to be done */
            /* Retrieve string once to minimize MIB usage */
            var $dwarf-string = adv:get-string-by-id( $string-id-dwarves );
            
            /* Receives <dwarf> <attack> and <hit> elements - <dwarf> has <old-room> and <room> and <seen> */
            var $dwarf-set := {
                for-each( $starting-values/dwarf-locations/dwarf ) {
                    var $dloc-loop = adv:get-dwarf-id-value( $id-dwarf-room, position(), $dwarf-string );
                    var $odloc-loop = adv:get-dwarf-id-value( $id-old-dwarf-room, position(), $dwarf-string );
                    var $dseen-loop = adv:get-dwarf-id-value( $id-dwarf-seen, position(), $dwarf-string );

                    /* Location of 0 means its dead */
                    if( $dloc-loop == 0 ) {
                        /* Give them all blanks */
                        <dwarf> {
                            <old-room> $odloc-loop;
                            <room> 0;
                            <seen> 0;
                        }
                    }
                    else {
                
                        /* move a dwarf at random */
                        var $new-dwarf-room = adv:random-dwarf-move( position(), $dloc-loop, $odloc-loop );
                    
                        var $new-dseen = {
                            if( ($dseen-loop > 0 && $new-loc >= 15) || $dloc-loop == $new-loc || $new-dwarf-room == $new-loc ) {
                                expr 1;
                            }                    
                            else {
                                expr 0;
                            }
                        }
                        
                        /* If the Dwarf hasn't seen you then let them go about their business */
                        if( $new-dseen == 0 ) {
                            <dwarf> {
                                <old-room> $dloc-loop;
                                <room> $new-dwarf-room;
                                <seen> $new-dseen;
                            }
                        }
                        /* If Dwarf saw you, then set their room to your new room and have them steal or attack */
                        else {
                            
                            /* The pirate steals */
                            if( position() == $pirate ) {
                                var $pirate-done = adv:do-pirate( $new-loc, $dloc-loop, $new-loc );
                                
                                /* If the pirate is done then retire him */
                                if( $pirate-done ) {
                                    <dwarf> {
                                        <old-room> 0;
                                        <room> 0;
                                        <seen> 0;
                                    }
                                }
                                else {
                                    <dwarf> {
                                        <old-room> $dloc-loop;
                                        <room> $new-loc;
                                        <seen> $new-dseen;
                                    }
                                }
                            }
                            /* The rest of the dwarves attack */
                            else {
                                /* Write their values */
                                <dwarf> {
                                    <old-room> $dloc-loop;
                                    <room> $new-loc;
                                    <seen> $new-dseen;
                                }

                                /* If they were already in this room then they will attack */
                                if( $dloc-loop == $new-loc ) {
                                    /* Record an attack */
                                    <attack>;

                                    var $knfloc = adv:get-misc-value(  $misc-id-knfloc );
                                    expr adv:set-misc-value( $misc-id-knfloc, $new-loc );
                                
                                    var $random-number = adv:random-number( 1, 1000 );
                                    var $dflag-temp = adv:get-misc-value(  $misc-id-dflag );
                                
                                    expr adv:write-debug-message( "adv:dwarf-activity", "Dwarf Attack Random ", $random-number, " Dflag ", $dflag-temp );

                                    /* I lowered their chance of hitting you */
                                    if( 65 * ( $dflag-temp - 2 ) > $random-number ) {
                                        /* Record a hit */
                                        <hit>;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            if( count( $dwarf-set/dwarf ) != 7 ) {
                expr jcs:output( "ERROR - Dwarf Activity is trying to work without seven dwarves!" );
            }
            
            /* Update the dwarf values in the MIB in a single operation */
            var $new-dwarf-string = {
                /* dwarf-room */
                for-each( $dwarf-set/dwarf ) {
                    expr room _ ","; 
                }
                /* dwarf-old-room */
                for-each( $dwarf-set/dwarf ) {
                    expr old-room _ ",";
                }
                /* dwarf-seen */
                for-each( $dwarf-set/dwarf ) {
                    expr seen;
                    if( position() != last() ) {
                        expr ",";
                    }
                }
            }
            /* Write the string */
            var $string-name = adv:build-instance-name( $string-id-dwarves );
            expr adv:write-string( $string-name, $new-dwarf-string );
            
            /* Figure out if there are any attacking pirates in the room */
            var $total-in-room = count( $dwarf-set/dwarf[ position() != $pirate ][ room == $new-loc ] );
            
            if( $total-in-room > 0 ) {
                if( $total-in-room > 1 ) {
                    var $message = "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                                   "There are " _ $total-in-room _ " threatening little dwarves in the room with you!\n" _
                                   "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
                    expr adv:write-raw-message( $message );
                }
                else {
                    expr adv:write-message( 4 ); /* There is a threatening little dwarf... */
                }
                
                var $attack-count = count( $dwarf-set/attack ); 
                if( $attack-count > 0 ) {
                    var $dflag-last = adv:get-misc-value(  $misc-id-dflag );
                    
                    if( $dflag-last == 2 ) {
                        expr adv:set-misc-value( $misc-id-dflag, $dflag-last + 1 );
                    }
                    
                    if( $attack-count > 1 ) {
                        var $attack-message = "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                                              $attack-count _ " of them throw knives at you!!\n" _
                                              "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
                        expr adv:write-raw-message( $attack-message );
                    }
                    else {
                        expr adv:write-message( 5 ); /* One knife is thrown at you... */
                    }
                    
                    var $hit-count = count( $dwarf-set/hit );
                    if( $hit-count == 0 ) {
                        if( $attack-count > 1 ) {
                            expr adv:write-message( 6 ); /* They all missed */ 
                        }
                        else {
                            expr adv:write-message( 52 ); /* It missed */
                        }
                    }
                    /* If even one hits you, you are dead */
                    else if( $hit-count == 1 ) {
                        if( $attack-count > 1 ) {
                            expr adv:write-message( 7 ); /* One got you */ 
                        }
                        else {
                            expr adv:write-message( 53 ); /* It got you */
                        }
                        expr adv:set-misc-value(  $misc-id-old-room2,  $new-loc );
                        expr adv:death();
                    }
                    else {
                        var $hit-message = "!!!!!!!!!!!!!!!!!!!!\n" _
                                           $hit-count _ " of them get you!!!\n" _
                                           "!!!!!!!!!!!!!!!!!!!!";
                        expr adv:write-raw-message( $hit-message );
                        expr adv:set-misc-value(  $misc-id-old-room2,  $new-loc );
                        expr adv:death();
                    }
                }
            }
        }
    }
}

/* 
 * adv:death - Called upon character death.  The game can be restarted a couple
 * times with the character starting in the building and leaving everything
 * except the lamp in the room where they died.
 */
<func:function name="adv:death"> {
    
    var $closing = adv:get-misc-value(  $misc-id-closing );
        
    if( not( $closing )  ) {
        var $numdie = adv:get-misc-value(  $misc-id-numdie );
        var $yes = {
            if( $maxdie >= $numdie + 1 ) {
                /* Return as number so it can convert back to boolean correctly */
                expr number( adv:yes( 81 + ( $numdie * 2 ), 82 + ($numdie * 2 ), 54 ) );
            }
            else {
                expr 0;
            }
        }
        expr adv:increment-misc-value(  $misc-id-numdie );
        if( $numdie + 1 >= $maxdie || not( number( $yes ) ) ) {
            expr adv:normal-end();
        }
        else {

            /* Put them here because you can't be carrying them anymore... */
            expr adv:set-object-location( $water,  0 );
            expr adv:set-object-location( $oil,  0 );
            
            var $toting = adv:is-toting(  $lamp );
            if( $toting  ) {
                expr adv:set-object-status( $lamp,  0 );                
            }
            /* Grab here to minimize MIB usage */
            var $object-location-string = adv:get-string-by-id( $string-id-object-location );
            var $oldloc2 = adv:get-misc-value(  $misc-id-old-room2 );

            for-each( $database/objects/object ) {
                if( adv:is-toting( number, $object-location-string ) ) {
                    if( number == $lamp ) {
                        expr adv:drop-object(  number,  1 );
                    }
                    else {
                        expr adv:drop-object(  number, $oldloc2 );
                    }
                }
            }
            var $loc = adv:get-misc-value(  $misc-id-room ); 
            expr adv:set-misc-value(  $misc-id-new-room,  3 );
            expr adv:set-misc-value(  $misc-id-old-room,  $loc );
        }
    }
    else {
    
        /* no resurrection when closing */
        expr adv:write-message(  131 );
        expr adv:increment-misc-value(  $misc-id-numdie );
        expr adv:normal-end();
    }
}

/*
 * adv:yes - Displays a message and a prompt for input.  Provides optional messages
 * to a yes or no response.
 *
 * Arguments:
 *     $message-id - [Optional] number referring to a message from the database
 *     $yes-response-id - [Optional] message number to show for yes response
 *     $no-response-id - [Optional] message number to show for no response
 *
 * Returns: boolean - true if answer is answer, false otherwise
 */
<func:function name="adv:yes"> {
    param $message-id = 0;
    param $yes-response-id = 0;
    param $no-response-id = 0;

    /* Add space in front of leading newline due to PR 474440 */
    var $prompt = {
        if( $message-id > 0 ) {
            expr " \n" _ $database/messages/message[number == $message-id]/text; 
        }
        expr " \n--Answer [yes] or no...> ";
    }
    var $response-raw = jcs:get-input($prompt);
    var $response = adv:to-lower-case(  $response-raw );
    
    if( starts-with( $response, "no") ) {
        if( $no-response-id > 0 ) {
            expr adv:write-message(  $no-response-id );
        }
        <func:result select="false()">;
    }
    else {
        if( $yes-response-id > 0 ) {
            expr adv:write-message(  $yes-response-id );
        }
        <func:result select="true()">;
    }
}

/*
 * adv:is-dark - Determines if the current room is dark or not.
 * 
 * Arguments:
 *     $room - [Optional] - provide the room number to minimize MIB usage
 *     $object-location-string - [Optional] - data string from the MIB, minimizes
 *     MIB usage
 *     $object-status-string - [Optional] - data string from the MIB, minimizes
 *     MIB usage
 *
 *     Returns: boolean - true if dark, false otherwise
 */
<func:function name="adv:is-dark"> {
    param $room;
    param $object-location-string = ""; /* Pass these two to minimize MIB usage */
    param $object-status-string = "";

    var $loc = {
        if( string-length( $room ) == 0 ) {
            expr adv:get-misc-value(  $misc-id-room );
        }
        else {
            expr $room;
        }
    }
    
    var $lamp-status = adv:get-object-status(  $lamp, $object-status-string );
    
    var $lamp-here = adv:is-here(  $lamp,  $loc, $object-location-string );
    
    /* Some rooms have natural light */
    var $room-data = $database/rooms/room[number == $loc];

    /* Lamp status 0 is off */    
    if( not( $room-data/light ) && ( not( $lamp-here ) || $lamp-status == 0 ) ) {
        <func:result select="true()">;
    }
    else {
        <func:result select="false()">;
    }
}


/*
 * adv:is-here - Determines if item is at location or being toted.
 *
 * Arguments:
 *     $object-number - [Required] - Which object to check
 *     $room-number - [Optional] - Passed to minimize MIB usage
 *     $object-location-string - [Optional] - Data string from MIB, passed to
 *     minimize MIB usage
 *
 * Returns: boolean, true if here, false otherwise
 */
<func:function name="adv:is-here"> {
    param $object-number;
    param $room-number = -12345;
    param $object-location-string = ""; /* Can be loaded to minimize MIB usage */
    
    var $room = {
        if( $room-number == -12345 ) {
            expr adv:get-misc-value(  $misc-id-room );
        }
        else {
            expr $room-number;
        }
    }
    var $object-location = adv:get-object-location( $object-number, $object-location-string );
    
    var $toting = adv:is-toting( $object-number, $object-location-string );
    
    if( $object-location == $room || $toting ) {
        <func:result select = "true()">;
    }
    else {
        <func:result select = "false()">;
    }
}


/*
 * adv:is-toting - Determines if item is being carried or not.  Does not process
 * <fixed> objects because they can never be in the inventory.
 *
 * Arguments:
 *     $object-number - [Required] - Which object to check
 *     $object-location-string - [Optional] - Data string from MIB, passed to
 *     minimize MIB usage
 *
 * Returns: boolean, true if being carried, false otherwise
 */
<func:function name="adv:is-toting"> {
    param $object-number;
    param $object-location-string = ""; /* Pass to minimize MIB usage */

    var $object-location = adv:get-object-location( $object-number, $object-location-string );
    /* Location of -1 indicates it is in the inventory */
    if( $object-location == -1 ) {
        <func:result select="true()">;
    }
    else {
        <func:result select="false()">;
    }
}


/*
 * adv:carry-object - Adds object to inventory, increments holding value
 *
 * Arguments:
 *     $object-number - [Required] - Which object to check
 *
 */
<func:function name="adv:carry-object"> {
    param $object-number;

    var $location = adv:get-object-location( $object-number );
    
    /* If -1 then it is already being carried */
    if( $location != -1 ) {
        expr adv:set-object-location( $object-number,  -1 );
        expr adv:increment-misc-value(  $misc-id-holding ); 
    }
}


/*
 * adv:drop-object - Drops object into a particular room.  Used for items in the
 * inventory as well as just to move items into a different room.
 *
 * Arguments:
 *     $object-number - [Required] - Which object to check
 *     $room-number - [Required] - Room to place object
 *
 */
<func:function name="adv:drop-object"> {
    param $object-number;
    param $room-number;

    if( string-length( $room-number ) == 0 ) {
        expr jcs:output( "Error : Trying to drop object ", $object-number, "nowhere!" );
    }
    
    expr adv:write-debug-message("adv:drop-object", "Dropping ", $object-number, " at ", $room-number );
    
    var $location = adv:get-object-location( $object-number );

    /* Only decrement holding when it comes from our inventory */
    if( $location == -1 ) { 
        expr adv:increment-misc-value(  $misc-id-holding,  -1 ); 
        
        expr adv:write-debug-message("adv:drop-object", "Decrementing holding");
    }        
    expr adv:set-object-location( $object-number, $room-number );
}


/*
 * adv:process-object - Called by the turn() function.  Verifies that object is
 * present and causes it to be processed.  Handles a few special situations.
 *
 * Arguments:
 *     $misc-string - [Required] - The data string from the MIB
 *
 */
<func:function name="adv:process-object"> {
    param $misc-string;
    
    var $misc-set = jcs:split( ",", $misc-string );
    
    var $room = $misc-set[ number( $misc-id-room ) ];
    var $verb = $misc-set[ number( $misc-id-verb ) ];
    var $object = $misc-set[ number( $misc-id-object ) ];
    var $dflag = $misc-set[ number( $misc-id-dflag ) ];
    var $knife-room = $misc-set[ number( $misc-id-knfloc ) ];

    var $object-at = adv:is-at(  $object,  $room );
    var $object-here = adv:is-here(  $object,  $room );
    var $dwarf-here = adv:is-dwarf-here( $room);
    var $bottle-liquid = adv:get-liquid-in-bottle();
    var $room-liquid = adv:get-liquid-in-room( $room);
    var $bottle-here = adv:is-here(  $bottle,  $room );
    var $at-plant-top = adv:is-at(  $plant-top, $room );
    var $plant-top-status = adv:get-object-status( $plant-top );
    var $rod2-here = adv:is-here(  $rod2,  $room );
    
    /* Special check for the repository dynamite */
    if( $object == $rod && $rod2-here && $room == 115 ) {
        expr adv:set-misc-value(  $misc-id-object,  $rod2 );
        var $new-misc-string = adv:get-string-by-id( $string-id-misc );
        expr adv:transitive-object( $new-misc-string );
    }
    /* If the object is here or at then transitive? */
    else if( $object-at || $object-here ) {
        expr adv:transitive-object( $misc-string );
    }
    /* Handle a destination of grate */
    else if( $object == $grate ) {
        if( $room == 1 || $room == 4 || $room == 7 ) {
            expr adv:set-misc-value(  $misc-id-motion,  $depression );
            var $new-misc-string = adv:get-string-by-id( $string-id-misc );
            expr adv:process-movement( $new-misc-string );
        }
        else if( $room > 9 && 15 > $room ) {
            expr adv:set-misc-value(  $misc-id-motion,  $entrance );
            var $new-misc-string = adv:get-string-by-id( $string-id-misc );
            expr adv:process-movement( $new-misc-string );
        }
    }
    /* Dwarves... */
    else if( $dwarf-here  && $dflag >= 2 ) {
        expr adv:set-misc-value(  $misc-id-object,  $dwarf );
        var $new-misc-string = adv:get-string-by-id( $string-id-misc );
        expr adv:transitive-object( $new-misc-string );
    }
    /* Trying to use a liquid? */
    else if(( $bottle-liquid == $object && $bottle-here && $bottle-liquid != $nothing  ) || ( $room-liquid == $object && $room-liquid != $nothing ) ) {
        expr adv:transitive-object($misc-string);
    }
    else if( $object == $plant && $at-plant-top  && $plant-top-status == 0 ) {
        expr adv:set-misc-value(  $misc-id-object,  $plant-top );
        var $new-misc-string = adv:get-string-by-id( $string-id-misc );
        expr adv:transitive-object( $new-misc-string );
    }
    /* Knife? */
    else if( $object == $knife && $knife-room == $room ) {
        expr adv:write-message(  116 );
        expr adv:set-misc-value(  $misc-id-knfloc,  -1 );
    }
    /* Dynamite? */
    else if( $object == $rod && $rod2-here  ) {
        expr adv:set-misc-value(  $misc-id-object,  $rod2 );
        var $new-misc-string = adv:get-string-by-id( $string-id-misc );
        expr adv:transitive-object( $new-misc-string );
    }
    /* MIB */
    else if( $object == $mib && ( $verb == $throw || $verb == $read || $verb == $clear ) ) {
        expr adv:transitive-verb( $misc-string );
    }
    else {
        var $object-name = adv:get-object-name( $object );
        expr adv:write-raw-message( "I see no ", $object-name , " here." );
    }
}


/*
 * adv:transitive-object - Verifies that a verb is specified, complains otherwise,
 * calls the adv:transitive-verb function to perform the command.
 *
 * Arguments:
 *     $misc-string - [Required] - The data string from the MIB
 *
 */
<func:function name="adv:transitive-object"> {
    param $misc-string;
    
    var $verb = adv:get-misc-value( $misc-id-verb, $misc-string );
    
    if( $verb != 0 ) {
        expr adv:transitive-verb( $misc-string );
    }
    else {
        var $object = adv:get-misc-value(  $misc-id-object, $misc-string );
        var $object-name = adv:get-object-name($object );
        expr adv:write-raw-message(  "What do you want to do with the ", $object-name , "?" );
    }
}


/*
 * adv:transitive-verb - Performs the commands that contain both a verb and an
 * object
 *
 * Arguments:
 *     $misc-string - [Required] - The data string from the MIB
 *
 */
<func:function name="adv:transitive-verb"> {
    param $misc-string;
    
    var $misc-set = jcs:split( ",", $misc-string );
    
    var $room = $misc-set[ number( $misc-id-room ) ];
    var $verb = $misc-set[ number( $misc-id-verb ) ];
    var $object = $misc-set[ number( $misc-id-object ) ];
    
    expr adv:write-debug-message( "adv:transitive-verb", "Processing transitive verb ", $verb );

    /* Debug commands can only be used in debug mode */
    if( $database/vocabulary/word[verb][number==$verb]/debug-only && $mode != $debug ) {
        expr adv:write-verb-default-message( $verb );
    }
    /* All these verbs just have a default message displayed */
    else if( $verb == $calm || $verb == $walk || $verb == $quit || $verb == $score || $verb == $foo ||
        $verb == $brief || $verb == $suspend || $verb == $hours || $verb == $log || $verb == $restore ) {
        
        expr adv:write-verb-default-message( $verb );
    }
    else if( $verb == $take ) {
        expr adv:verb-take( $misc-string );
    }
    else if( $verb == $drop ) {
        expr adv:verb-drop( $misc-string );
    }
    else if( $verb == $open || $verb == $lock ) {
        expr adv:verb-open();
    }
    else if( $verb == $say ) {
        expr adv:verb-say();
    }
    else if( $verb == $nothing ) {
        expr adv:write-message( 54 );
    }
    else if( $verb == $on ) {
        expr adv:verb-on();
    }
    else if( $verb == $off ) {
        expr adv:verb-off();
    }
    else if( $verb == $wave ) {
        expr adv:verb-wave();
    }
    else if( $verb == $clear ) {
        expr adv:verb-clear();
    }
    else if( $verb == $kill ) {
        expr adv:verb-kill();
    }
    else if( $verb == $pour ) {
        expr adv:verb-pour();
    }
    else if( $verb == $eat ) {
        expr adv:verb-eat();
    }
    else if( $verb == $drink ) {
        expr adv:verb-drink();
    }
    else if( $verb == $rub ) {
        if( $object != $lamp ) {
            expr adv:write-message( 76 );
        }
        else {
            expr adv:write-verb-default-message(  $verb );
        }
    }
    else if( $verb == $throw ) {
        expr adv:verb-throw();
    }
    else if( $verb == $feed ) {
        expr adv:verb-feed();
    }
    else if( $verb == $find || $verb == $inventory ) {
        expr adv:verb-find();
    }
    else if( $verb == $fill ) {
        expr adv:verb-fill();
    }
    else if( $verb == $read ) {
        expr adv:verb-read();
    }
    else if( $verb == $blast ) {
        expr adv:verb-blast();
    }
    else if( $verb == $break ) {
        expr adv:verb-break();
    }
    else if( $verb == $wake ) {
        expr adv:verb-wake();
    }
    else if( $verb == $set-room ) {
        expr adv:set-room();
    }
    else if( $verb == $set-tally ) {
        expr adv:set-tally();
    }
    else if( $verb == $set-clock ) {
        expr adv:set-clock();
    }
    else if( $verb == $set-clock2 ) {
        expr adv:set-clock2();
    }
    else if( $verb == $set-limit ) {
        expr adv:set-limit();
    }
    else if( $verb == $set-dead ) {
        expr adv:set-dead();
    }
    else {
        expr adv:write-raw-message( "That verb is not implemented: ", $verb );
    }
}


/*
 * adv:intransitive-verb - Performs the commands that contain only a verb and the
 * object has to be guessed.
 *
 * Arguments:
 *     $misc-string - [Required] - The data string from the MIB
 *
 */
<func:function name="adv:intransitive-verb"> {
    param $misc-string;
    
    var $misc-set = jcs:split( ",", $misc-string );

    var $verb = $misc-set[ number( $misc-id-verb ) ];
    
    if( $verb == $drop || $verb == $say || $verb == $wave || $verb == $calm || $verb == $rub ||
        $verb == $throw || $verb == $find || $verb == $feed || $verb == $break || $verb == $wake || $verb == $pour ) {
        
        expr adv:write-need-object();
    }
    else if( $verb == $take ) {
        expr adv:iverb-take();
    }
    else if( $verb == $open || $verb == $lock ) {
        expr adv:iverb-open();
    }
    else if( $verb == $read ) {
        expr adv:iverb-read();
    }
    else if( $verb == $nothing ) {
        expr adv:write-message(  54 );
    }
    else if( $verb == $on || $verb == $off || $verb == $pour ) {
        expr adv:transitive-verb();
    }
    else if( $verb == $walk ) {
        expr adv:write-verb-default-message(  $verb );
    }
    else if( $verb == $kill ) {
        expr adv:iverb-kill();
    }
    else if( $verb == $eat ) { 
        expr adv:iverb-eat();
    }
    else if( $verb == $drink ) {
        expr adv:iverb-drink();
    }
    else if( $verb == $quit ) {
        expr adv:iverb-quit();
    }
    else if( $verb == $fill ) {
        expr adv:iverb-fill();
    }
    else if( $verb == $blast ) {
        expr adv:verb-blast();
    }
    else if( $verb == $score ) {
        expr adv:score();
    }
    else if( $verb == $foo ) {
        expr adv:iverb-foo();
    }
    else if( $verb == $restore ) {
        expr adv:iverb-restore();
    }
    else if( $verb == $suspend ) {
        expr adv:write-raw-message( "Game is saved automatically - just don't reboot or it will be lost!" );
    }
    else if( $verb == $inventory ) {
        expr adv:show-inventory();
    }
    else {
        expr adv:write-raw-message(  "This intransitive verb is not implemented." );
    }
}


/*
 * adv:set-room - Debug-only command.  Changes the room to the specified value.
 */
<func:function name="adv:set-room"> {
    
    /* Get the object, that is the new room */
    var $object = adv:get-misc-value( $misc-id-object );
    
    if( string( number( $object ) ) == "NaN" ) {
        expr jcs:output("ERROR: Trying to set room to NaN" );
    }
    else {
        /* Change the room */
        expr adv:set-misc-value( $misc-id-new-room, number( $object ) );
    
        /* Display message */
        expr adv:write-raw-message( "A blinding light appears and..." );
    
        expr adv:write-debug-message( "adv:set-room", "Changing to room ", number( $object ) );
    
        /* Turn will now describe the new room */
    }
}


/*
 * adv:set-tally - Debug-only command.  Changes the tally to the specified value.
 */
<func:function name="adv:set-tally"> {
    
    /* Get the object, that is the new tally */
    var $object = adv:get-misc-value( $misc-id-object );
    
    if( string( number( $object ) ) == "NaN" ) {
        expr jcs:output("ERROR: Trying to set tally to NaN" );
    }
    else {
        /* Change the tally */
        expr adv:set-misc-value( $misc-id-tally, number( $object ) );
    
        /* Display message */
        expr adv:write-raw-message( "Done" );
    
        /* Turn will now describe the new room */
    }
}


/*
 * adv:set-limit - Debug-only command.  Changes the limit to the specified value.
 */
<func:function name="adv:set-limit"> {
    
    /* Get the object, that is the new limit */
    var $object = adv:get-misc-value( $misc-id-object );
    
    if( string( number( $object ) ) == "NaN" ) {
        expr jcs:output("ERROR: Trying to set limit to NaN" );
    }
    else {
        /* Change the tally */
        expr adv:set-misc-value( $misc-id-limit, number( $object ) );
    
        /* Display message */
        expr adv:write-raw-message( "Done" );
    
        /* Turn will now describe the new room */
    }
}


/*
 * adv:set-clock - Debug-only command.  Changes the clock to the specified value.
 */
<func:function name="adv:set-clock"> {
    
    /* Get the object, that is the new clock */
    var $object = adv:get-misc-value( $misc-id-object );
    
    if( string( number( $object ) ) == "NaN" ) {
        expr jcs:output("ERROR: Trying to set clock to NaN" );
    }
    else {
        /* Change the clock */
        expr adv:set-misc-value( $misc-id-clock, number( $object ) );
    
        /* Display message */
        expr adv:write-raw-message( "Done" );
    
        /* Turn will now describe the new room */
    }
}


/*
 * adv:set-clock2 - Debug-only command.  Changes the clock2 to the specified value.
 */
<func:function name="adv:set-clock2"> {
    
    /* Get the object, that is the new clock2 */
    var $object = adv:get-misc-value( $misc-id-object );
    
    if( string( number( $object ) ) == "NaN" ) {
        expr jcs:output("ERROR: Trying to set tally to NaN" );
    }
    else {
        /* Change the clock2 */
        expr adv:set-misc-value( $misc-id-clock2, number( $object ) );
    
        /* Display message */
        expr adv:write-raw-message( "Done" );
    
        /* Turn will now describe the new room */
    }
}


/*
 * adv:set-dead - Debug-only command.  Causes immediate death.
 */
<func:function name="adv:set-dead"> {
    
    /* Display message */
    expr adv:write-raw-message( "Good bye..." );

    expr adv:set-misc-value(  $misc-id-old-room2,  adv:get-misc-value( $misc-id-room ) );
    expr adv:death();
    
    /* Turn will now describe the new room */
}

 
/*
 * adv:iverb-restore - Copies the previous game data over the current game data.
 */
<func:function name="adv:iverb-restore"> {

    /* Verify that there is a game available */
    var $string = adv:read-string( adv:build-instance-name( $string-id-misc, $past ) );
    if( string-length( $string ) == 0 ) {
        /* There is no game */
        expr adv:write-raw-message("Sorry, you do not have a saved game to load.");
    }
    else {
        var $yes-result = adv:yes( 202, 203, 204 );
        if( $yes-result ) {
            
            /* First re-init the game to make sure all variables are set to their default values */
            expr adv:init-game();
            
            /* Now load all the strings and write over their existing indexed values, do by index so that new
               variables will remain set to their default value. */
            
            var $object-location = adv:get-string-by-id( $string-id-object-location, $past );
            var $object-location-set = jcs:split( ",", $object-location );
            for-each( $object-location-set ) {
                expr adv:set-object-location( position(), . );
            }
            
            var $object-status = adv:get-string-by-id( $string-id-object-status, $past );
            var $object-status-set = jcs:split( ",", $object-status );
            for-each( $object-status-set ) {
                expr adv:set-object-status( position(), . );
            }
            
            var $misc = adv:get-string-by-id( $string-id-misc, $past );
            var $misc-set = jcs:split( ",", $misc );
            for-each( $misc-set ) {
                expr adv:set-misc-value( position(), . );
            }
            /* Fix the gave up value, otherwise it would be impossible to get a 100% score */
            expr adv:set-misc-value( $misc-id-gaveup, false() );
            /* Fix the memory warnings */
            expr adv:set-misc-value( $misc-id-mem-warn, 0 );
            
            var $visited = adv:get-string-by-id( $string-id-visited, $past );
            var $visited-set = jcs:split(",", $visited );
            for-each( $visited-set ) {
                var $value = .;
                var $high-set = boolean( floor( $value div 10 ) );
                var $low-set = boolean( number( $value mod 10 )  );
                expr adv:set-visited-room( position(), $low-set );
                expr adv:set-visited-room( position() + 70, $high-set );
            }
            
            var $dwarf-string = adv:get-string-by-id( $string-id-dwarves, $past );
            var $dwarf-set = jcs:split( ",", $dwarf-string );
            /* dwarf-room */
            for-each( $starting-values/dwarf-locations/dwarf ) {
                var $index = $dwarf-adjust-index/var[value == $id-dwarf-room]/adjust + position();
                var $value = $dwarf-set[ number( $index ) ];
                expr adv:set-dwarf-id-value( $id-dwarf-room, position(), $value );
            }
            /* dwarf-old-room */
            for-each( $starting-values/dwarf-locations/dwarf ) {
                var $index = $dwarf-adjust-index/var[value == $id-old-dwarf-room]/adjust + position();
                var $value = $dwarf-set[ number( $index ) ];
                expr adv:set-dwarf-id-value( $id-old-dwarf-room, position(), $value );
            }
            /* dwarf-seen */
            for-each( $starting-values/dwarf-locations/dwarf ) {
                var $index = $dwarf-adjust-index/var[value == $id-dwarf-seen]/adjust + position();
                var $value = $dwarf-set[ number( $index ) ];
                expr adv:set-dwarf-id-value( $id-dwarf-seen, position(), $value );
            }
            if( $mode == $debug ) {
                expr adv:write-debug-message( "adv:iverb-restore", "Prior string ", $dwarf-string );
                expr adv:write-debug-message( "adv:iverb-restre", "New string ", adv:get-string-by-id( $string-id-dwarves ) );
            }
            
            /* Now it should cycle back through turn using the new game values... */
        }
    }
}

 
/*
 * adv:write-need-object - Inform user that the command requires an object to go
 * along with it.
 */
<func:function name="adv:write-need-object"> {

    var $word1 = adv:get-misc-value(  $misc-id-word1 ); 
    var $word2 = adv:get-misc-value( $misc-id-word2 ); 
    var $word-type = adv:get-word-type(  $word1 );
    
    if( $word-type == $word-type-verb ) {
        expr adv:write-raw-message(  $word1 , " what?" );
    }
    else {
        expr adv:write-raw-message(  $word2 , " what?" );
    }
}


/*
 * adv:verb-open - Performs open command on an object
 */
<func:function name="adv:verb-open"> {

    var $object = adv:get-misc-value( $misc-id-object );
    var $room = adv:get-misc-value(  $misc-id-room );
    var $verb = adv:get-misc-value( $misc-id-verb );
    
    if( $object == $clam || $object == $oyster ) {
        var $oyclam = {
            if( $object == $oyster ) {
                expr 1;
            }
            else {
                expr 0;
            }
        }
        var $toting-trident = adv:is-toting(  $trident );
        var $toting-object = adv:is-toting(  $object );
        
        if( $verb == $lock ) {
            expr adv:write-message(  61 );
        }
        else if( not( $toting-trident ) ) {
            expr adv:write-message(  122 + $oyclam );
        }
        else if( $toting-object  ) {
            expr adv:write-message(  120 + $oyclam );
        }
        else {
            expr adv:destroy-object(  $clam );
            expr adv:drop-object(  $oyster,  $room );
            expr adv:drop-object(  $pearl,  105 );
            expr adv:write-message(  124 + $oyclam );
        }
    }
    else if( $object == $door ) {
        var  $door-status = adv:get-object-status(  $door );
        if( $door-status == 1 ) {
            expr adv:write-message(  54 );
        }
        else {
            expr adv:write-message(  111 );
        }
    }
    else if( $object == $cage ) {
        expr adv:write-message(  32 );
    }
    else if( $object == $keys ) {
        expr adv:write-message(  55 );
    }
    else if( $object == $chain ) {
        var $keys-here = adv:is-here(  $keys,  $room );
        
        if( not( $keys-here ) ) {
            expr adv:write-message(  31 );
        }
        else if( $verb == $lock ) {
            var $chain-status = adv:get-object-status(  $chain );
            if( $chain-status != 0 ) { /* hea on floor */
                expr adv:write-message(  34 );
            }
            else if( $room != 130 ) {
                expr adv:write-message(  173 );
            }
            else {
                expr adv:set-object-status(  $chain,  2 ); /* Chain status 2 is lock to wall without bear */
                var $toting-chain = adv:is-toting(  $chain );
                if( $toting-chain  ) {
                    expr adv:drop-object(  $chain, $room );
                }
                expr adv:write-message(  172 );
            }
        }
        else {
            var $bear-status = adv:get-object-status(  $bear );
            var $chain-status = adv:get-object-status(  $chain );
            if( $bear-status == 0 ) { /* Ferocious status */
                expr adv:write-message( 41 );
            }
            else if( $chain-status == 0 ) { /* Bear is already free */
                expr adv:write-message(  37 );
            }
            else {
                expr adv:set-object-status(  $chain,  0 ); /* heap on floor */
                if( $bear-status != 3 )  { /* Fell through the bridge */
                    expr adv:set-object-status(  $bear,  2 ); /* Contented looking bear... */
                }
                var $new-bear-status = adv:get-object-status( $bear );
                expr adv:write-message(  171 );
            }
        }
    }
    else if( $object == $grate ) {
        var $keys-here = adv:is-here( $keys, $room );
        var $closing = adv:get-misc-value(  $misc-id-closing );
        var $panic = adv:get-misc-value(  $misc-id-panic );
        
        if( not( $keys-here ) ) {
            expr adv:write-message(  31 );
        }
        else if( $closing  ) {
            if( $panic == 0 ) {
                expr adv:set-misc-value(  $misc-id-clock2,  15 );
                expr adv:increment-misc-value( $misc-id-panic );
            }
            expr adv:write-message(  130 );
        }
        else {
            var $grate-status = adv:get-object-status(  $grate );
            var $new-grate-status = {
                if( $verb == $lock ) {
                    expr 0;
                }
                else {
                    expr 1;
                }
            }
            expr adv:set-object-status(  $grate,  $new-grate-status );
            expr adv:write-message(  34 + $grate-status + ( 2 * $new-grate-status ) );
        }
    }
    else {
        expr adv:write-message(  33 );
    }
}


/*
 * adv:verb-say - Say something...
 */
<func:function name="adv:verb-say"> {

    var $word1 = adv:get-misc-value(  $misc-id-word1 ); 
    var $word2 = adv:get-misc-value( $misc-id-word2 ); 
    
    expr adv:write-raw-message(  "Okay.\n'" , $word2 , "'" );
    
}


/*
 * adv:verb-clear - Used to clear the SNMP Utility MIB
 *
 * Arguments:
 *     $misc-string - [Required] - data string from Utility MIB
 */
<func:function name="adv:verb-clear"> {
    param $misc-string;

    var $object = adv:get-misc-value( $misc-id-object, $misc-string );
    
    if( $object != $mib ) {
        expr adv:write-raw-message("Clear can only be used to clear the Utility MIB");
    }
    else {
        expr adv:write-raw-message("This will remove all Adventure related instances from the SNMP\n" ,
                                   "Utility MIB (anything that starts with AD!C# or AD!P#) and close\n" ,
                                   "your game.  Are you sure you want to do this?");
        var $yes = adv:yes();
        
        if( $yes ) {
            expr adv:write-raw-message("Clearing all Adventure Data from the Utility MIB");
            expr adv:clear-mib();
            
            /* Close the connection */
            expr jcs:close( $connection );
            <xsl:message terminate="yes"> "Not an error, but we are exiting after clearing all game data.";
        }
        else {
            expr adv:write-raw-message("Well that's a relief!");
        }
    }
}


/* 
 * adv:clear-mib - Clears all Adventure related information (AD!C#* and AD!P#*) 
 * from the Utility MIB
 */
<func:function name="adv:clear-mib"> {

    var $walk-rpc = {
        <walk-snmp-object> {
            <ascii>;
            <snmp-object-name> "jnxUtil";
        }
    }
    var $mib-objects = jcs:execute( $connection, $walk-rpc );
    
    /* Workaround for PR 468890 */
    var $quote-xml = <quote> "\"";
    var $quote = {
        if( string-length( $quote-xml ) == 2 ) {
            expr substring( $quote-xml, 2, 1 );
        }
        else {
            expr $quote-xml;
        }
    }
    
    /* Clear all Adventure data */
    var $current-string-start = "jnxUtilStringValue." _ $quote _ "AD!C#";
    var $past-string-start = "jnxUtilStringValue." _ $quote _ "AD!P#";
    for-each( $mib-objects/snmp-object[ starts-with( name, $current-string-start ) || starts-with( name, $past-string-start ) ] ) {

        var $clean-name = translate( name, $quote, "" );
        var $instance-name = substring-after( $clean-name, "." );
        expr jcs:output( "Clearing instance ", name );
        
        var $clear-rpc = {
            <request-snmp-utility-mib-clear> {
                <instance> $instance-name;
                <object-type> "string";
            }
        }
        var $results = jcs:execute( $connection, $clear-rpc );
        if( $results/..//xnm:error ) {
            for-each( $results/..//xnm:error ) {
                expr jcs:output( "Error: ", message );
            }
        }
    }
}

/*
 * adv:verb-take - Performs take command on an object
 *
 * Arguments:
 *     $misc-string - [Required] - data string from Utility MIB
 */
<func:function name="adv:verb-take"> {
    param $misc-string;
    
    var $room = adv:get-misc-value(  $misc-id-room, $misc-string );
    var $verb = adv:get-misc-value(  $misc-id-verb, $misc-string );
    var $object = adv:get-misc-value(  $misc-id-object, $misc-string );
    var $toting-object = adv:is-toting(  $object );
    
    expr adv:write-debug-message( "adv:verb-take", "Object = ", $object );
    
    if( $toting-object  ) {
        expr adv:write-verb-default-message( $verb );
    }
    else {
        var $chain-status = adv:get-object-status( $chain );
        if( $database/objects/object[number == $object]/fixed ) { /* fixed items don't budge, no way no how */
            expr adv:write-message( 25 ); /* You can't be serious... */
        }
        else if( $object == $vase && adv:get-object-status( $vase ) == 2 ) { /* Shattered */
            expr adv:write-message( 25 );
        }
        else if( $object == $plant  ) {
            var $plant-status = adv:get-object-status( $plant );
            if( $plant-status != -1 ) {
                expr adv:write-message( 115 ); /* -1 is in the storage room... */
            }
            else {
                expr adv:write-message( 25 ); /* You can't be serious... */
            }
        }
        else if( $object == $rug && adv:get-object-status( $rug ) != 0 ) { /* Can't take the rug from under the dragon! */
            expr adv:write-message( 25 );
        }
        else if( $object == $bear  ) {
            var $bear-status = adv:get-object-status( $bear );
            if( $bear-status == 3 ) {   /* Over the bridge? */
                expr adv:write-message( 25 ); /* "You can't be serious..." */
            }
            else if( $bear-status != 2 ) {   /* Bear status of 2 is free */
                expr adv:write-message( 169 );
            }
            else {
               /* Carry the bear... */
               expr adv:carry-object( $object );
                        
               /* Final message if they got this far... */
               expr adv:write-raw-message( "OK, the bear is following you." );
            }
        }
        else if( $object == $satyr ) {
            expr adv:write-raw-message( "Good luck catching him, he dances too fast!" );
        }
        else if( $object == $chain && $chain-status != 0 ) { 
            expr adv:write-message(  170 );             /* Chain status of 0 is unlocked on ground */
        }
        else {
            /* Use scratch-t to indicate if we should go on, 1 = no */
            expr adv:set-misc-value(  $misc-id-scratch-t,  0 );

            if( $object == $water || $object == $oil ) {
                var $bottle-here = adv:is-here(  $bottle,  $room );
                var $bottle-liquid = adv:get-liquid-in-bottle();
                var $toting-bottle = adv:is-toting( $bottle );
                var $bottle-status = adv:get-object-status( $bottle );
                
                
                if( not( $bottle-here ) || $bottle-liquid != $object ) {
                    expr adv:set-misc-value(  $misc-id-object,  $bottle );
                    if( $toting-bottle  && $bottle-status == 1 ) {
                        /* Fill it instead... */
                        expr adv:verb-fill();
                    }
                    else {
                        if( $toting-bottle  ) {
                            expr adv:write-message(  104 );
                        }
                        else if( $bottle-status != 1 ) {
                            expr adv:write-message(  105 );
                        }
                        else {
                            expr adv:write-message(  25 );
                        }
                    }
                    /* We should not go on...*/
                    expr adv:set-misc-value(  $misc-id-scratch-t,  1 );
                }
                /* They can pick up the bottle by referencing its contents */
                else if( $bottle-here && $bottle-liquid == $object && not( $toting-bottle ) ) {
                    expr adv:set-object-location( $bottle, -1 );
                    expr adv:set-misc-value(  $misc-id-object,  $bottle );
                }
                else {
                    expr adv:set-misc-value(  $misc-id-object,  $bottle );
                }
                /* The liquid is assigned to the inventory at the end of the function */ 
            }
            /* See if we should go on... */
            var $t1 = adv:get-misc-value(  $misc-id-scratch-t );
            if( $t1 == 0 ) {
                var $holding = adv:get-misc-value(  $misc-id-holding, $misc-string );
                
                if( $holding >= 7 ) {
                    expr adv:write-message(  92 );
                }
                else { /* Go on... */
                
                    var $bird-status = adv:get-object-status( $bird );
                
                    if( $object == $bird && $bird-status == 0 ) {
                        var $toting-rod = adv:is-toting(  $rod );
                        var $toting-cage = adv:is-toting(  $cage );
                    
                        if( $toting-rod  ) {
                            expr adv:write-message( 26 );
                            expr adv:set-misc-value(  $misc-id-scratch-t,  1 );
                        }
                        else if( not( $toting-cage ) ) {
                            expr adv:write-message( 27 );
                            expr adv:set-misc-value( $misc-id-scratch-t, 1 );
                        }
                        else {
                            expr adv:set-object-status( $bird, 1 );
                        }
                    }
                
                    /* Check if we should go on... */
                    var $t2 = adv:get-misc-value(  $misc-id-scratch-t );
                    if( $t2 == 0 ) {

                        /* If we pick up the bird and it is in the cage then pick up the cage too */
                        var $new-bird-status = adv:get-object-status( $bird );
                        if( $new-bird-status != 0 && $object == $bird && not( adv:is-toting( $cage ) ) && adv:is-here( $cage ) ) {
                            expr adv:carry-object( $cage  );
                        }
                        /* If we pick up the cage and the bird is in it then pick up the cage too */
                        else if( $new-bird-status != 0 && $object == $cage && not( adv:is-toting( $bird ) ) && adv:is-here( $bird ) ) {
                            expr adv:carry-object( $bird  );
                        }

                        /* Carry whatever we were asking to carry */
                        expr adv:carry-object( $object  );
                        
                        var $new-object = adv:get-misc-value(  $misc-id-object );
                        var $new-liquid-in-bottle = adv:get-liquid-in-bottle();
                        if( $new-object == $bottle && $new-liquid-in-bottle != $nothing ) {
                            expr adv:set-object-location( $new-liquid-in-bottle, -1 );
                        }
                        
                        /* Final message if they got this far... */
                        expr adv:write-raw-message( "OK, you've taken it." );
                    }
                }
            }
        }
    }
}


/*
 * adv:timer-events - Certain events should happen based on the game time.  For 
 * example, the lamp should go out, or the cave should start closing.
 *
 * Arguments:
 *     $room - [Required] - The current room number
 */
<func:function name = "adv:timer-events"> {
    param $room;

    /* Gather the data sets to minimize MIB usage */
    var $misc-string = adv:get-string-by-id( $string-id-misc );
    var $misc-set = jcs:split( ",", $misc-string );
    var $object-location-string = adv:get-string-by-id( $string-id-object-location );
    var $object-status-string = adv:get-string-by-id( $string-id-object-status );
    
    /* If foobar is needed after this point, use the variable, the $misc-set isn't accurate anymore */
    var $foobar = {
        var $foobar-temp = $misc-set[ number(  $misc-id-foobar ) ];
        /* Change value in MIB - so it is no longer valid in the $misc-set */
        if( $foobar-temp > 0 ) {
            expr adv:set-misc-value( $misc-id-foobar, - $foobar-temp );
            expr - $foobar-temp;
        }
        else {
            expr adv:set-misc-value( $misc-id-foobar, 0 );
            expr 0;
        }
    }
    
    /* Tally tracks if all the treasures have been seen */
    var $tally = $misc-set[ number(  $misc-id-tally ) ];

    /* After this point, clock isn't accurate in $misc-set, use the variable */
    var $clock = {
        var $clock-temp = $misc-set[ number( $misc-id-clock ) ];
        
        if( 0 >= $tally  && $room >= 15 && $room != 33 && $clock-temp > 0 ) {
            expr adv:set-misc-value( $misc-id-clock, $clock-temp - 1 );
            expr $clock-temp - 1;
        }
        else {
            expr $clock-temp;
        }
    }
    
    expr adv:write-debug-message( "adv:timer-events", "Clock ", $clock );

    /* 
     * Clock counts down from when tally hit 0, it gives you a final chance to
     * place treasures in the building.
     */
    if( $clock == 0 ) {
    
        /* start closing */
        expr adv:set-object-status( $grate, 0 );
        expr adv:set-object-status( $fissure, 0 );
        for-each( $starting-values/dwarf-locations/dwarf ) {
            /* Retire the dwarves */
            expr adv:set-dwarf-id-value( $id-dwarf-seen, position(), 0 );
            expr adv:set-dwarf-id-value( $id-dwarf-room, position(), 0 );
            expr adv:set-dwarf-id-value( $id-old-dwarf-room, position(), 0 );
        }
        expr adv:drop-object( $troll, 0 );
        expr adv:drop-object( $troll-hidden, 117 );
    
        var $bear-status = adv:get-object-status( $bear );
    
        if( $bear-status != 3 ) {        /* 3 = dead under bridge */
            expr adv:destroy-object(  $bear );
        }
        expr adv:set-object-status( $chain, 0 );
        expr adv:set-object-status( $axe, 0 );
    
        expr adv:write-message(  129 ); /* Cave closing soon */
        expr adv:set-misc-value(  $misc-id-clock,  -1 );
        expr adv:set-misc-value(  $misc-id-closing,  1 );
        
        <func:result select="false()">; /* return 0 */
    }
    else {
    
        /* After this point, clock2 in the $misc-set isn't accurate, use the variable instead */
        var $clock2 = {
            var $clock2-temp = $misc-set[ number( $misc-id-clock2 ) ];
            
            if( 0 > $clock2-temp ) {
                expr $clock2-temp;
            }
            else if( 0 > $clock ) {
                expr adv:set-misc-value(  $misc-id-clock2,  $clock2-temp - 1 );
                expr $clock2-temp - 1;
            }
            else {
                expr $clock2-temp;
            }
        }
        
        expr adv:write-debug-message( "adv:timer-events", "Clock2 ", $clock2 );

        /*
         * Clock2 counts down from after the cave starts closing until the end
         * game starts.
         */
        if( $clock2 == 0 ) {
        
            /* set up storage room and close the cave... */
            expr adv:drop-object( $bottle,  115 );
            expr adv:set-object-status( $bottle, 1 ); /* Empty */
            expr adv:drop-object( $oyster, 115 );
            
            /* Set to -1 so turn() function shows a special message */
            expr adv:set-object-status( $oyster, -1 ); 
            expr adv:drop-object( $lamp, 115 );
            expr adv:set-object-status( $lamp, 0 );
            expr adv:drop-object( $rod, 115 );
            expr adv:set-object-status( $rod, 0 );
            /* So that we can try to kill or wake a dwarf - and then die */
            expr adv:drop-object( $dwarf, 115 ); 
        
            expr adv:set-misc-value( $misc-id-room, 115 );
            expr adv:set-misc-value( $misc-id-old-room, 115 );
            expr adv:set-misc-value( $misc-id-new-room, 115 );
    
            expr adv:drop-object( $grate, 116 );
            expr adv:set-object-status( $grate, 0 );
            expr adv:drop-object( $snake, 116 );
            expr adv:set-object-status( $snake, -1 ); /* Only show the name */
            expr adv:drop-object( $bird, 116 );
            expr adv:set-object-status( $bird, 0 ); /* Show the default */
            expr adv:drop-object( $cage, 116 );
            expr adv:set-object-status( $cage, 0 ); /* Default */
            expr adv:drop-object( $rod2, 116 );
            expr adv:set-object-status( $rod2, 0 );
            expr adv:drop-object( $pillow, 116 );
            expr adv:drop-object( $mirror, 115 );

            for-each( $database/objects/object ) {
                var $toting-object = adv:is-toting(  number );
                if( $toting-object  ) {
                    expr adv:destroy-object( number );
                }
            }
            
            expr adv:write-message(  132 );
            expr adv:set-misc-value( $misc-id-closed, 1 );
            
            <func:result select="true()">; /* return 1 */
        }
        else {
        
            var $lamp-status = adv:get-object-status( $lamp, $object-status-string );
            
            /* After this point limit isn't accurate in $misc-set, use $limit instead */
            var $limit = {
                var $limit-temp = $misc-set[ number( $misc-id-limit ) ];
                if( $lamp-status == 1 ) {
                    expr adv:set-misc-value( $misc-id-limit, $limit-temp - 1 );
                    expr $limit-temp - 1;
                }
                else {
                    expr $limit-temp;
                }
            }
            
            expr adv:write-debug-message( "adv:timer-events", "Limit = ", $limit );
            
            var $toting-batteries = adv:is-toting(  $batteries, $object-location-string );
            var $batteries-status = adv:get-object-status( $batteries, $object-status-string );
            var $lamp-here = adv:is-here(  $lamp,  $room, $object-location-string );
            
            if( 30 >= $limit && $toting-batteries && $batteries-status == 0 && $lamp-here  ) {
                expr adv:write-message(  188 ); /* Lamp is getting dim, I'm replacing the batteries */
                expr adv:set-object-status( $batteries, 1 ); /* Used up */
                expr adv:drop-object( $batteries, $room );
                expr adv:set-misc-value( $misc-id-limit, $limit + 2500 );
                expr adv:set-misc-value( $misc-id-lmwarn, 0 );
                
                <func:result select="false()">; /* return 0 */
            }
            else {
            
                if( $limit == 0 ) {
                    expr adv:set-misc-value( $misc-id-limit, -1 );
                    expr adv:set-object-status( $lamp, 0 );
                    if( $lamp-here  ) {
                        expr adv:write-message(  184 ); /* Lamp is out of power */
                    }
                    <func:result select="false()">; /* return 0 */
                }
                else {
                
                    if( 0 > $limit && 8 >= $room ) {
                        /* No point in wandering around with no lamp */
                        expr adv:write-message(  185 ); 
                        expr adv:set-misc-value( $misc-id-gaveup, 1 );
                        expr adv:normal-end();
                    }
                    else {
                    
                        if( 30 >= $limit ) {
                        
                            var $lmwarn = $misc-set[ number( $misc-id-lmwarn ) ];
                            
                            if( $lmwarn == 0 && $lamp-here ) {
                                expr adv:set-misc-value( $misc-id-lmwarn, 1 );
                                if( $batteries-status == 1 ) { /* Used up */
                                    /* Lamp is getting dim, out of batteries */
                                    expr adv:write-message(  189 ); 
                                }
                                /* Batteries available */
                                else if( $batteries-status == 0 ) { 
                                    /* Lamp is getting dim, find some batteries */
                                    expr adv:write-message(  183 ); 
                                }
                                else {
                                    /* Lamp is getting dim, out of batteries */
                                    expr adv:write-message(  189 ); 
                                }
                            }
                        }
                        <func:result select="false()">; /* return 0 */
                    }
                }
            }
        }
    }
}


/*
 * adv:verb-on - Performs the on command to a designated object
 */
<func:function name="adv:verb-on"> {

    var $room = adv:get-misc-value(  $misc-id-room );
    var $lamp-here = adv:is-here( $lamp );
    var $verb = adv:get-misc-value(  $misc-id-verb );
    var $limit = adv:get-misc-value(  $misc-id-limit );
    
    if( not( $lamp-here ) ) {
        expr adv:write-verb-default-message( $verb );
    }
    else if( 0 > $limit ) {
        expr adv:write-message(  184 );
    }
    else {
        expr adv:set-object-status( $lamp, 1 );
        expr adv:write-message(  39 );
        var $wzdark = adv:get-misc-value(  $misc-id-wzdark );
        if( $wzdark != 0 ) {
            expr adv:set-misc-value( $misc-id-wzdark, 0 );
        }
    }
}


/*
 * adv:verb-off - Performs the off command to a designated object
 */
<func:function name="adv:verb-off"> {

    var $room = adv:get-misc-value(  $misc-id-room );
    var $lamp-here = adv:is-here(  $lamp );
    var $verb = adv:get-misc-value(  $misc-id-verb );
    
    if( not( $lamp-here ) ) {
        expr adv:write-verb-default-message( $verb );
    }
    else {
        expr adv:set-object-status( $lamp, 0 );
        expr adv:write-message(  40 );
    }
}


/*
 * adv:verb-pour - Performs the pour command to a designated object
 */
<func:function name="adv:verb-pour"> {

    var $object = adv:get-misc-value(  $misc-id-object );
    var $bottle-liquid = adv:get-liquid-in-bottle();
    var $room = adv:get-misc-value(  $misc-id-room );
    var $at-plant = adv:is-at(  $plant );
    var $at-door = adv:is-at(  $door );

    if( ( $object == $bottle || $object == 0 ) && $bottle-liquid == $nothing ) {
        /* nothing in the bottle... */    
        expr adv:write-need-object();
    }
    else {
    
        if( $object == $bottle || $object == 0 ) {
            expr adv:set-misc-value( $misc-id-object, $bottle-liquid );
        }
        var $new-object = adv:get-misc-value(  $misc-id-object ); 
        var $toting-object = adv:is-toting(  $new-object );
        var $verb = adv:get-misc-value(  $misc-id-verb ); 
        
        /* They aren't carrying the object they want to pour... */
        if( not( $toting-object ) ) {
            expr adv:write-verb-default-message( $verb );
        }
        /* You can't pour that! */
        else if( $new-object != $oil && $new-object != water ) {
            expr adv:write-message(  78 );
        }
        else {
            expr adv:set-object-status( $bottle, 1 );
            expr adv:set-object-location( $bottle-liquid, 0 );
            if( $at-plant  ) {
                if( $new-object != $water ) {
                    expr adv:write-message(  112 );
                }
                else {
                    var $plant-status = adv:get-object-status( $plant );
                    expr adv:write-object-message( $plant, $plant-status + 3 );
                    var $new-status = ($plant-status + 2) mod 6;
                    expr adv:set-object-status( $plant, $new-status );
                    expr adv:set-object-status( $plant-top, $new-status div 2 );
                }
            }
            else if( $at-door  ) {
                if( $new-object == $oil ) {
                    expr adv:set-object-status( $door, 1 );
                    expr adv:write-message(  114 ); 
                }
                else {
                    expr adv:set-object-status( $door, 0 );
                    expr adv:write-message(  113 ); 
                }
            }
            else {
                expr adv:write-message(  77 );
            }
        }
    }
}


/*
 * adv:iverb-open - Try to determine which object should be opened
 */
<func:function name="adv:iverb-open"> {

    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $at-door = adv:is-at(  $door,  $room );
    var $at-grate = adv:is-at( $grate,  $room );
    var $chain-here = adv:is-here(  $chain,  $room );
    var $clam-here = adv:is-here(  $clam,  $room );
    var $oyster-here = adv:is-here( $oyster,  $room );
    var $verb = adv:get-misc-value(  $misc-id-verb ); 
    
    if( $clam-here  ) {
        expr adv:set-misc-value( $misc-id-object, $clam );
    }
    if( $oyster-here ) {
        expr adv:set-misc-value( $misc-id-object, $oyster );
    }
    if( $at-door ) {
        expr adv:set-misc-value( $misc-id-object, $door );
    }
    if( $at-grate ) {
        expr adv:set-misc-value( $misc-id-object, $grate );
    }
    if( $chain-here  ) {
        var $object = adv:get-misc-value(  $misc-id-object ); 
        /* None should be selected yet... */
        if( $object != 0 ) {
            expr adv:write-need-object();
            /* Set object to -1 to indicate that it should be opened... */
            expr adv:set-misc-value( $misc-id-object, -1 );
        }
        else {
            expr adv:set-misc-value( $misc-id-object, $chain );
        }
    }
    var $object = adv:get-misc-value(  $misc-id-object ); 
    if( $object == 0 ) {
        expr adv:write-message(  28 );
    }
    /* -1 shows that more than one object was possible */
    else if( $object != -1 ) {
        expr adv:verb-open();
    }
}


/*
 * adv:iverb-take - Try to determine which object should be taken
 */
<func:function name="adv:iverb-take"> {

    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $dlag = adv:get-misc-value(  $misc-id-dflag ); 
    var $dwarf-here = adv:is-dwarf-here(  $room );

    /* Assemble the possible objects */
    var $objects := {
        for-each( $database/objects/object ) {
            var $location = adv:get-object-location( position);
            
            if( $location == $room ) {
                <object> position();
            }
        }
    }
    
    /* Only one allowed... */
    if( count( $objects/object ) != 1 || ( $dwarf-here  && $dflag >= 2 ) ) {
        expr adv:write-need-object();
    }
    else {
        expr adv:set-misc-value( $misc-id-object, $objects/object );
        expr adv:verb-take;
    }
}



/*
 * adv:verb-wave - Perform the wave command on an object
 */
<func:function name="adv:verb-wave"> {

    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $object = adv:get-misc-value( $misc-id-object ); 
    var $verb = adv:get-misc-value( $misc-id-verb ); 
    var $closing = adv:get-misc-value( $misc-id-closing ); 
    var $toting-object = adv:is-toting(  $object );
    var $toting-rod2 = adv:is-toting(  $rod2 );
    var $at-fissure = adv:is-at(  $fissure,  $room );
    
    if( not( $toting-object ) && ( $object != $rob || not( $toting-rod2 ) ) ) {
        expr adv:write-message(  29 );
    }
    else if( $object != $rod || not( $at-fissure ) || not( $toting-object ) || $closing != 0 ) {
        expr adv:write-verb-default-message( $verb );
    }
    else {
        var $fissure-status = adv:get-object-status( $fissure );
        expr adv:set-object-status( $fissure, 1 - $fissure-status );
        expr adv:write-object-message( $fissure, 4 - ( 1 - $fissure-status ) );
    }
}


/*
 * adv:iverb-fill - Figure out which object should be filled
 */
<func:function name="adv:iverb-fill"> {

    var $room = adv:get-misc-value( $misc-id-room ); 
    var $bottle-here = adv:is-here(  $bottle,  $room );
    
    if( not( $bottle-here ) ) {
        expr adv:write-need-object();
    }
    else {
        expr adv:set-misc-value( $misc-id-object, $bottle );
        expr adv:verb-fill();
    }
}


/*
 * adv:iverb-quit - Verify if they want to quit, end game if they do
 */
<func:function name="adv:iverb-quit"> {

    var $yes-answer = adv:yes( 22, 54, 54 );
    
    if( $yes-answer  ) {
        expr adv:set-misc-value( $misc-id-gaveup, 1 );
        expr adv:normal-end();
    }
    else {
        expr adv:set-misc-value( $misc-id-gaveup, 0 );
    }
}


/*
 * adv:verb-eat - Perform the eat command on an object
 */
<func:function name="adv:verb-eat"> {

    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $verb = adv:get-misc-value( $misc-id-verb ); 
    
    if( $object == $food ) {
        expr adv:destroy-object( $food );
        expr adv:write-message(  72 );
    }
    else if( $object == $bird || $object == $snake || $object == $clam || $object == $oyster ||
             $object == $dwarf || $object == $dragon || $object == $troll || $object == $bear ) {
         expr adv:write-message(  71 );
    }
    else {
        expr adv:write-verb-default-message( $verb );
    }
}


/*
 * adv:iverb-eat - Figure out what should be eaten
 */
<func:function name="adv:iverb-eat"> {

    var $room = adv:get-misc-value( $misc-id-room );
    var $food-here = adv:is-here(  $food,  $room );
    
    if( not( $food-here ) ) {
        expr adv:write-need-object();
    }
    else {
        expr adv:set-misc-value( $misc-id-object, $food );
        expr adv:verb-eat();
    }
}


/*
 * adv:verb-drink - Perform the drink command on an object
 */
<func:function name="adv:verb-drink"> {

    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $verb = adv:get-misc-value( $misc-id-verb ); 
    var $bottle-liquid = adv:get-liquid-in-bottle();
    var $room = adv:get-misc-value(  $misc-id-room );
    var $bottle-here = adv:is-here(  $bottle,  $room );
    
    if( $object != $water ) {
        expr adv:write-message(  110 );
    }
    else if( $bottle-liquid != $water || not( $bottle-here ) ) {
        expr adv:write-verb-default-message( $verb );
    }
    else {
        expr adv:set-object-status( $bottle, 1 );
        expr adv:set-object-location( $water, 0 );
        expr adv:write-message(  74 );
    }
}


/*
 * adv:iverb-drink - Figure out what should be drunk
 */
<func:function name="adv:iverb-drink"> {

    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $bottle-liquid = adv:get-liquid-in-bottle();
    var $room-liquid = adv:get-liquid-in-room( $room);
    var $bottle-here = adv:is-here(  $bottle,  $room );
    
    if( $room-liquid != $water && ( $bottle-liquid != $water || not( $bottle-here ) ) ) {
        expr adv:write-need-object();
    }
    else {
        expr adv:set-misc-value( $misc-id-object, $water );
        expr adv:verb-drink();
    }
}


/*
 * adv:iverb-kill - Figure out what should be attacked
 */
<func:function name="adv:iverb-kill"> {

    var $room = adv:get-misc-value(  $misc-id-room );
    var $dwarf-here = adv:is-dwarf-here( $room);
    var $dflag = adv:get-misc-value(  $misc-id-dflag );
    var $snake-here = adv:is-here(  $snake,  $room );
    var $at-dragon = adv:is-at(  $dragon,  $room );
    var $dragon-status = adv:get-object-status( $dragon );
    var $at-troll = adv:is-at(  $troll,  $room );
    var $bear-here = adv:is-here(  $bear,  $room );
    var $bear-status = adv:get-object-status( $bear );
    var $bird-here = adv:is-here(  $bird,  $room );
    var $clam-here = adv:is-here(  $clam,  $room );
    var $oyster-here = adv:is-here(  $oyster,  $room );
    var $verb = adv:get-misc-value(  $misc-id-verb );
    var $at-satyr = adv:is-at( $satyr, $room );
    

    /* Count the potential kill objects */
    var $count := {
        if( $dwarf-here  && $dflag >= 2 ) {
            expr adv:set-misc-value( $misc-id-object, $dwarf );
            <count>;
        }
        if( $snake-here ) {
            expr adv:set-misc-value( $misc-id-object, $snake );
            <count>;
        }
        if( $at-dragon  && $dragon-status == 0 ) {
            expr adv:set-misc-value( $misc-id-object, $dragon );
            <count>;
        }
        if( $at-troll  ) {
            expr adv:set-misc-value( $misc-id-object, $troll );
            <count>;
        }
        if( $bear-here  && $bear-status == 0 ) { /* Status 0 is chained and angry */
            expr adv:set-misc-value( $misc-id-object, $bear );
            <count>;
        }
        if( $at-satyr ) {
            expr adv:set-misc-value( $misc-id-object, $satyr );
            <count>;
        }
    }
    
    /* If count is greater than 1 then we need a specific object... */
    if( count( $count/count ) > 1 ) {
        expr adv:write-need-object();
    }
    /* Otherwise, either kill it or check for other objects... */
    else {
        var $object = adv:get-misc-value(  $misc-id-object );
        
        if( $object != 0 ) {
            expr adv:verb-kill();
        }
        /* Look for other candidates... */
        else {
        
            var $count2 := {
                if( $bird-here && $verb != $throw ) {
                    expr adv:set-misc-value( $misc-id-object, $bird );
                    <count>;
                }
                if( $clam-here || $oyster-here ) {
                    expr adv:set-misc-value( $misc-id-object, $oyster );
                    <count>;
                }
            }
            /* Only one allowed */
            if( count( $count2/count ) > 1 ) {
                expr adv:write-need-object();
            }
            else {
                /* Call verb-kill, unmatched objects will be dealt with by it */
                expr adv:verb-kill();
            }
        }
    }
}


/*
 * adv:verb-kill - Attack a creature
 */
<func:function name="adv:verb-kill"> {

    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $verb = adv:get-misc-value(  $misc-id-verb ); 
    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $closed = adv:get-misc-value( $misc-id-closed ); 

    if( $object == $bird ) {
        if( $closed != 0 ) {
            expr adv:write-message(  137 ); 
        }
        else {
            var $snake-room = adv:get-object-location( $dragon );
            expr adv:destroy-object( $bird );
            expr adv:set-object-status( $bird, 0 );
            if( $snake-room == 19 ) {
                expr adv:increment-misc-value( $misc-id-tally2 );
            }
            expr adv:write-message(  45 ); 
        }
    }
    else if( $object == 0 ) {
        expr adv:write-message(  44 );
    }
    else if( $object == $clam || $object == $oyster ) {
        expr adv:write-message(  150 );
    
    }
    else if( $object == $snake ) {
        expr adv:write-message(  46 );
    }
    else if( $object == $dwarf ) {
        if( $closed != 0 ) {
            expr adv:dwarf-end();
        }
        else {
            expr adv:write-message(  49 );
        }
    }
    else if( $object == $troll ) {
        expr adv:write-message(  157 );
    }
    else if( $object == $satyr ) {
        expr adv:write-raw-message( "You want to kill him?\n", "All he did was share haikus!\n", "I can't allow that.");
    }
    else if( $object == $bear ) {
        var $bear-status = adv:get-object-status( $bear );
        expr adv:write-message(  165 + floor( ( $bear-status + 1 ) div 2) );
        /* Here are the bear messages:
            <message> {
                <number> 164;
                <text> "The axe misses and lands near the bear where you can't get\n" _
                       "at it.";
            }
            <message> {
                <number> 165;
                <text> "With what?  Your bare hands?  Agains HIS bear hands??";
            }
            <message> {
                <number> 166;
                <text> "The bear is confused;  he only wants to be your friend.";
            }
            <message> {
                <number> 167;
                <text> "For crying out loud, the poor thing is already dead!";
            }*/

    }
    else if( $object == $dragon ) {
        var $dragon-status = adv:get-object-status( $dragon );
        if( $dragon-status != 0 ) {
            expr adv:write-message(  167 );
        }
        else {
            var $yes-answer = adv:yes(  49,  0,  0 );
            if( $yes-answer  ) {
                expr adv:write-object-message( $dragon, 3 );
                expr adv:set-object-status( $dragon, 2 ); /* Dead */
                expr adv:set-object-status( $rug, 0 ); /* Free to take */
                expr adv:drop-object( $dragon, 120 );
                expr adv:drop-object( $rug, 120 );
                for-each( $database/objects/object ) {
                    var $object-room = adv:get-object-location( number );
                    if( $object-room == 119 || $object-room == 121 ) {
                        expr adv:drop-object( number, 120 );
                    }
                }
                expr adv:set-misc-value( $misc-id-new-room, 120 );
            }
        }
    }
    else {
        expr adv:write-verb-default-message( $verb );
    }
}


/*
 * adv:iverb-foo - Handle the fee fie... magic word
 */
<func:function name="adv:iverb-foo"> {

    var $word1 = adv:get-misc-value(  $misc-id-word1 ); 
    var $foobar = adv:get-misc-value(  $misc-id-foobar ); 
    var $word = $database/vocabulary/word[special-verb][word == $word1];
        
    if( $foobar != 1 - $word/number ) {
        if( $foobar != 0 ) {
            expr adv:write-message(  151 );
        }
        else {
            expr adv:write-message(  42 );
        }
    }
    else {
        expr adv:set-misc-value( $misc-id-foobar, $word/number );
        
        /* Only continue, if the verb number is 4 */
        if( $word/number == 4 ) {
            
            expr adv:set-misc-value( $misc-id-foobar, 0 );
            
            var $eggs-room = adv:get-object-location( $eggs );
            var $room = adv:get-misc-value(  $misc-id-room ); 
            var $toting-eggs = adv:is-toting(  $eggs );
            
            if( $eggs-room == 92 && $room == 92 && $toting-eggs  ) {
                expr adv:write-message(  42 );
            }
            else {
            
                var $troll-room = adv:get-object-location( $troll );
                var $troll-status = adv:get-object-status( $troll );
                var $eggs-here = adv:is-here(  $eggs,  $room );
                
                if( $eggs-room == 0 && $troll-room == 0 && $troll-status == 0 ) { /* Standing by bridge */
                    expr adv:set-object-status( $troll, 1 ); /* Blocks your way */
                }
                
                var $k = {
                    if( $eggs-here  ) {
                        expr 1;
                    }
                    else if( $room == 92 ) {
                        expr 0;
                    }
                    else {
                        expr 2;
                    }
                }
                expr adv:drop-object( $eggs, 92 );
                expr adv:write-object-message( $eggs, $k + 2 );
            }
        }
    }
}


/*
 * adv:show-inventory - Displays all the items that are currently being carried
 */
<func:function name="adv:show-inventory"> {
    
    /* Grab now to minimize MIB usage */
    var $object-location-string = adv:get-string-by-id( $string-id-object-location );
    
    /* Go through initially to see if we have anything, then display the appropriate message */
    var $inventory-set := {
        for-each( $database/objects/object ) {
            if( number != $bear && adv:is-toting( number, $object-location-string ) ) {
                <object> number;
            }
        }
    }

    /* Mention if we're toting the bear... */
    if( adv:is-toting( $bear, $object-location-string ) ) {
        expr adv:write-message(  141 );
    }

    /* We have something... */    
    if( count( $inventory-set/object ) > 0 ) {
        expr adv:write-message( 99 );
        
        /* Display all the stuff */
        for-each( $inventory-set/object ) {
            expr adv:write-object-message( ., 1 );
        }
    }
    /* We're empty handed */
    else {
        expr adv:write-message( 98 );
    }
}


/*
 * adv:verb-throw - Perform the throw command on an object
 */
<func:function name="adv:verb-throw"> {

    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $verb = adv:get-misc-value(  $misc-id-verb ); 
    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $toting-object = adv:is-toting(  $object );
    var $bear-here = adv:is-here(  $bear,  $room );
    var $bear-status = adv:get-object-status( $bear );
    
    /* Only bother if they actually have the object, unless it is the mib */
    if( $object == $mib ) {
        expr adv:write-raw-message("Yeah, I feel that way about SNMP too.");
    }
    else if( not( $toting-object )  ) {
        expr adv:write-verb-default-message( $verb );
    }
    else {
        
        var $toting-rod2 = adv:is-toting(  $rod2 );
        var $toting-rod = adv:is-toting(  $rod );
        var $at-troll = adv:is-at(  $troll,  $room );
        
        if( $object == $rod && $toting-rod2  && not( $toting-rod )  ) {
            expr adv:set-misc-value( $misc-id-object, $rod2 );
            expr adv:verb-drop();
        }
        else if( $at-troll  && $object >= $treasure-start  ) {
            expr adv:write-message(  159 );
            expr adv:drop-object( $object, 0 );
            expr adv:drop-object( $troll, 0 );
            expr adv:drop-object( $troll-hidden, 117 );
        }
        else if( $object == $food && $bear-here  ) {
            expr adv:set-misc-value( $misc-id-object, $bear );
            expr adv:verb-feed();
        }
        else if( $object != $axe ) {
            /* Same as drop */
            expr adv:verb-drop();
        }
        else { /* It is the axe... */
            var $dwarf-number = adv:get-which-dwarf-is-here();
            var $at-dragon = adv:is-at(  $dragon );
            var $dragon-status = adv:get-object-status( $dragon );
            
            if( $dwarf-number > 0 ) {
                var $random-number = adv:random-number();
                
                expr adv:write-debug-message("adv:verb-throw", "Throwing axe random: ", $random-number );
                
                if( 60 > $random-number ) { /* I raised it a little bit, make them easier to kill...  It's seven against one! */
                    expr adv:set-dwarf-id-value( $id-dwarf-seen, $dwarf-number, 0 );
                    expr adv:set-dwarf-id-value( $id-dwarf-room, $dwarf-number, 0 );
                    expr adv:increment-misc-value( $misc-id-dkill );
                    var $dkill = adv:get-misc-value(  $misc-id-dkill ); 
                    if( $dkill == 1 ) {
                        expr adv:write-message(  149 ); /* Greasy black smoke message, you only get it once... */
                    }
                    else {
                        expr adv:write-message(  47 ); /* Basic kill message */
                    }
                }
                else {
                    expr adv:write-message(  48 ); /* Miss message */
                }
                expr adv:drop-object( $axe, $room );
            }
            else if( $at-dragon  && $dragon-status == 0 ) {
                expr adv:write-message(  152 );
                expr adv:drop-object( $axe, $room );
            }
            else if( $at-troll  ) {
                expr adv:write-message(  158 );
                expr adv:drop-object( $axe, $room );
            }
            else if( $bear-here  && $bear-status == 0 ) { /* Bear is angry and chained! */
                expr adv:write-message(  164 );
                expr adv:drop-object( $axe, $room );
                expr adv:set-object-status( $axe, 1 );
            }
            else {
                expr adv:set-misc-value( $misc-id-verb, $kill );
                expr adv:set-misc-value( $misc-id-object, 0 );
                expr adv:intransitive-verb();
            }
        }
    }
}


/*
 * adv:verb-feed - Perform the feed command on an object
 */
<func:function name="adv:verb-feed"> {

    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $verb = adv:get-misc-value(  $misc-id-verb ); 
    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $food-here = adv:is-here(  $food,  $room );
    
    if( $object == $bird ) {
        expr adv:write-message(  100 );
    }
    else if( $object == $dwarf ) {
        if( not( $food-here ) ) {
            expr adv:write-verb-default-message( $verb );
        }
        else {
            expr adv:increment-misc-value( $misc-id-dflag );
            expr adv:write-message(  103 );
        }
    }
    else if( $object == $satyr ) {
        expr adv:write-raw-message("The satyr isn't hungry.");
    }
    else if( $object == $bear ) {
        if( not( $food-here ) ) {
            var $bear-status = adv:get-object-status( $bear );
            if( $bear-status == 0 ) { /* Angry and chained */
                expr adv:write-message(  102 );
            }
            /* Here is message 102: 
            <message> {
                <number> 102;
                <text> "There's nothing here it wants to eat (Except perhaps you).";
            } */
            else if( $bear-status == 3 ) {
                expr adv:write-message(  110 );
            }
            /* Here is message 110:
            <message> {
                <number> 110;
                <text> "Don't be ridiculous!";
            }*/
            else {
                expr adv:write-verb-default-message( $verb );
            }
        }
        else {
            expr adv:destroy-object( $food );
            expr adv:set-object-status( $bear, 1 );
            expr adv:set-object-status( $axe, 0 );
            expr adv:write-message(  168 );
        }
    }
    else if( $object == $dragon ) {
        var $dragon-status = adv:get-object-status( $dragon );
        if( $dragon-status != 0 ) {
            expr adv:write-message(  110 );
        }
        else {
            expr adv:write-message(  102 );
        }
    }
    else if( $object == $troll ) {
        expr adv:write-message(  182 );
    }
    else if( $object == $snake ) {
        var $closed = adv:get-misc-value(  $misc-id-closed );
        var $bird-here = adv:is-here(  $bird,  $room );
        
        if( $closed == 0 || not( $bird-here ) ) {
            expr adv:write-message(  102 );
        }
        else {
            expr adv:write-message(  101 );
            expr adv:destroy-object( $bird );
            expr adv:set-object-status( $bird, 0 );
            expr adv:increment-misc-value( $misc-id-tally2 );
        }
    }
    else {
        expr adv:write-message(  14 );
    }
}


/*
 * adv:verb-find - Perform the find command on an object
 */
<func:function name="adv:verb-find"> {

    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $verb = adv:get-misc-value(  $misc-id-verb ); 
    var $closed = adv:get-misc-value(  $misc-id-closed ); 
    var $dflag = adv:get-misc-value( $misc-id-dflag ); 
    var $toting-object = adv:is-toting(  $object );
    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $dwarf-here = adv:is-dwarf-here( $room);
    var $at-object = adv:is-at(  $object,  $room );
    var $bottle-liquid = adv:get-liquid-in-bottle();
    var $room-liquid = adv:get-liquid-in-room( $room);
    var $bottle-here = adv:is-here(  $bottle,  $room );
    
    if( $toting-object  ) {
        expr adv:write-message(  24 );
    }
    else if( $closed  ) {
        expr adv:write-message(  138 );
    }
    else if( $dwarf-here && $dflag >= 2 && $object == $dwarf ) {
        expr adv:write-message(  94 );
    }
    else if( $at-object  || ( $object == $bottle-liquid && $bottle-here ) || $object == $room-liquid ) {
        expr adv:write-message(  94 );
    }
    else {
        expr adv:write-verb-default-message( $verb );
    }
}


/*
 * adv:verb-fill - Perform the fill command on an object
 */
<func:function name="adv:verb-fill"> {

    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $object-liquid = adv:get-liquid-in-bottle();
    var $room-liquid = adv:get-liquid-in-room( $room);
    var $toting-bottle = adv:is-toting(  $bottle );
    var $bottle-status = adv:get-object-status( $bottle );
    var $bottle-here = adv:is-here( $bottle, $room );
    var $toting-vase = adv:is-toting(  $vase );

    if( $object == $bottle ) {
        if( $object-liquid != $nothing ) {
            expr adv:write-message(  105 );
        }
        else if( $room-liquid == $nothing ) {
            expr adv:write-message(  106 );
        }
        else if( not( $bottle-here ) ) {
            expr adv:write-message( 104 );
        }
        else {
            if( $room-liquid == $oil ) {
                expr adv:set-object-status( $bottle, 2 );
                if( $toting-bottle ) { /* Record that we are carrying it */
                    expr adv:set-object-location( $room-liquid, -1 );
                }
            }
            else {
                expr adv:set-object-status( $bottle, 0 );
                if( $toting-bottle ) { /* Record that we are carrying it */
                    expr adv:set-object-location( $room-liquid, -1 );
                }
            }
            if( $room-liquid == $oil ) {
                expr adv:write-message(  108 );
            }
            else {
                expr adv:write-message(  107 );
            }
        }
    }
    else if( $object == $vase ) {
        if( $room-liquid == $nothing ) {
            expr adv:write-message(  144 );
        }
        else if( not( $toting-vase ) ) {
            expr adv:write-message(  29 );
        }
        else {
            expr adv:write-message(  145 );
            expr adv:verb-drop();
        }
    }
    else {
        expr adv:write-message(  29 );
    }
}


/*
 * adv:verb-drop - Perform the drop command on an object
 *
 * Arguments:
 *     $misc-string - [Required] - Data string from the MIB
 */
<func:function name="adv:verb-drop"> {
    param $misc-string;

    var $verb = adv:get-misc-value(  $misc-id-verb, $misc-string ); 
    var $object = adv:get-misc-value(  $misc-id-object, $misc-string ); 
    var $toting-object = adv:is-toting(  $object );
    
    /* If not toting then don't bother... */
    if( not( $toting-object ) ) {
        expr adv:write-verb-default-message( $verb );
    }
    else {
    
        var $room = adv:get-misc-value(  $misc-id-room, $misc-string ); 
        var $snake-here = adv:is-here(  $snake,  $room );
        var $vend-here = adv:is-here(  $vend,  $room );
        var $closed = adv:get-misc-value(  $misc-id-closed, $misc-string ); 
        var $at-troll = adv:is-at(  $troll,  $room );
        var $at-dragon = adv:is-at(  $dragon,  $room );
        var $dragon-status = adv:get-object-status( $dragon );
        var $bird-status = adv:get-object-status( $bird );
        var $snake-location = adv:get-object-location( $snake );
        var $bottle-liquid = adv:get-liquid-in-bottle();
        
        /* Dynamite */
        if( $object == $rod && not( adv:is-toting( $rod ) ) && adv:is-toting( $rod2 ) ) {
            expr adv:set-misc-value( $misc-id-object, $rod2 );
            var $object-name = adv:get-object-name( $rod2, $misc-string );
            expr adv:write-raw-message( "OK, you dropped the ", $object-name );
            expr adv:drop-object( $rod2, $room );
        }
        /* Snake and Bird */
        else if( $object == $bird && $snake-here ) {
            expr adv:drop-object( $bird, $room );
            expr adv:set-object-status( $bird, 0 );
            var $object-name = adv:get-object-name( $bird, $misc-string );
            expr adv:write-raw-message( "OK, you released the ", $object-name );
            expr adv:write-message(  30 );
            if( $closed != 0 ) {
                expr adv:dwarf-end();
            }
            else {
                expr adv:destroy-object( $snake );
                expr adv:set-object-status( $snake, -1 );
            }
        }
        /* Coins and vending machine */
        else if( $object = $coins && $vend-here  ) {
            var $object-name = adv:get-object-name( $coins, $misc-string );
            expr adv:write-raw-message( "OK, you dropped the ", $object-name );
            expr adv:destroy-object( $coins );
            expr adv:drop-object( $batteries, $room );
            expr adv:write-object-message( $batteries, 2 );
        }
        /* bird and dragon */
        else if( $object == $bird && $at-dragon  && $dragon-status == 0 ) {
            var $object-name = adv:get-object-name( $bird, $misc-string );
            expr adv:write-raw-message( "OK, you released the ", $object-name );
            expr adv:write-message(  154 );
            expr adv:destroy-object( $bird );
            expr adv:set-object-status( $bird, 0 );
            if( $snake-location != 0 ) {
                expr adv:increment-misc-value( $misc-id-tally2 );
            }
        }
        /* Bear and Troll */
        else if( $object == $bear && $at-troll  ) {
            expr adv:drop-object( $bear, $room );
            var $object-name = adv:get-object-name( $bear, $misc-string );
            expr adv:write-raw-message( "OK, you released the ", $object-name );
            expr adv:write-message(  163 );
            expr adv:drop-object( $troll, 0 );
            expr adv:drop-object( $troll-hidden, 117 );
            expr adv:set-object-status( $troll, 2 ); /* dead I guess - or hiding - never to appear again! */
        }
        else if( $object == $vase ) {
            expr adv:drop-object( $object, $room );
            var $object-name = adv:get-object-name( $object, $misc-string );
            expr adv:write-raw-message( "OK, you dropped the ", $object-name );
            if( $room != 96 ) { /* It is ok to drop it in soft room */
                var $at-pillow = adv:is-at(  $pillow,  $room );
                if( $at-pillow  ) {
                    expr adv:set-object-status( $vase, 0 );
                    expr adv:write-object-message( $vase, 3 );
                }
                else {
                    expr adv:set-object-status( $vase, 2 ); /* Shattered */
                    expr adv:write-object-message( $vase, 5 );
                }
            }
        }
        /* liquid and bottle */
        else if( adv:is-here( $bottle ) && $bottle-liquid != $nothing && $bottle-liquid == $object ) {
            expr adv:set-misc-value( $misc-id-object, $bottle );
            expr adv:drop-object( $bottle, $room );
            var $object-name = adv:get-object-name( $bottle, $misc-string );
            expr adv:write-raw-message( "OK, you dropped the ", $object-name );
            if( $bottle-liquid != 0 ) {
                expr adv:set-object-location( $bottle-liquid, 0 );
            }
        }
        else if( adv:is-here( $bottle ) && $bottle-liquid != $nothing && $object == $bottle ) {
            expr adv:drop-object( $bottle, $room );
            var $object-name = adv:get-object-name( $bottle, $misc-string );
            expr adv:write-raw-message( "OK, you dropped the ", $object-name );
            /* Drop the liquid too! */
            if( $bottle-liquid != 0 ) {
                expr adv:set-object-location( $bottle-liquid, 0 );
            }
        }
        /* Bird and Cage */
        else if( $object == $cage && $bird-status != 0 ) {
            expr adv:drop-object( $bird, $room );
            expr adv:drop-object( $object, $room );
            var $object-name = adv:get-object-name( $object, $misc-string );
            expr adv:write-raw-message( "OK, you dropped the ", $object-name );
        }
        else if( $object == $bird ) {
            expr adv:drop-object( $bird, $room );
            var $object-name = adv:get-object-name( $bird, $misc-string );
            expr adv:write-raw-message( "OK, you released the ", $object-name );
            expr adv:set-object-status( $bird, 0 );
        }
        else {
            expr adv:drop-object( $object, $room );
            var $object-name = adv:get-object-name( $object, $misc-string );
            expr adv:write-raw-message( "OK, you dropped the ", $object-name );
        }
    }
}



/*
 * adv:destroy-object - Moves object to location 0, thereby destroying it
 *
 * Arguments:
 *     $object-number - [Required] - The object to be destroyed
 */
<func:function name="adv:destroy-object"> {
    param $object-number;
    
    expr adv:drop-object( $object-number, 0 );
}


/*
 * adv:iverb-read - Figure out what should be read
 */
<func:function name="adv:iverb-read"> {

    var $room = adv:get-misc-value(  $misc-id-room );
    var $tome-here = adv:is-here(  $tome,  $room );
    var $at-tablet = adv:is-at(  $tablet,  $room );
    var $at-message = adv:is-at(  $message,  $room );
    var $magazine-here = adv:is-here(  $magazine,  $room );
    var $oyster-here = adv:is-here(  $oyster,  $room );
    

    /* Gather the potential read objects */
    var $read-objects := {
        if( $tome-here ) {
            <object> $tome;
        }
        if( $at-tablet ) {
            <object> $tablet;
        }
        if( $at-message  ) {
            <object> $message;
        }
        if( $magazine-here  ) {
            <object> $magazine;
        }
        if( $oyster-here  ) {
            <object> $oyster;
        }
    }
    
    /* If count doesn't equal 1 then we need a specific object... */
    if( count( $read-objects/object ) != 1  ) {
        expr adv:write-need-object();
    }
    /* Otherwise, read it */
    else {
        var $object = $read-objects/object;
        expr adv:set-misc-value(  $misc-id-object, $object );
        
        if( $object != 0 ) {
            expr adv:verb-read();
        }
    }
}


/*
 * adv:verb-read - Perform the read command on an object
 */
<func:function name="adv:verb-read"> {

    var $dark = adv:is-dark();
    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $verb = adv:get-misc-value(  $misc-id-verb ); 
    var $object-name = adv:get-object-name( $object );
    var $closed = adv:get-misc-value(  $misc-id-closed ); 
    var $toting-oyster = adv:is-toting(  $oyster );
    
    if( $dark ) {
        expr adv:write-raw-message( "I see no " , $object-name , " here." );
    }
    else if( $object == $magazine ) {
        expr adv:write-message(  190 );
    }
    else if( $object == $tablet ) {
        expr adv:write-message(  196 );
    }
    else if( $object == $message ) {
        expr adv:write-message(  191 );
    }
    else if( $object == $tome ) {
        /* Get Tip */
        var $tip-output = jcs:execute( $connection, "get-cli-tip" );
        var $tip-content = $tip-output/content;
        var $tip-raw = substring( $tip-content, 2, string-length( $tip-content ) - 2 );
        var $lines = jcs:split("\n", $tip-raw );
        var $random = adv:random-number( 3, 6 );
        expr adv:write-object-message( $object, $random );
        for-each( $lines ) {
            var $line = {
                if( position() == 1 ) {
                    expr " \n  '" _ .;
                }
                else {
                    expr "  " _ .;
                }
                if( position() == last() ) {
                    expr "'";
                }
            }
            expr jcs:output( $line  );
        }
    }
    else if( $object == $oyster && $toting-oyster && $closed != 0 ) {
        expr adv:write-message( 193 );
        /* var $absorb = adv:yes(  192, 193,  54 ); - We aren't tracking hints - just tell them */
    }
    else if( $object == $mib ) {
        expr adv:write-raw-message("If you want to read the MIB then quit and type:\n",
                                   "'show snmp mib walk jnxUtil'!" );
    }
    else {
        expr adv:write-verb-default-message( $verb );
    }
    
}


/*
 * adv:verb-blast - Perform the blast command on an object
 */
<func:function name="adv:verb-blast"> {

    var $room = adv:get-misc-value(  $misc-id-room ); 
    var $rod2-status = adv:get-object-status( $rod2 );
    var $rod2-here = adv:is-here(  $rod2,  $room );
    var $closed = adv:get-misc-value(  $misc-id-closed ); 
    var $verb = adv:get-misc-value(  $misc-id-verb ); 
    
    /* If not closed then just show a message */
    if( $closed == 0 ) {
        expr adv:write-verb-default-message( $verb );
    }
    /* bonus score depends on using blast correctly in the end game */
    else {
        var $bonus = {
            if( $room == 115 ) {
                expr 134;
            }
            else if( $rod2-here  ) {
                expr 135;
            }
            else {
                expr 133;
            }
        }
        expr adv:set-misc-value( $misc-id-bonus, $bonus );
        expr adv:write-message(  $bonus );
        expr adv:wait-for-enter();
        expr adv:normal-end();
    }
}


/*
 * adv:verb-break - Perform the break command on an object
 */
<func:function name="adv:verb-break"> {

    var $object = adv:get-misc-value(  $misc-id-object ); 
    var $room = adv:get-misc-value( $misc-id-room ); 
    var $verb = adv:get-misc-value( $misc-id-verb ); 
    var $closed = adv:get-misc-value( $misc-id-closed ); 
    var $vase-status = adv:get-object-status( $vase );
    var $toting-vase = adv:is-toting(  $vase );
    
    if( $object == $mirror && $closed ) {
        expr adv:write-message(  197 );  /* Shattered */
        expr adv:dwarf-end();
    }
    else {
        if( $object == $mirror || ( $object == $vase && $vase-status == 0 ) ) {
            var $message = {
                if( $object == $mirror ) {
                    expr 148; /* Too far to reach... */
                }
                else { /* It is the vase */
                    expr 198;
                    if( $toting-vase  ) {
                        expr adv:drop-object( $vase, $room );
                    }
                    expr adv:set-object-status( $vase, 2 ); /* Shattered */
                }
            }
            expr adv:write-message( $message );
        }
        else {
            expr adv:write-verb-default-message( $verb );
        }
    }
}


/*
 * adv:verb-wake - Perform the wake command on an object
 */
<func:function name="adv:verb-wake"> {

    var $object = adv:get-misc-value( $misc-id-object ); 
    var $closed = adv:get-misc-value(  $misc-id-closed ); 
    var $verb = adv:get-misc-value( $misc-id-verb ); 
    
    if( $object != $dwarf || $closed == 0 ) {
        expr adv:write-verb-default-message( $verb );
    }
    else {
        expr adv:write-message(  199 );
        expr adv:dwarf-end();
    }
}


/*
 * adv:dwarf-end - If you wake the dwarfs up in the endgame then they kill you.
 */
<func:function name="adv:dwarf-end"> {
    expr adv:write-message( 136 ); /* Ruckus woke up the dwarves, you are dead! */
    expr adv:wait-for-enter();
    expr adv:death();
}


/*
 * adv:write-verb-default-message - Display message for verb
 *
 * Arguments:
 *     $verb-number - [Required] - The verb that should show its message
 */
<func:function name="adv:write-verb-default-message"> {
    param $verb-number;
    
    var $default-message = $database/vocabulary/word[verb][number == $verb-number]/default-message;
    
    if( jcs:empty( $default-message ) ) {
        expr adv:write-raw-message( "Error writing the verb default message." );
    }
    else {
        expr adv:write-message(  $default-message );
    }
}


/*
 * adv:get-object-name - Pull out the object name from the command line
 *
 * Arguments:
 *     $object-number - [Required] - the object
 *     $misc-string - [Optional] - Data string from MIB
 *
 * Returns: string - the object name
 */
<func:function name="adv:get-object-name"> {
    param $object-number;
    param $misc-string; /* Provide this to minimize MIB usage */

    var $word1 = adv:get-misc-value( $misc-id-word1, $misc-string ); 
    var $word2 = adv:get-misc-value(  $misc-id-word2, $misc-string ); 
    
    var $word-type = adv:get-word-type( $word1 );
    
    if( $word-type == $word-type-object ) {
        <func:result select="$word1">;
    }
    else {
        <func:result select="$word2">;
    }
}


/*
 * adv:get-word-type - Determines if word is motion, verb, object, etc
 *
 * Arguments:
 *     $word - [Required] - the word to check
 *
 * Returns: number - the number of the word type
 */
<func:function name="adv:get-word-type"> {
    param $word;

    /* Filtered version of word... */
    var $filtered-word = translate( $word, "akshtrpdmntucfi", "^$>';:?%&*;@#!~" ); 
    
    /* Look in the database for matching words... */
    var $matches = $database/vocabulary/word[word == $word || word == $filtered-word];
    
    /* Complain about unknown word... */
    if( jcs:empty( $matches ) ) {
        expr adv:write-debug-message( "adv:get-word-type", "No match found!");
        /* Three possible messages, mix it up a little */
        var $random-number = adv:random-number( 1, 3 );
        if( $random-number == 2 ) {
            expr adv:write-message(  60 );
        }
        else if( $random-number == 3 ) {
            expr adv:write-message(  61 );
        }
        else {
            expr adv:write-message(  13 );
        }
        <func:result select = "-1">;
    }
    else {
        if( $matches/motion ) {
            <func:result select = "$word-type-motion">;
        }
        else if( $matches/object ) {
            <func:result select = "$word-type-object">;
        }
        else if( $matches/verb ) {
            <func:result select = "$word-type-verb">;
        }
        else if( $matches/special-verb ) {
            <func:result select = "$word-type-special-verb">;
        }
    }
}


/*
 * adv:get-word-number - Determines the number for the word
 *
 * Arguments:
 *     $word - [Required] - the word to check
 *
 * Returns: number - the word number
 */
<func:function name="adv:get-word-number"> {
    param $word;

    /* Filtered version of word... */
    var $filtered-word = translate( $word, "akshtrpdmntucfi", "^$>';:?%&*;@#!~" ); 

    /* Look in the database for matching words... */
    var $matches = $database/vocabulary/word[word == $word || word == $filtered-word];
    
    /* Complain about unknown word... */
    if( jcs:empty( $matches ) ) {
        /* Three possible messages, mix it up a little */
        var $random-number = adv:random-number( 1, 3 );
        if( $random-number == 2 ) {
            expr adv:write-message(  60 );
        }
        else if( $random-number == 3 ) {
            expr adv:write-message(  61 );
        }
        else {
            expr adv:write-message(  13 );
        }
        <func:result select="-1">;
    }
    else {
        /* Mod it by 1000 */
        var $number = $matches/number mod 1000;
        <func:result select="$number">;
    }
}


/*
 * adv:get-liquid-in-room - Returns the type of liquid, if any, found in the room
 *
 * Arguments:
 *     $room-number - [Optional] - The room to check
 *
 * Returns: integer - value of the liquid in the room
 */
<func:function name="adv:get-liquid-in-room"> {
    param $room-number = -12345;
    
    var $room = { 
        if( $room-number == -12345 ) {
            expr adv:get-misc-value( $misc-id-room ); 
        }
        else {
            expr $room-number;
        }
    }
    
    if( $database/rooms/room[number == $room]/water ) {
        <func:result select="$water">;
    }
    else if( $database/rooms/room[number == $room]/oil ) {
         <func:result select="$oil">;
    }
    else {
        <func:result select="$nothing">;
    }
}


/*
 * adv:get-liquid-in-bottle - Returns the type of liquid, if any, found in the bottle
 *
 * Returns: integer - value of the liquid in the bottle
 */
<func:function name="adv:get-liquid-in-bottle"> {

    var $status = adv:get-object-status( $bottle );
    
    /* 0 = Water, 1 = Nothing, 2 = Oil */
    if( $status == 0 ) {
        <func:result select="$water">;
    }
    else if( $status == 2 ) {
        <func:result select="$oil">;
    }
    else {
        <func:result select="$nothing">;
    }
}


/*
 * adv:is-dwarf-here - Checks if one of the six attacking dwarfs is in the room
 *
 * Arguments:
 *     $room-number - [Optional] - The room to check
 *
 * Returns: boolean - true if dwarf is present
 */
<func:function name="adv:is-dwarf-here"> {
    param $room-number = -12345;

    var $room = { 
        if( $room-number == -12345 ) {
            expr adv:get-misc-value( $misc-id-room ); 
        }
        else {
            expr $room-number;
        }
    }

    var $dwarf-string = adv:get-string-by-id( $string-id-dwarves );
    var $result := {
        for-each( $starting-values/dwarf-locations/dwarf[position() != $pirate] ) {
            var $dwarf-room = adv:get-dwarf-id-value( $id-dwarf-room, position(), $dwarf-string );
        
            if( $room == $dwarf-room ) {
                <here>;
            }
        }
    }
    if( $result/here ) {
        <func:result select = "true()">;
    }
    else {
        <func:result select = "false()">;
    }
}
 

/*
 * adv:get-which-dwarf-is-here - Returns the first attacking dwarf that is present
 *
 * Returns: number - the dwarf that is present or 0 if none
 */
<func:function name="adv:get-which-dwarf-is-here"> {

    var $room = adv:get-misc-value(  $misc-id-room );

    var $dwarf-string = adv:get-string-by-id( $string-id-dwarves );
    var $result := {
        for-each( $starting-values/dwarf-locations/dwarf[position() != $pirate] ) {
            var $dwarf-room = adv:get-dwarf-id-value( $id-dwarf-room, position(), $dwarf-string );
        
            if( $room == $dwarf-room ) {
                <dwarf> position();
            }
        }
    }
    
    if( jcs:empty( $result/dwarf ) ) {
        <func:result select="0">;
    }
    else {
        var $result-value = $result/dwarf[1];
        <func:result select="$result-value">;
    }
}
 

/*
 * adv:is-forced-at-location - Determines if room forces a move.  This is done
 * because some rooms are just transitory messages between other rooms.
 *
 * Arguments:
 *     $room-number - [Required] - The room to check
 *
 * Returns: boolean - true if user is forced out of room
 */
<func:function name="adv:is-forced-at-location"> {
    param $room-number;

    /* Check for forced-move in the room */
    var $room = $database/rooms/room[number == $room-number];
    
    if( $room/forced-move ) {
        <func:result select = "true()">;
    }
    else {
        <func:result select = "false()">;
    }
}
 

/* 
 * adv:normal-end - The normal way to end the game.  Displays the score and then
 * exits.
 */
<func:function name="adv:normal-end"> {

    expr adv:score();
    expr adv:exit();
}


/*
 * adv:exit - Closes the game by using <xsl:message terminate="yes">.  This will
 * cause "error:" to be displayed so indicate in the string that there really isn't
 * an error.
 */
<func:function name="adv:exit"> {

    /* Close the connection */
    expr jcs:close( $connection );
    <xsl:message terminate="yes"> "Just kidding, there is no error, we're just exiting Adventure...";
}


/*
 * adv:score - Displays the computed game score.  The rankings were not part of
 * the converted C code but I based them on what looked standard on the Internet
 * for Adventure.
 */
<func:function name="adv:score"> {

    /* Get this to minimize MIB usage */
    var $object-location-string = adv:get-string-by-id( $string-id-object-location );
    var $object-status-string = adv:get-string-by-id( $string-id-object-status );
    
    /* Count treasures - they have to be in the building to be counted */   
    var $treasure-count := {
        for-each( $database/objects/object[ number >= $treasure-start ] ) {
            var $status = adv:get-object-status( number, $object-status-string );
            var $location = adv:get-object-location( number, $object-location-string );
            /*if( $status >= 0 ) { - This makes no sense...the treasures defaulted to 255...
                expr adv:increment-misc-value( $misc-id-scratch-t, 2 );
            }*/
            if( $location == 3 && ( $status == 0 || $status == 255 ) ) {
                if( number == $chest ) { /* chest is 55 */
                    <treasure> 14;
                }
                else if( number > $chest ) {
                    <treasure> 16;
                }
                else {
                    <treasure> 12;
                }
            }
            else {
                expr adv:write-debug-message( "adv:score", "Object ", number, " Location ", $location, " Status ", $status );
            }
        }
    }
    /* Treasure Scores 
     * 50-54 = 12 (60)
     * 55 = 14    (14)
     * 56-64 = 16 (144)
     * Total =     218
     */
    
    expr adv:write-raw-message("Here is your score:");
    
    var $format-string = "%-18s %3i out of %3i";
    
    /* Add Treasure count */
    var $treasure-score = sum( $treasure-count/treasure );
    var $treasure-message = jcs:printf( $format-string,"Found treasures:", $treasure-score, 218);
    expr adv:write-raw-message( $treasure-message );
    
    /* Now add in the left over deaths... */
    var $numdie = adv:get-misc-value(  $misc-id-numdie ); 
    var $survival-score = ($maxdie - $numdie) * 10;
    var $numdie-message = jcs:printf( $format-string,"Survival rate:", $survival-score, 30);
    expr jcs:output( $numdie-message );

    /* Did they give up? */
    var $gaveup = adv:get-misc-value(  $misc-id-gaveup );
    var $gaveup-score = {
        if( $gaveup == 0 ) {
            expr 4;
        }
        else {
            expr 0;
        }
    }
    var $gaveup-message = jcs:printf( $format-string, "Did not quit:", $gaveup-score, 4);
    expr jcs:output( $gaveup-message );    
    
    /* Getting in and riling the dwarves */
    var $dflag = adv:get-misc-value(  $misc-id-dflag ); 
    var $getting-in-score = {
        if( $dflag > 0 ) {
            expr 25;
        }
        else {
            expr 0;
        }
    }    
    var $getting-in-message = jcs:printf( $format-string, "Dwarf aggravation:", $getting-in-score,  25);
    expr jcs:output( $getting-in-message );

    /* Did they make it to the end game by seeing all the treasures? */
    var $closing = adv:get-misc-value(  $misc-id-closing ); 
    var $closing-score = {
        if( $closing > 0 ) {
            expr 25;
        }
        else {
            expr 0;
        }
    }    
    var $closing-message = jcs:printf( $format-string, "Master's section:", $closing-score,  25);
    expr jcs:output( $closing-message );

    /* Bonus score is based on what they do in the end game */
    var $closed = adv:get-misc-value(  $misc-id-closed ); 
    var $bonus-score = {
        if( $closed > 0 ) {
            var $bonus = adv:get-misc-value(  $misc-id-bonus ); 
            if( $bonus == 0 ) {
                expr 10;
            }
            else if( $bonus == 135 ) {
                expr 25;
            }
            else if( $bonus == 134 ) {
                expr 30;
            }
            else if( $bonus == 133 ) {
                expr 45;
            }
            else {
                expr 0;
            }
        }
        else {
            expr 0;
        }
    }
    var $bonus-message = jcs:printf( $format-string, "Bonus points:",  $bonus-score , 45);
    expr jcs:output( $bonus-message );
    
    var $magazine-location = adv:get-object-location( $magazine );
    var $magazine-score = {
        if( $magazine-location == 108 ) {
            /* Add 1 for leaving it at Witts End */
            expr 1;
        }
        else {
            expr 0;
        }
    }
    var $magazine-message = jcs:printf( $format-string, "Magazine:", $magazine-score, 1);
    expr jcs:output( $magazine-message );
    
    /* Add two for the fun of it */
    var $free-points = jcs:printf( $format-string, "Free points:", 2, 2);
    expr jcs:output( $free-points );
    
    /* Minus for novice mode */
    var $novice-message = jcs:printf( $format-string, "Novice Penalty:", -50, 0 );
    var $novice-score = {
        if( $mode == $novice ) {
            expr -50;
            expr jcs:output( $novice-message );
        }
        else {
            expr 0;
        }
    }
    
                    /* 2 +     218         +     30          +     4         +        25         +
                               25     +     45       +   1 = 350 */
    var $final-score-raw = 2 + $treasure-score + $survival-score + $gaveup-score + $getting-in-score +
                       $closing-score + $bonus-score + $magazine-score + $novice-score;
                       
    /* Lowest is zero */
    var $final-score = {
        if( $final-score-raw > 0 ) {
            expr $final-score-raw;
        }
        else {
            expr 0;
        }
    }

    expr jcs:output( "---------------------------------");
    var $score-message = jcs:printf( $format-string, "Final Score:", $final-score, 350 );
    expr jcs:output( $score-message );
    
    var $rank = {
        if( $final-score >= 348 ) {
            expr "Grandmaster Adventurer!";
        }
        else if( $final-score >= 330 ) {
            expr "Master, First Class!";
        }
        else if( $final-score >= 300 ) {
            expr "Master, Second Class!";
        }
        else if( $final-score >= 200 ) {
            expr "Junior Master!";
        }
        else if( $final-score >= 130 ) {
            expr "Seasoned Adventurer";
        }
        else if( $final-score >= 100 ) {
            expr "Experienced Adventurer";
        }
        else if( $final-score >= 35 ) {
            expr "Adventurer";
        }
        else if( $final-score >= 10 ) {
            expr "Novice";
        }
        else {
            expr "Amateur";
        }
    }
    
    expr adv:write-raw-message("You earned the rank of ", $rank, "\n..." );
}


/*
 * adv:do-pirate - Performs pirate routine.  If he ends up in the same room and you
 * have treasure then he will steal it.  Otherwise there is a chance you will see him
 *
 * Arguments:
 *     $new-loc - [Required] - The current user room number
 *     $pirate-old-room - [Required] - The past room the pirate was in
 *     $pirate-room - [Required] - The new room of the pirate
 * 
 * Returns: boolean - true if pirate is done and can be retired
 */
<func:function name="adv:do-pirate"> {
    param $new-loc;
    param $pirate-old-room;
    param $pirate-room;

    var $current-chest-room = adv:get-object-location( $chest );

    /* Once the chest has been set somewhere, don't let the pirate steal again... */
    if( $new-loc == $chest-location || $current-chest-room != 0 ) {
        <func:result select="false()">;
    }
    else {
    
        /* Give the pirate a chance to steal stuff */
        var $pyramid-location = adv:get-object-location( $pyramid );
        var $emerald-location = adv:get-object-location( $emerald );
        
        var $treasure-set := {
            for-each( $database/objects/object[ number >= $treasure-start ] ) {
                
                /* Only check treasures besides the pyramid and only if the pyramid or emerald or not laying around on the floor */
                if( number != $pyramid || ( $new-loc != $pyramid-location && $new-loc != $emerald-location ) ) {
                    
                    if( adv:is-toting( number ) ) {
                        <steal> number;
                    }
                    else if( adv:is-at( number ) ) {
                        <at> number;
                    }
                }
            }
        }
        
        if( $mode == $debug ) {
            expr adv:write-debug-message( "adv:do-pirate", "Tally ", adv:get-misc-value( $misc-id-tally ), " Tally 2 ", adv:get-misc-value( $misc-id-tally2 ) );
        }
        
        /* If there are items to steal then steal them and move the chest */
        if( count( $treasure-set/steal ) > 0 ) {
            expr adv:write-message(  128 ); /* Pirate har har message */
            expr adv:drop-object( $chest, $chest-location );
            expr adv:drop-object( $message, $message-location );
            
            /* Move all <steal> treasures and unfixed <at> treasures to the chest location */
            for-each( $treasure-set/* ) {
                var $number = .;
                if( name() == "steal" ) {
                    expr adv:drop-object( $number, $chest-location );
                }
                else if( not( $database/objects/object[number == $number]/fixed ) ) {
                    expr adv:drop-object( $number, $chest-location );
                }
            }
            /* Pirate is done and can be retired */
            <func:result select="true()">;
        }
        /* If there are not items to steal, and no items <at> then possibly show the message about the pirate carrying the chest */
        else if( count( $treasure-set/at ) == 0 &&  not( adv:is-dark( $new-loc ) ) && 
                 ( ( adv:get-misc-value( $misc-id-tally ) == adv:get-misc-value( $misc-id-tally2 ) + 1 ) ||
                 ( 10 > adv:random-number() ) ) ) {
            
            expr adv:write-message(  186 ); /* Pirate carrying chest */
            expr adv:drop-object( $chest, $chest-location );
            expr adv:drop-object( $message, $message-location );
            
            /* Pirate is done and can be retired */
            <func:result select="true()">;
        }
        else if( $pirate-old-room != $pirate-room && 20 > adv:random-number() ) {
            expr adv:write-message(  127 ); /* Faint rustling noises... */
            <func:result select="false()">;
        }
    }
}


/*
 * adv:random-dwarf-move - Select a new random location for a dwarf, recurse if
 * the random location is not valid.
 *
 * Arguments:
 *     $dwarf-id - [Required] - The number of the dwarf to move
 *     $dloc - [Required] - Current dwarf room
 *     $odloc - [Required] - Past dwarf room
 *
 * Returns: number - the new room number
 */
<func:function name="adv:random-dwarf-move"> {
    param $dwarf-id;
    param $dloc;
    param $odloc;

    /* Random locations are from room 15 to room 121 I hope */
    var $random-location = adv:random-number( 15, 121 );
    
    /* Pause so they all don't plop in the same room... */
    expr jcs:sleep(0, (17 * $dwarf-id) );
    
    if( $random-location != $odloc && $random-location != $dloc && 
            not( $dwarf-id == $pirate && $database/rooms/room[number == $random-location]/no-pirate ) ) {
        
        <func:result select ="$random-location">;
    }
    else {
        var $result = adv:random-dwarf-move( $dwarf-id, $dloc, $odloc );
        <func:result select = "$result">;
    }
}


/*
 * adv:closing-check - Performs check to see if they are trying to leave the
 * cave after it has started closing.
 *
 * Arguments:
 *     $room - [Required] - The current room
 *
 * Returns: number - the new room number 
 */
<func:function name="adv:closing-check"> {
    param $room;

    /* Grab here to minimize MIB usage */
    var $misc-string = adv:get-string-by-id( $string-id-misc );
    
    var $new-loc = adv:get-misc-value(  $misc-id-new-room, $misc-string ); 
    var $closing = adv:get-misc-value(  $misc-id-closing, $misc-string ); 
    if( 9 > $new-loc && $new-loc != 0 && $closing ) {
        expr adv:write-message(  130 );
        var $panic = adv:get-misc-value(  $misc-id-panic, $misc-string ); 
        expr adv:set-misc-value( $misc-id-new-room, $room );
        if( $panic == 0 ) {
            expr adv:set-misc-value( $misc-id-clock2, 15 );
        }
        expr adv:set-misc-value( $misc-id-panic, 1 );
        /* Return the new room for use in the second-check */
        <func:result select="$room">;
    }
    else {
        /* Return the new room for use in the second-check */
        <func:result select="$new-loc">;
    }
}


/*
 * adv:dwarf-check - If dwarf sees you and came from the room you want to go
 * then he blocks you
 *
 * Arguments:
 *     $room - [Required] - The current room
 *     $new-loc - [Required] - The proposed new room
 *
 * Returns: number - the new room number 
 */
<func:function name="adv:dwarf-check"> {
    param $room;
    param $new-loc;
    
    var $forced = adv:is-forced-at-location( $room );
    var $no-pirate = $database/rooms/room[number == $room]/no-pirate;
    if( $new-loc != $room && not( $forced ) && jcs:empty( $no-pirate ) ) {
        /* Retrieve the dwarf string once to prevent having to read it multiple times */
        var $dwarf-string = adv:get-string-by-id( $string-id-dwarves );
        var $dwarf-saw-us := {
            /* Only check the first six, the pirate doesn't try to attack */
            for-each( $starting-values/dwarf-locations/dwarf[ position() != $pirate ]) {
                
                var $odloc = adv:get-dwarf-id-value( $id-old-dwarf-room, position(), $dwarf-string );
                var $dseen = adv:get-dwarf-id-value( $id-dwarf-seen, position(), $dwarf-string );
                
                /* Add to $dwarf-saw-us so we can process below */
                if( $odloc == $new-loc && $dseen ) {
                    <seen>;
                }
            }
        }
        
        /* Check if processing is required... */
        if( count( $dwarf-saw-us/seen ) > 0 ) {
            /* set new room to room */
            expr adv:set-misc-value( $misc-id-new-room, $room );
            expr adv:write-message( 2 ); /* Little dwarf with big knife blocks your way... */
            <func:result select="$room">;
        }
        else {
            <func:result select="$new-loc">;
        }
    }
    else {
        <func:result select="$new-loc">;
    }
}


/*
 * adv:write-debug-message - Display a message to the screen if running in debug
 * mode.
 *
 * Arguments:
 *     $function - [Required] - The calling function's name
 *     $message* - [Optional] - One or more messages that will all be appended together
 *     into a single string
 */
<func:function name="adv:write-debug-message"> {
    param $function;
    param $message1;
    param $message2;
    param $message3;
    param $message4;
    param $message5;
    param $message6;
    param $message7;
    param $message8;

    if( $mode == $debug ) {
        expr jcs:output( "DEBUG: [", $function, "] ", $message1, $message2, $message3, $message4, $message5, $message6, $message7, $message8 );
    }
}

/*
 * adv:write-message - Displays the message referenced by the number onto the
 * screen.
 *
 * Arguments:
 *     $message-id - [Required] - The message number to display
 */
<func:function name="adv:write-message"> {
    param $message-id;

    expr jcs:output(" \n", $database/messages/message[number == $message-id]/text );
}


/*
 * adv:write-raw-message - Display appended strings to the screen
 *
 * Arguments:
 *     $message* - [Optional] - One or more messages that will all be appended together
 *     into a single string
 */
<func:function name="adv:write-raw-message"> {
    param $message1;
    param $message2;
    param $message3;
    param $message4;
    param $message5;

    expr jcs:output(" \n", $message1, $message2, $message3, $message4, $message5 );
}


/*
 * adv:write-object-message - Display the message from the object data structure
 *
 * Arguments:
 *     $object-number - [Required] - The object to display
 *     $message-number - [Required] - The text index to display
 */
<func:function name="adv:write-object-message"> {
    param $object-number;
    param $message-number;
    
    var $message = $database/objects/object[number == $object-number]/text[ position() == $message-number ];
    expr jcs:output( $message );
}


/*
 * adv:init-game - Initializes the game variables to their starting values
 */ 
<func:function name="adv:init-game"> {

    /* Initialize object locations */
    var $object-string-1 = adv:build-starting-string( $string-id-object-location );
    var $object-string-1-name = adv:build-instance-name( $string-id-object-location );
    expr adv:write-string( $object-string-1-name, $object-string-1 );
    
    /* Initialize object status */
    var $object-status-string-1 = adv:build-starting-string( $string-id-object-status );
    var $object-status-string-1-name = adv:build-instance-name( $string-id-object-status );
    expr adv:write-string( $object-status-string-1-name, $object-status-string-1 );
        
    /* Initialize Misc Variables */
    var $misc-string-1 = adv:build-starting-string( $string-id-misc );
    var $misc-string-1-name = adv:build-instance-name( $string-id-misc );
    expr adv:write-string( $misc-string-1-name, $misc-string-1 );

    /* Initialize Dwarf Variables */
    var $dwarf-string = adv:build-starting-string( $string-id-dwarves );
    var $dwarf-string-name = adv:build-instance-name( $string-id-dwarves );
    expr adv:write-string( $dwarf-string-name, $dwarf-string );
    
    /* Initialize Visited */
    var $visited-string-1 = adv:build-starting-string( $string-id-visited );
    var $visited-string-1-name = adv:build-instance-name( $string-id-visited );
    expr adv:write-string( $visited-string-1-name, $visited-string-1 );

    /* If adding here...add to save and restore functions as well... */    
}


/*
 * adv:build-starting-string - Builds a particular starting string based on the
 * starting values.
 *
 * Arguments:
 *     $string-id - The string number to build
 *
 * Returns: string - the built string
 */ 
<func:function name="adv:build-starting-string"> {
    param $string-id;

    var $string = {
        /* Object Locations */
        if( $string-id == $string-id-object-location ) {
            for-each( $starting-values/places/place ) {
                expr location;
                if( last() > position() ) {
                    expr ",";
                }
            }
        }
        /* Object status */
        else if( $string-id == $string-id-object-status ) {
            /* Loop through objects */
            for-each( $database/objects/object ) {
                /* 50 and above are treasures and should be initialized to 0xFF */
                if( number == $bottle ) { /* Initialize $bottle to 1 so that it is empty */
                    expr "1";
                }
                else if( number >= $treasure-start ) {
                    expr "255";
                }
                else {
                    expr "0";
                }
                
                if( last() > position()  ) {
                    expr ",";
                }
            }
        }
        /* Visited */
        else if( $string-id == $string-id-visited ) {
            for-each( $database/rooms/room[ $visited-max >= position() ] ) {
                expr "0"; /* Neither room is visited */
                if( position() != last() ) {
                    expr ",";
                }
            }
        }
        else if( $string-id == $string-id-dwarves ) {
            for-each( $starting-values/dwarf-locations/dwarf ) {
                expr location;
                expr ",";
            }
            /* Old Locations are all zero */
            for-each( $starting-values/dwarf-locations/dwarf ) {
                expr 0;
                expr ",";
            }
            /* Seen is all zero */
            for-each( $starting-values/dwarf-locations/dwarf ) {
                expr 0;
                if( last() > position()  ) {
                    expr ",";
                }
            }
        }
        /* Misc */
        else if( $string-id == $string-id-misc ) {
            for-each( $starting-values/misc/variable ) {
                expr value;
                if( last() > position()  ) {
                    expr ",";
                }
            }
        }
    }
    <func:result select="$string">;
}


/*
 * adv:increment-misc-value - Adds the $increment to a misc value in the MIB
 *
 * Arguments:
 *     $id - [Required] - The misc value to modify
 *     $increment - [Optional] - Can be specified if +1 is not desired
 */ 
<func:function name="adv:increment-misc-value"> {
    param $id;
    param $increment = 1;
    
    var $current = adv:get-misc-value( $id );
    
    expr adv:set-misc-value( $id, $current + $increment );
}


/*
 * adv:set-misc-value - Changes the misc value in the Utility MIB
 *
 * Arguments:
 *     $id - [Required] - The misc value to modify
 *     $value - [Required] - The new value
 */ 
<func:function name="adv:set-misc-value"> {
    param $index;
    param $value;

    var $string-id = $string-id-misc;
    
    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id );

    /* Write it using the utility function */
    /* If boolean, store as a number */
    if( exsl:object-type( $value ) == "boolean" ) {
        expr adv:write-indexed-string-value( $name, $index, number( $value ) );
    }
    else {
        expr adv:write-indexed-string-value( $name, $index, $value );
    }
}


/*
 * adv:get-misc-value - Retrieves the desired value from the MIB string
 *
 * Arguments:
 *     $index - [Required] - The misc value to retrieve
 *     $misc-string - [Optional] - misc MIB data string
 *
 * Returns: string or boolean - the misc value
 */ 
<func:function name="adv:get-misc-value"> {
    param $index;
    param $misc-string; /* pass to minimize MIB usage */
    
    /* Get the string */
    var $string-id = $string-id-misc;
    
    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id );

    /* Retrieve it from the indexed string in the Mib */
    var $value = adv:read-indexed-string-value( $name, $index, $misc-string ); 

    /* Return the desired value... */
    /* if( $value == "0" then return it as a boolean false so we can use it in conditional expressions */
    if( $value == "0" ) {
        <func:result select = "false()">;
    }
    else {
        <func:result select = "$value">;
    }
}


/*
 * adv:get-object-status - Retrieves the object's status from the MIB string
 *
 * Arguments:
 *     $index - [Required] - The object to retrieve
 *     $object-status-string - [Optional] - status MIB data string
 *
 * Returns: string - the object status
 */ 
<func:function name="adv:get-object-status"> {
    param $index;
    param $object-status-string = ""; /* Pass to minimize MIB usage */

    /* Get the string */
    var $string-id = $string-id-object-status;
    
    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id );

    /* Retrieve it from the indexed string in the Mib */
    var $value = adv:read-indexed-string-value( $name, $index, $object-status-string ); 

    /* Return the desired value... */
    <func:result select="$value">;
}


/*
 * adv:set-object-status - Changes the object status in the Utility MIB
 *
 * Arguments:
 *     $index - [Required] - The object status to modify
 *     $status - [Required] - The new value
 */ 
<func:function name="adv:set-object-status"> {
    param $index;
    param $status;

    /* Get the string */
    var $string-id = $string-id-object-status;
    
    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id );

    /* Write it using the utility function */
    expr adv:write-indexed-string-value( $name, $index, $status ); 
}


/*
 * adv:increment-object-status - Adds the $increment to an object status in the MIB
 *
 * Arguments:
 *     $object-number - [Required] - The object status to modify
 *     $increment - [Optional] - Can be specified if +1 is not desired
 */ 
<func:function name="adv:increment-object-status"> {
    param $object-number;
    param $increment = 1;

    var $current = adv:get-object-status( $object-number );
    expr adv:set-object-status( $object-number, $current + $increment );
}


/*
 * adv:get-object-location - Retrieves the object's location from the MIB string
 *
 * Arguments:
 *     $index - [Required] - The object to retrieve
 *     $object-location-string - [Optional] - status MIB data string
 *
 * Returns: string - the object location
 */ 
<func:function name="adv:get-object-location"> {
    param $index;
    param $object-location-string = ""; /* Can be included to minimize the amount of MIB usage */

    /* Get the string */
    var $string-id = $string-id-object-location;
    
    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id );

    /* Retrieve it from the indexed string in the MIB (or passed as param) */
    var $value = adv:read-indexed-string-value( $name, $index, $object-location-string ); 

    /* Return the desired value... */
    <func:result select="$value">;
}


/*
 * adv:set-object-location - Changes the object location in the Utility MIB
 *
 * Arguments:
 *     $index - [Required] - The object location to modify
 *     $room-number - [Required] - The new value
 */ 
<func:function name="adv:set-object-location"> {
    param $index;
    param $room-number;

    /* Get the string */
    var $string-id = $string-id-object-location;
    
    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id );

    /* Write it using the utility function */
    expr adv:write-indexed-string-value( $name, $index, $room-number ); 
}


/*
 * adv:has-visited-room - Determines if user has visited the room before
 *
 * Arguments:
 *     $room-number - [Required] - The room to check
 *
 * Returns: boolean - true if the room has been visited, false otherwise
 */ 
<func:function name="adv:has-visited-room"> {
    param $room-number;

    /* Get the string */
    var $string-id = $string-id-visited;
    
    /* Determine the actual index */
    var $index = {
        if( $visited-max >= $room-number ) {
            expr $room-number;
        }
        else {
            expr $room-number - $visited-max;
        }
    }
    
    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id );

    /* Retrieve it from the indexed string in the Mib */
    var $value = adv:read-indexed-string-value( $name, $index );
    
    /* Determine the value based on the room-number */
    var $result = {
        if( $visited-max >= $room-number ) {
            expr $value mod 10;
        }
        else {
            expr floor( $value div 10 );
        }
    }
    
    /* Return the desired value... */
    <func:result select="boolean( number( $result ) )">;
}


/*
 * adv:set-visited-room - Changes the visited value in the Utility MIB
 *
 * Arguments:
 *     $room-number - [Required] - The room to modify
 *     $visited - [Required] - Has visited?  true or false
 */ 
<func:function name="adv:set-visited-room"> {
    param $room-number;
    param $visited;

    /* Get the string */
    var $string-id = $string-id-visited;
    
    /* Determine the actual index */
    var $index = {
        if( $visited-max >= $room-number ) {
            expr $room-number;
        }
        else {
            expr $room-number - $visited-max;
        }
    }

    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id );

    /* Get current string */
    var $string = adv:read-string( $name );
    
    /* Chop it into parts - use jcs:split because it returns zero size chunks unlike str:tokenize */
    var $parts = jcs:split( ",", $string );
    
    /* Create new string */
    var $new-string = {
        for-each( $parts ) {
            if( position() == $index ) {
                /* Determine new value...*/
                var $current-value = .;
                var $high-number = {
                    if( $visited-max >= $room-number ) {
                        expr floor( $current-value div 10 ) * 10;
                    }
                    else {
                        if( $visited ) {
                            expr 10;
                        }
                        else {
                            expr 0;
                        }
                    }
                }
                var $low-number = {
                    if( $visited-max >= $room-number ) {
                        if( $visited ) {
                            expr 1;
                        }
                        else {
                            expr 0;
                        }
                    }
                    else {
                        expr $current-value mod 10;
                    }
                }
                expr $high-number + $low-number;
            }
            else {
                /* Write current value...*/
                expr .;
            }
            /* Add comma if not the last one... */
            if( position() != last() ) {
                expr ",";
            }
        }
    }
    
    /* Write new string to MIB unless it is blank, never write a blank indexed string, that is an error */
    if( string-length( $new-string ) == 0 ) {
        expr jcs:output( "ERROR: set-room-visited is trying to write a blank string." );
    }
    else {
        expr adv:write-string( $name, $new-string );
    }
}


/*
 * adv:get-string-by-id - Retrieves a specific indexed string from the MIB
 *
 * Arguments:
 *     $string-id - [Required] - The string number to retrieve
 *
 * Returns: string - the indexed string from the MIB
 */
<func:function name="adv:get-string-by-id"> {
    param $string-id;
    param $mode = $current; /* Either current or past */
    
    var $name = adv:build-instance-name( $string-id, $mode );
    
    var $result = adv:read-string( $name );

    <func:result select="$result">;
}


/*
 * adv:get-dwarf-id-value - Retrieves a dwarf value from the dwarf string
 *
 * Arguments:
 *     $id - [Required] - The data value we want
 *     $dwarf-id - [Required] - The dwarf we are want data on
 *     $dwarf-string - [Optional] - Dwarf data string from the MIB
 *
 * Returns: string - the value from the MIB
 */
<func:function name="adv:get-dwarf-id-value"> {
    param $id;
    param $dwarf-id;
    param $dwarf-string = "";

    /* Figure out the actual index */
    var $index = $dwarf-adjust-index/var[value == $id]/adjust + $dwarf-id;
    
    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id-dwarves );

    /* Get the value */
    var $value = adv:read-indexed-string-value( $name, $index, $dwarf-string ); 

    <func:result select="$value">;    
}


/*
 * adv:set-dwarf-id-value - Sets a dwarf value in the MIB
 *
 * Arguments:
 *     $id - [Required] - The data value we want to set
 *     $dwarf-id - [Required] - The dwarf we are want to set data for
 *     $value - [Required] - The new data value
 */
<func:function name="adv:set-dwarf-id-value"> {
    param $id;
    param $dwarf-id;
    param $value;

    /* Figure out the actual index */
    var $index = $dwarf-adjust-index/var[value == $id]/adjust + $dwarf-id;

    /* Get the instance name */
    var $name = adv:build-instance-name( $string-id-dwarves );

    /* Update the indexed value */
    expr adv:write-indexed-string-value( $name, $index, $value );
}


/*
 * adv:write-indexed-string-value - Writes a value at a particular index of an
 * indexed string and records it to the Utility MIB.
 *
 * Arguments:
 *     $name - [Required] - The Utility MIB instance name
 *     $index - [Required] - The index to modify
 *     $value - [Required] - The value to set
 */
<func:function name="adv:write-indexed-string-value"> {
    param $name;
    param $index;
    param $value;

    /* Nuke any commas from the value so it doesn't mess up the index...*/
    var $new-value = translate( $value, ",", "" );
    
    /* Get current string */
    var $string = adv:read-string( $name );
    
    /* Chop it into parts - use jcs:split because it returns zero size chunks unlike str:tokenize */
    var $parts = jcs:split( ",", $string );
    
    
    /* Create new string */
    var $new-string = {
        for-each( $parts ) {
            if( position() == $index ) {
                /* Write new value...*/
                expr $new-value; 
            }
            else {
                /* Write current value...*/
                expr .;
            }
            /* Add comma if not the last one... */
            if( position() != last() ) {
                expr ",";
            }
        }
    }
    
    /* Write new string to MIB unless it is blank, never write a blank indexed string, that is an error */
    if( string-length( $new-string ) == 0 ) {
        expr jcs:output( "Error: write-indexed-string-value is trying to write a blank string." );
    }
    else {
        expr adv:write-string( $name, $new-string );
    }
}


/*
 * adv:read-indexed-string-value - Reads a value at a particular index of an
 * indexed string from the Utility MIB
 *
 * Arguments:
 *     $name - [Required] - The Utility MIB instance name
 *     $index - [Required] - The index to retrieve
 *     $passed-string - [Optional] - The MIB data string
 *
 * Returns: number or string - The desired index value
 */
<func:function name="adv:read-indexed-string-value"> {
    param $name;
    param $index;
    param $passed-string = "";
    
    var $string = {
        if( $passed-string == "" ) {
            expr adv:read-string( $name );
        }
        else {
            expr $passed-string;
        }
    }
    
    /* Chop it into parts - use jcs:split so that blanks are returned right */
    var $parts = jcs:split( ",", $string );
    
    var $result = string($parts[ number( $index ) ]);
    
    /* Return any number results as a number so that they can be converted to a boolean, otherwise they would be strings and
       would always be true... */
       
    if( string( number( $result ) ) != "NaN" ) {
        <func:result select="number($result)">;
    }
    else {
        <func:result select="$result">;
    }
}


/*
 * adv:write-string - Writes a string to the Utility MIB
 *
 * Arguments:
 *     $name - [Required] - The Utility MIB instance name
 *     $string - [Required] - The string to write
 */
<func:function name="adv:write-string"> {
    param $name;
    param $string;
    
    /* Name should always have characters, if not then there was an error */
    if( string( number( $name ) ) != "NaN" ) {
        expr jcs:output("ERROR: Trying to send string id to adv:write-string: ", $name );
    }
    
    if( string-length( $string ) > 256 ) {
        expr jcs:output("ERROR: Trying to write long string to ", $name );
    }
    
    /* Obfuscate it */
    var $new-string = translate( $string, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" );
    
    var $rpc = {
        <request-snmp-utility-mib-set> {
            <instance> $name;
            <object-type> "string";
            <object-value> $new-string;
        }
    }
    var $results = jcs:execute( $connection, $rpc );
}

/*
 * adv:read-string - Writes a string to the Utility MIB.  Converts instance name
 * into OID format since that is what <get-snmp-object> requires.
 *
 * Arguments:
 *     $name - [Required] - The Utility MIB instance name
 *
 * Returns: string - the string from the Utility MIB
 */
<func:function name="adv:read-string"> {
    param $name;

    /* Name should always have characters, if not then there was an error */
    if( string( number( $name ) ) != "NaN" ) {
        expr jcs:output("ERROR: Trying to send string id to adv:read-string: ", $name );
    }

    var $oid-name = adv:build-oid-name( $name, "string" );
    
    var $rpc = {
        <get-snmp-object> {
            <snmp-object-name> $oid-name;
        }
    }
    var $object = jcs:execute( $connection, $rpc );
    
    /* Unobfuscate it */
    var $new-string = translate( $object/snmp-object/object-value, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" );
    
    <func:result select = "$new-string">;
}


/*
 * adv:build-instance-name - Creates a valid Adventure Utility MIB instance name
 * based on the string-id and whether it is the current game or not.
 * The format will be: AD!<C|P>#<$string-id>@<username>.  C = Current, P = Past
 *
 * Arguments:
 *     $string-id - [Required] - The string to create the instance for
 *     $type - [Optional] - Can be set to past, or it defaults to current
 *
 * Returns: string - the Utility MIB instane name.
 */
<func:function name="adv:build-instance-name"> {
    param $string-id;
    param $type = $current;
    
    var $result = {
        expr $lead-string _ $type-tag;
        if( $type == $current ) {
            expr $current;
        }
        else {
            expr $past;
        }
        expr $id-tag _ $string-id _ $user-tag _ $user;
    }
    <func:result select="$result">;
}


/*
 * adv:build-oid-name - Converts a Utility MIB instance name into OID format as 
 * required by <get-snmp-object>.  (Note, it probably won't work with " in the 
 * name - if that is even a valid instance name anyway).
 *
 * Arguments:
 *     $name - [Required] - The instance name
 *     $type - [Required] - The data type, either string, counter, counter64,
 *     integer, or unsigned-integer.
 *
 * Returns: string OID name
 */
<func:function name="adv:build-oid-name"> {
    param $name;
    param $type;    

    /* Build the type portion of the name */
    var $string-portion = {
        if( $type == "string" ) {
            expr "jnxUtilStringValue";
        }
        else if( $type == "counter" ) {
            expr "jnxUtilCounter32Value";
        }
        else if( $type == "integer" ) {
            expr "jnxUtilIntegerValue";
        }
        else if( $type == "counter64" ) {
            expr "jnxUtilCounter64Value";
        }
        else if( $type == "counter" ) {
            expr "jnxUtilUintValue";
        }
    }

    /* Split the name into characters */    
    var $characters = str:tokenize( $name, "" );
    
    var $number-portion = {
        for-each( $characters ) {
    
            /* Convert the characters to their ASCII code equivalent */
            var $char = .;
            var $ascii-char = $ascii/char[ sym == $char ];
            expr "." _ $ascii-char/num;
        }
    }
    
    /* Return the full string */
    var $result = $string-portion _ $number-portion;
    <func:result select = "$result">;
}


/*
 * adv:to-lower-case - Converts the provided string into lower case
 *
 * Arguments:
 *     $string - [Required] - The string to convert
 *
 * Returns: string - the provided string, converted to lower case
 */
<func:function name = "adv:to-lower-case"> {
    param $string = "";
    
    var $result = translate( $string, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz" );
    <func:result select = "$result">;
}


/*
 * adv:check-version - Checks if JUNOS version is at the minimum version or above, 
 * displays the failure message and exits if it is not.
 *
 * Arguments:
 *     $minimum-version - [Required] - Minimum version string - like 9.6
 *     $failure-message - [Required] - Failure message for insufficient version
 */
<func:function name="adv:check-version"> {
    param $minimum-version;
    param $failure-message;

    var $kern-osrelease = jcs:sysctl("kern.osrelease", "s");

    var $version-set = jcs:split("[IRSB-]", $kern-osrelease );

    var $version = $version-set[1];
    
    if( $minimum-version > $version ) {
        <xsl:message terminate="yes"> $failure-message;
    }
}


/*
 * This is a listing of all the visible ascii characters.  It is used to both
 * convert instance names into OID format, and also to detect if any control
 * characters are present in the input strings.  The xml:space="preserve" attribute
 * is used on the whitespace nodes because XML/XSLT would strip the whitespace by
 * default, making it worthless.
 *
 * Note that because of PR 468890 that number 34 is actually the two character string
 * "\"" rather than a single escaped quote character.
 */
var $ascii := {
<char> { <num> 32; <sym xml:space="preserve"> " "; }<char> { <num> 33; <sym> "!"; }<char> { <num> 34; <sym> "\""; }<char> { <num> 35; <sym> "#"; }<char> { <num> 36; <sym> "$"; }
<char> { <num> 37; <sym> "%"; }<char> { <num> 38; <sym> "&"; }<char> { <num> 39; <sym> "'"; }<char> { <num> 40; <sym> "("; }<char> { <num> 41; <sym> ")"; }
<char> { <num> 42; <sym> "*"; }<char> { <num> 43; <sym> "+"; }<char> { <num> 44; <sym> ","; }<char> { <num> 45; <sym> "-"; }<char> { <num> 46; <sym> "."; }
<char> { <num> 47; <sym> "/"; }<char> { <num> 48; <sym> "0"; }<char> { <num> 49; <sym> "1"; }<char> { <num> 50; <sym> "2"; }<char> { <num> 51; <sym> "3"; }
<char> { <num> 52; <sym> "4"; }<char> { <num> 53; <sym> "5"; }<char> { <num> 54; <sym> "6"; }<char> { <num> 55; <sym> "7"; }<char> { <num> 56; <sym> "8"; }
<char> { <num> 57; <sym> "9"; }<char> { <num> 58; <sym> ":"; }<char> { <num> 59; <sym> ";"; }<char> { <num> 60; <sym> "<"; }<char> { <num> 61; <sym> "="; } /* >" */
<char> { <num> 62; <sym> ">"; }<char> { <num> 63; <sym> "?"; }<char> { <num> 64; <sym> "@"; }<char> { <num> 65; <sym> "A"; }<char> { <num> 66; <sym> "B"; }
<char> { <num> 67; <sym> "C"; }<char> { <num> 68; <sym> "D"; }<char> { <num> 69; <sym> "E"; }<char> { <num> 70; <sym> "F"; }<char> { <num> 71; <sym> "G"; }
<char> { <num> 72; <sym> "H"; }<char> { <num> 73; <sym> "I"; }<char> { <num> 74; <sym> "J"; }<char> { <num> 75; <sym> "K"; }<char> { <num> 76; <sym> "L"; }
<char> { <num> 77; <sym> "M"; }<char> { <num> 78; <sym> "N"; }<char> { <num> 79; <sym> "O"; }<char> { <num> 80; <sym> "P"; }<char> { <num> 81; <sym> "Q"; }
<char> { <num> 82; <sym> "R"; }<char> { <num> 83; <sym> "S"; }<char> { <num> 84; <sym> "T"; }<char> { <num> 85; <sym> "U"; }<char> { <num> 86; <sym> "V"; }
<char> { <num> 87; <sym> "W"; }<char> { <num> 88; <sym> "X"; }<char> { <num> 89; <sym> "Y"; }<char> { <num> 90; <sym> "Z"; }<char> { <num> 91; <sym> "["; }
<char> { <num> 92; <sym> "\\"; }<char> { <num> 93; <sym> "]"; }<char> { <num> 94; <sym> "^"; }<char> { <num> 95; <sym> "_"; }<char> { <num> 96; <sym> "`"; }
<char> { <num> 97; <sym> "a"; }<char> { <num> 98; <sym> "b"; }<char> { <num> 99; <sym> "c"; }<char> { <num> 100; <sym> "d"; }<char> { <num> 101; <sym> "e"; }
<char> { <num> 102; <sym> "f"; }<char> { <num> 103; <sym> "g"; }<char> { <num> 104; <sym> "h"; }<char> { <num> 105; <sym> "i"; }<char> { <num> 106; <sym> "j"; }
<char> { <num> 107; <sym> "k"; }<char> { <num> 108; <sym> "l"; }<char> { <num> 109; <sym> "m"; }<char> { <num> 110; <sym> "n"; }<char> { <num> 111; <sym> "o"; }
<char> { <num> 112; <sym> "p"; }<char> { <num> 113; <sym> "q"; }<char> { <num> 114; <sym> "r"; }<char> { <num> 115; <sym> "s"; }<char> { <num> 116; <sym> "t"; }
<char> { <num> 117; <sym> "u"; }<char> { <num> 118; <sym> "v"; }<char> { <num> 119; <sym> "w"; }<char> { <num> 120; <sym> "x"; }<char> { <num> 121; <sym> "y"; }
<char> { <num> 122; <sym> "z"; }<char> { <num> 123; <sym> "{"; }<char> { <num> 124; <sym> "|"; }<char> { <num> 125; <sym> "}"; }<char> { <num> 126; <sym> "~"; }
}


/*
 * This XML data structure contains the starting values for the dwarfs, object
 * locations, and misc variables.
 */
var $starting-values := {
        <dwarf-locations> {
            <dwarf> {
                <number> 1;
                <location> 35; 
            }
            <dwarf> {
                <number> 2;
                <location> 19;
            }
            <dwarf> {
                <number> 3;
                <location> 27;
            }
            <dwarf> {
                <number> 4;
                <location> 33;
            }
            <dwarf> {
                <number> 5;
                <location> 44;
            }
            <dwarf> {
                <number> 6;
                <location> 64;
            }
            <dwarf> {
                <number> 7;
                <location> 114; 
            }
        }
        <places> {
            <place> {
                <object> 1;
                <location> 3;
            }
            <place> {
                <object> 2;
                <location> 3;
            }
            <place> {
                <object> $grate;
                <location> 8;
            }
            <place> {
                <object> 4;
                <location> 10;
            }
            <place> {
                <object> 5;
                <location> 11;
            }
            <place> {
                <object> 6;
                <location> 0;
            }
            <place> {
                <object> $steps;
                <location> 14;
            }
            <place> {
                <object> 8;
                <location> 13;
            }
            <place> {
                <object> $door;
                <location> 94;
            }
            <place> {
                <object> 10;
                <location> 96;
            }
            <place> {
                <object> $snake;
                <location> 19;
            }
            <place> {
                <object> $fissure;
                <location> 17;
            }
            <place> {
                <object> $tablet;
                <location> 101;
            }
            <place> {
                <object> 14;
                <location> 103;
            }
            <place> {
                <object> 15;
                <location> 0;
            }
            <place> {
                <object> 16;
                <location> 106;
            }
            <place> {
                <object> $dwarf;
                <location> 0;
            }
            <place> {
                <object> 18;
                <location> 0;
            }
            <place> {
                <object> 19;
                <location> 3;
            }
            <place> {
                <object> 20;
                <location> 3;
            }
            <place> {
                <object> 21;
                <location> 0;
            }
            <place> {
                <object> 22;
                <location> 0;
            }
            <place> {
                <object> $mirror;
                <location> 109;
            }
            <place> {
                <object> $plant;
                <location> 25;
            }
            <place> {
                <object> $plant-top;
                <location> 23;
            }
            <place> {
                <object> 26;
                <location> 111;
            }
            <place> {
                <object> $shadowy-figure;
                <location> 35;
            }
            <place> {
                <object> $axe;
                <location> 0;
            }
            <place> {
                <object> 29;
                <location> 97;
            }
            <place> {
                <object> 30;
                <location> 0;
            }
            <place> {
                <object> $dragon;
                <location> 119;
            }
            <place> {
                <object> $chasm; /* bridge */
                <location> 117;
            }
            <place> {
                <object> $troll;
                <location> 117;
            }
            <place> {
                <object> $troll-hidden;
                <location> 0;
            }
            <place> {
                <object> $bear;
                <location> 130;
            }
            <place> {
                <object> $message;
                <location> 0;
            }
            <place> {
                <object> 37;
                <location> 126;
            }
            <place> {
                <object> $vend;
                <location> 140;
            }
            <place> {
                <object> $batteries;
                <location> 0;
            }
            <place> {
                <object> 40;
                <location> 96;
            }
            <place> {
                <object> $satyr;
                <location> 2;
            }
            <place> {
                <object> $tome;
                <location> 65;
            }
            <place> {
                <object> $mib;
                <location> 0;
            }
            <place> {
                <object> 44;
                <location> 0;
            }
            <place> {
                <object> 45;
                <location> 0;
            }
            <place> {
                <object> 46;
                <location> 0;
            }
            <place> {
                <object> 47;
                <location> 0;
            }
            <place> {
                <object> 48;
                <location> 0;
            }
            <place> {
                <object> 49;
                <location> 0;
            }
            <place> {
                <object> 50;
                <location> 18;
            }
            <place> {
                <object> 51;
                <location> 27;
            }
            <place> {
                <object> 52;
                <location> 28;
            }
            <place> {
                <object> 53;
                <location> 29;
            }
            <place> {
                <object> 54;
                <location> 30;
            }
            <place> {
                <object> $chest;
                <location> 0; /* Is not present at first */
            }
            <place> {
                <object> 56;
                <location> 92;
            }
            <place> {
                <object> 57;
                <location> 95;
            }
            <place> {
                <object> $vase;
                <location> 97;
            }
            <place> {
                <object> 59;
                <location> 100;
            }
            <place> {
                <object> 60;
                <location> 101;
            }
            <place> {
                <object> 61;
                <location> 0;
            }
            <place> {
                <object> $rug;
                <location> 119;
            }
            <place> {
                <object> $spices;
                <location> 127;
            }
            <place> {
                <object> 64;
                <location> 130;
            }
        }
        <misc> {
            <variable> {
                <id> $misc-id-mem-warn;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-gaveup;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-wzdark;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-closed;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-closing;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-holding;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-dflag;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-limit;
                <value> 330;
            }
            <variable> {
                <id> $misc-id-tally;
                <value> 15;
            }
            <variable> {
                <id> $misc-id-tally2;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-new-room;
                <value> 1; 
            }
            <variable> {
                <id> $misc-id-room;
                <value> 0; /* So it will display everything at start up */
            }
            <variable> {
                <id> $misc-id-old-room;
                <value> 1;
            }
            <variable> {
                <id> $misc-id-old-room2;
                <value> 1;
            }
            <variable> {
                <id> $misc-id-knfloc;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-dkill;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-clock;
                <value> 30;
            }
            <variable> {
                <id> $misc-id-clock2;
                <value> 20;
            }
            <variable> {
                <id> $misc-id-panic;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-bonus;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-numdie;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-lmwarn;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-foobar;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-scratch-k;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-scratch-t;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-motion;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-verb;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-object;
                <value> 0;
            }
            <variable> {
                <id> $misc-id-word1;
                <value> "";
            }
            <variable> {
                <id> $misc-id-word2;
                <value> "";
            }
        }
}


/* 
 * This is the main Adventure XML database.  It contains all the information about
 * the rooms, the words, the messages, the objects, and the travel destinations.
 */
var $database := {
        <rooms> {
            <room> {
                <number> 1;
                <name> "End of road";
                <short-text> "You're at end of road again.";
                <long-text> "You are standing at the end of a road before a small brick\n" _
                            "building.  Around you is a forest.  A small stream flows out\n" _
                            "of the building and down a gully.";
                <water>;
                <light>;
            }
            <room> {
                <number> 2;
                <name> "Hill in road";
                <short-text> "You're at hill in road.";
                <long-text> "You have walked up a hill, still in the forest.  The road\n" _
                            "slopes back down the other side of the hill.  There is a\n" _
                            "building in the distance.";
                <light>;
            }
            <room> {
                <number> 3;
                <name> "Building";
                <short-text> "You're inside building.";
                <long-text> "You are inside a building, a well house for a large spring.";
                <water>;
                <light>;
            }
            <room> {
                <number> 4;
                <name> "Forest valley";
                <short-text> "You're in valley.";
                <long-text> "You are in a valley in the forest beside a stream tumbling\n" _
                            "along a rocky bed.";
                <water>;
                <light>;
            }
            <room> {
                <number> 5;
                <short-text> "You're in forest.";
                <long-text> "You are in open forest, with a deep valley to one side.";
                <light>;
            }
            <room> {
                <number> 6;
                <short-text> "You're in forest.";
                <long-text> "You are in open forest near both a valley and a road.";
                <light>;
            }
            <room> {
                <number> 7;
                <name> "Streambed slit";
                <short-text> "You're at slit in streambed.";
                <long-text> "At your feet all the water of the stream splashes into a\n" _
                            "2-inch slit in the rock.  Downstream the streambed is bare rock.";
                <water>;
                <light>;
            }
            <room> {
                <number> 8;
                <name> "Outside grate";
                <short-text> "You're outside grate.";
                <long-text> "You are in a 20-foot depression floored with bare dirt.  Set\n" _
                            "into the dirt is a strong steel grate mounted in concrete.\n" _
                            "A dry streambed leads into the depression.";
                <hint-c>;
                <light>;
            }
            <room> {
                <number> 9;
                <name> "Below grate";
                <short-text> "You're below the grate.";
                <long-text> "You are in a small chamber beneath a 3x3 steel grate to the\n" _
                            "surface.  A low crawl over cobbles leads inward to the West.";
                <light>;
            }
            <room> {
                <number> 10;
                <name> "Cobble crawl";
                <short-text> "You're in cobble crawl.";
                <long-text> "You are crawling over cobbles in a low passage.  There is a\n" _
                            "dim light at the east end of the passage.";
                <light>;
            }
            <room> {
                <number> 11;
                <name> "Debris room";
                <short-text> "You're in debris room.";
                <long-text> "You are in a debris room filled with stuff washed in from the\n" _
                            "surface.  A low wide passage with cobbles becomes plugged\n" _
                            "with mud and debris here, but an awkward canyon leads\n" _
                            "upward and west.  A note on the wall says:\n" _
                            "       Magic Word 'XYZZY'";
            }
            <room> {
                <number> 12;
                <short-text> "You are in an awkward sloping east/west canyon.";
                <long-text> "You are in an awkward sloping east/west canyon.";
            }
            <room> {
                <number> 13;
                <name> "Bird chamber";
                <short-text> "You're in bird chamber.";
                <long-text> "You are in a splendid chamber thirty feet high.  The walls\n" _
                            "are frozen rivers of orange stone.  An awkward canyon and a\n" _
                            "good passage exit from east and west sides of the chamber.";
                <hint-b>;
            }
            <room> {
                <number> 14;
                <name> "Top of pit";
                <short-text> "You're at top of small pit.";
                <long-text> "At your feet is a small pit breathing traces of white mist.\n" _
                            "An east passage ends here except for a small crack leading\n" _
                            "on.";
            }
            <room> {
                <number> 15;
                <name> "Hall of mists";
                <short-text> "You're in hall of mists.";
                <long-text> "You are at one end of a vast hall stretching forward out of\n" _
                            "sight to the west.  There are openings to either side.\n" _
                            "Nearby, a wide stone staircase leads downward.  The hall\n" _
                            "is filled with wisps of white mist swaying to and fro\n" _
                            "almost as if alive.  A cold wind blows up the staircase.\n" _
                            "There is a passage at the top of a dome behind you.";
            }
            <room> {
                <number> 16;
                <short-text> "The crack is far too small for you to follow.";
                <long-text> "The crack is far too small for you to follow.";
                <forced-move>;
            }
            <room> {
                <number> 17;
                <name> "East bank of fissure";
                <short-text> "You're on east bank of fissure.";
                <long-text> "You are on the east bank of a fissure slicing clear across\n" _
                            "the hall.  The mist is quite thick here, and the fissure\n" _
                            "is too wide to jump.";
            }
            <room> {
                <number> 18;
                <name> "Gold nugget room";
                <short-text> "You're in gold nugget room.";
                <long-text> "This is a low room with a crude note on the wall.  The\n" _
                            "note says:\n" _
                            "       You won't get it up the steps.";
            }
            <room> {
                <number> 19;
                <name> "Hall of the mountain king";
                <short-text> "You're in hall of the mountain king.";
                <long-text> "You are in the hall of the mountain king, with passages\n" _
                            "off in all directions.";
                <hint-s>;
            }
            <room> {
                <number> 20;
                <short-text> "You are the the bottom of the pit with a broken neck.";
                <long-text> "You are at the bottom of the pit with a broken neck.";
                <forced-move>;
            }
            <room> {
                <number> 21;
                <short-text> "You didn't make it.";
                <long-text> "You didn't make it.";
                <forced-move>;
            }
            <room> {
                <number> 22;
                <short-text> "The dome is unclimbable.";
                <long-text> "The dome is unclimbable.";
                <forced-move>;
            }
            <room> {
                <number> 23;
                <name> "West end of two-pit room";
                <short-text> "You're at west end of two-pit room.";
                <long-text> "You are at the west end of the two-pit room.  There is a\n" _
                            "large hole in the wall above the pit at this end of the\n" _
                            "room.";
            }
            <room> {
                <number> 24;
                <name> "East pit";
                <short-text> "You're in east pit.";
                <long-text> "You are at the bottom of the eastern pit in the two-pit\n" _
                            "room.  There is a small pool of oil in one corner of the\n" _
                            "pit.";
                <oil>;
            }
            <room> {
                <number> 25;
                <name> "West pit";
                <short-text> "You're in west pit.";
                <long-text> "You are at the bottom of the western pit in the tow-pit room.\n" _
                            "There is a large hole in the wall about 25 feet above you.";
            }
            <room> {
                <number> 26;
                <short-text> "You clamber up the plant and scurry through the hole at the\n" _
                             "top.";
                <long-text> "You clamber up the plant and scurry through the hole at the\n" _
                            "top.";
                <forced-move>;
            }
            <room> {
                <number> 27;
                <short-text> "You are on the west side of the fissure in the hall of mists.";
                <long-text> "You are on the west side of the fissure in the hall of mists.";
            }
            <room> {
                <number> 28;
                <name> "Low N/S passage";
                <short-text> "You are in a low N/S passage at a hole in the floor.  The\n" _
                             "hole goes down to an E/W passage.";
                <long-text> "You are in a low N/S passage at a hole in the floor.  The\n" _
                            "hole goes down to an E/W passage.";
            }
            <room> {
                <number> 29;
                <short-text> "You are in the south side chamber.";
                <long-text> "You are in the south side chamber.";
            }
            <room> {
                <number> 30;
                <name> "West side chamber";
                <short-text> "You are in the west side chamber of the hall of the\n" _
                             "mountain king.  A passage continues west and up here.";
                <long-text> "You are in the west side chamber of the hall of the\n" _
                            "mountain king.  A passage continues west and up here.";
            }
            <room> {
                <number> 31;
                <short-text> "-$-";
                <long-text> "-$-";
                <forced-move>;
            }
            <room> {
                <number> 32;
                <short-text> "You can't get by the snake.";
                <long-text> "You can't get by the snake.";
                <forced-move>;
            }
            <room> {
                <number> 33;
                <name> "Y2";
                <short-text> "You're at 'Y2'.";
                <long-text> "You are in a large room, with a passage to the south,\n" _
                            "a passage to the west, and a wall of broken rock to the\n" _
                            "east.  There is a large 'Y2' on a rock in the room's\n" _
                            "center.";
            }
            <room> {
                <number> 34;
                <short-text> "You are in a jumble of rock, with cracks everywhere.";
                <long-text> "You are in a jumble of rock, with cracks everywhere.";
            }
            <room> {
                <number> 35;
                <name> "Window on pit";
                <short-text> "You're at window on pit.";
                <long-text> "You're at a low window overlooking a huge pit, which\n" _
                            "extends up out of sight.  A floor is indistinctly visible\n" _
                            "over 50 feet below.  Traces of white mist cover the floor\n" _
                            "of the pit, becoming thicker to the right.  Marks in the\n" _
                            "dust around the window would seem to indicate that\n" _
                            "someone has been here recently.  Directly across the pit\n" _
                            "from you and 25 feet away there is a similar window\n" _
                            "looking into a lighted room.  A shadowy figure can\n" _
                            "be seen there peering back at you.";
            }
            <room> {
                <number> 36;
                <name> "Dirty passage";
                <short-text> "You're in dirty passage.";
                <long-text> "You are in a dirty broken passage.  To the east is a\n" _
                            "crawl.  To the west is a large passage.  Above you is\n" _
                            "another passage.";
            }
            <room> {
                <number> 37;
                <name> "Brink of pit";
                <short-text> "You are on the brink of a small clean climbable pit.  A\n" _
                            "crawl leads west.";
                <long-text> "You are on the brink of a small clean climbable pit.  A\n" _
                            "crawl leads west.";
            }
            <room> {
                <number> 38;
                <name> "Bottom of small pit";
                <short-text> "You are in the bottom of a small pit with a little stream,\n" _
                             "which enters and exits through tiny slits.";
                <long-text> "You are in the bottom of a small pit with a little stream,\n" _
                            "which enters and exits through tiny slits.";
                <water>;
            }
            <room> {
                <number> 39;
                <name> "Dusty rock room";
                <short-text> "You're in dusty rock room.";
                <long-text> "You are in a large room full of dusty rocks.  There is a\n" _
                            "big hole in the floor.  There are cracks everywhere, and\n" _
                            "a passage leading east.";
            }
            <room> {
                <number> 40;
                <short-text> "You have crawled through a very low wide passage parallel\n" _
                             "to and north of the hall of mists.";
                <long-text> "You have crawled through a very low wide passage parallel\n" _
                            "to and north of the hall of mists.";
                <forced-move>;
            }
            <room> {
                <number> 41;
                <name> "West end of hall of mists";
                <short-text> "You're at west end of hall of mists.";
                <long-text> "You are at the west end of hall of mists.  A low wide crawl\n" _
                            "continues west and another goes north.  To the south is a\n" _
                            "little passage 6 feet off the floor.";
            }
            <room> {
                <number> 42;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 43;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 44;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 45;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 46;
                <short-text> "Dead end.";
                <long-text> "Dead end";
                <hint-m>;
                <no-pirate>;
            }
            <room> {
                <number> 47;
                <short-text> "Dead end.";
                <long-text> "Dead end";
                <hint-m>;
                <no-pirate>;
            }
            <room> {
                <number> 48;
                <short-text> "Dead end.";
                <long-text> "Dead end";
                <hint-m>;
                <no-pirate>;
            }
            <room> {
                <number> 49;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 50;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 51;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 52;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 53;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
                <no-pirate>;
            }
            <room> {
                <number> 54;
                <short-text> "Dead end.";
                <long-text> "Dead end";
                <hint-m>;
            }
            <room> {
                <number> 55;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
                <no-pirate>;
            }
            <room> {
                <number> 56;
                <short-text> "Dead end.";
                <long-text> "Dead end";
            }
            <room> {
                <number> 57;
                <name> "Brink of pit";
                <short-text> "You're at brink of pit.";
                <long-text> "You are on the brink of a thirty foot pit with a massive\n" _
                            "orange column down one wall.  You could climb down here but\n" _
                            "you could not get back up.  The maze continues at this level.";
                <no-pirate>;
            }
            <room> {
                <number> 58;
                <short-text> "Dead end.";
                <long-text> "Dead end";
            }
            <room> {
                <number> 59;
                <short-text> "You have crawled through a very low wide passage paralled\n" _
                             "to and north of the hall of mists.";
                <long-text> "You have crawled through a very low wide passage paralled\n" _
                            "to and north of the hall of mists.";
                <forced-move>;
            }
            <room> {
                <number> 60;
                <name> "East end of long hall";
                <short-text> "You're at east end of long hall.";
                <long-text> "You are at the east end of a very long hall apparently\n" _
                            "without side chambers.  To the east a low wide crawl\n" _
                            "slants up.  To the north a round two foot hole slants\n" _
                            "down.";
            }
            <room> {
                <number> 61;
                <name> "West end of long hall";
                <short-text> "You're at west end of long hall.";
                <long-text> "You are at the west end of a very long featureless hall.\n" _
                            "The hall joins up with a narrow north/south passage.";
            }
            <room> {
                <number> 62;
                <short-text> "You are at a crossover of a high N/S passage and a low\n" _
                             "E/W one.";
                <long-text> "You are at a crossover of a high N/S passage and a low\n" _
                            "E/W one.";
            }
            <room> {
                <number> 63;
                <short-text> "Dead end.";
                <long-text> "Dead end";
            }
            <room> {
                <number> 64;
                <name> "Complex junction";
                <short-text> "You're at complex junction.";
                <long-text> "You are at a complex junction.  A low hands and knees passage\n" _
                            "from the north joins a higher crawl from the east to make\n" _
                            "a walking passage going west.  There is also a large room\n" _
                            "above.  The air is damp here.";
            }
            <room> {
                <number> 65;
                <name> "Bedquilt";
                <short-text> "You are in bedquilt, a long east/west passage with holes\n" _
                             "everywhere.  To explore at random select north, south, up\n" _
                             "or down.";
                <long-text> "You are in bedquilt, a long east/west passage with holes\n" _
                            "everywhere.  To explore at random select north, south, up\n" _
                            "or down.";
            }
            <room> {
                <number> 66;
                <name> "Swiss cheese room";
                <short-text> "You're in swiss cheese room.";
                <long-text> "You are in a room whose walls resemble swiss cheese.\n" _
                            "Obvious passages go west, east, ne, and nw.  Part of the\n" _
                            "room is occupied by a large bedrock block.";
            }
            <room> {
                <number> 67;
                <name> "East end of two-pit room";
                <short-text> "You're at east end of two-pit room.";
                <long-text> "You are at the east end of the two-pit room.  The floor\n" _
                            "here is littered with thin rock slabs, which make it easy\n" _
                            "to descend the pits.  There is a path here bypassing\n" _
                            "the pits to connect passages from east and west.\n" _
                            "There are holes all over, but the only bit one is on\n" _
                            "the wall directly over the west pit where you can't\n" _
                            "get at it.";
            }
            <room> {
                <number> 68;
                <name> "Slab room";
                <short-text> "You're in slab room.";
                <long-text> "You are in a large low circular chamber whose floor is\n" _
                            "an immense slab fallen from the ceiling (slab room).\n" _
                            "East and west there once were large passages, but they\n" _
                            "are now filled with boulders.  Low small passages go\n" _
                            "north and south, and the south one quickly bends west\n" _
                            "around the boulders.";
            }
            <room> {
                <number> 69;
                <short-text> "You are in a secret N/S canyon above a large room.";
                <long-text> "You are in a secret N/S canyon above a large room.";
            }
            <room> {
                <number> 70;
                <short-text> "You are in a secret N/S canyon above a sizable passage.";
                <long-text> "You are in a secret N/S canyon above a sizable passage.";
            }
            <room> {
                <number> 71;
                <name> "Secret canyon junction";
                <short-text> "You're at junction of three secret canyons.";
                <long-text> "You are in a secret canyon at a junction of three canyons,\n" _
                            "bearing north, south and se.  The north one is as tall as\n" _
                            "the other two combined.";
            }
            <room> {
                <number> 72;
                <short-text> "You are in a large low room.  Crawls lead north, se, and sw.";
                <long-text> "You are in a large low room.  Crawls lead north, se, and sw.";
            }
            <room> {
                <number> 73;
                <short-text> "Dead end crawl.";
                <long-text> "Dead end crawl.";
            }
            <room> {
                <number> 74;
                <name> "Secret E/W canyon";
                <short-text> "You're at secret E/W canyon above tight canyon.";
                <long-text> "You are in a secret canyon which here runs E/W.  It crosses\n" _
                            "over a very tight canyon 15 feet below.  If you go down you\n" _
                            "may not be able to get back up.";
            }
            <room> {
                <number> 75;
                <short-text> "You are at a wide place in a very tight N/S canyon.";
                <long-text> "You are at a wide place in a very tight N/S canyon.";
            }
            <room> {
                <number> 76;
                <short-text> "The canyon here becomes too tight to go further south.";
                <long-text> "The canyon here becomes too tight to go further south.";
            }
            <room> {
                <number> 77;
                <name> "Tall E/W canyon";
                <short-text> "You are in a tall E/W canyon.  A low tight crawl goes 3\n" _
                             "feet north and seems to open up.";
                <long-text> "You are in a tall E/W canyon.  A low tight crawl goes 3\n" _
                            "feet north and seems to open up.";
            }
            <room> {
                <number> 78;
                <short-text> "The canyon runs into a mass of boulders -- dead end.";
                <long-text> "The canyon runs into a mass of boulders -- dead end.";
            }
            <room> {
                <number> 79;
                <short-text> "The stream flows out through a pair of 1 foot diameter\n" _
                             "sewer pipes.  It would be advisable to use the exit.";
                <long-text> "The stream flows out through a pair of 1 foot diameter\n" _
                            "sewer pipes.  It would be advisable to use the exit.";
                <forced-move>;
            }
            <room> {
                <number> 80;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 81;
                <short-text> "Dead end.";
                <long-text> "Dead end.";
                <hint-m>;
            }
            <room> {
                <number> 82;
                <short-text> "Dead end.";
                <long-text> "Dead end.";
                <hint-m>;
                <no-pirate>;
            }
            <room> {
                <number> 83;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
            }
            <room> {
                <number> 84;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
            }
            <room> {
                <number> 85;
                <short-text> "Dead end.";
                <long-text> "Dead end.";
                <no-pirate>;
            }
            <room> {
                <number> 86;
                <short-text> "Dead end.";
                <long-text> "Dead end.";
                <hint-m>;
                <no-pirate>;
            }
            <room> {
                <number> 87;
                <short-text> "You are in a maze of twisty little passages, all alike.";
                <long-text> "You are in a maze of twisty little passages, all alike.";
                <hint-m>;
            }
            <room> {
                <number> 88;
                <name> "Narrow corridor";
                <short-text> "You're in narrow corridor.";
                <long-text> "You are in a long, narrow corridor stretching out of sight\n" _
                            "to the west.  At the eastern end is a hole through which\n" _
                            "you can see a profusion of leaves,";
            }
            <room> {
                <number> 89;
                <short-text> "There is nothing here to climb.  Use 'up' or 'out' to leave\n" _
                             "the pit.";
                <long-text> "There is nothing here to climb.  Use 'up' or 'out' to leave\n" _
                            "the pit.";
                <forced-move>;
            }
            <room> {
                <number> 90;
                <short-text> "You have climbed up the plant and out of the pit.";
                <long-text> "You have climbed up the plant and out of the pit.";
                <forced-move>;
            }
            <room> {
                <number> 91;
                <name> "Steep incline";
                <short-text> "You're at steep incline above large room.";
                <long-text> "You are at the top of a steep incline above a large room.\n" _
                            "You could climb down here, but you would not be able to\n" _
                            "climb up.  There is a passage leading back to the north.";
            }
            <room> {
                <number> 92;
                <name> "Giant room";
                <short-text> "You're in giant room.";
                <long-text> "You are in the giant room.  The ceiling is too high up\n" _
                            "for your lamp to show it.  Cavernous passages lead east,\n" _
                            "north, and south.  On the west wall is scrawled the\n" _
                            "inscription:\n" _
                            "              'Fee Fie Foe Foo'       {sic}";
            }
            <room> {
                <number> 93;
                <short-text> "The passage here is blocked by a recent cave-in.";
                <long-text> "The passage here is blocked by a recent cave-in.";
            }
            <room> {
                <number> 94;
                <short-text> "You are at one end of an immense north/south passage.";
                <long-text> "You are at one end of an immense north/south passage.";
            }
            <room> {
                <number> 95;
                <name> "Waterfall cavern";
                <short-text> "You're in cavern with waterfall.";
                <long-text> "You are in a magnificent cavern with a rushing stream,\n" _
                            "which cascades over a sparkling waterfall into a\n" _
                            "roaring whirlpool which disappears through a hole in\n" _
                            "the floor.  Passages exit to the south and west.";
                <water>;
            }
            <room> {
                <number> 96;
                <name> "Soft room";
                <short-text> "You're in soft room.";
                <long-text> "You are in the soft room.  The walls are covered with\n" _
                            "heavy curtains, the floor with a thick pile carpet.\n" _
                            "Moss covers the ceiling.";
            }
            <room> {
                <number> 97;
                <name> "Oriental room";
                <short-text> "You're in oriental room.";
                <long-text> "This is the oriental room.  Ancient oriental cave drawings\n" _
                            "cover the walls.  A gently sloping passage leads upward\n" _
                            "to the north, another passage leads se, and a hands and\n" _
                            "knees crawl leads west.";
            }
            <room> {
                <number> 98;
                <name> "Misty cavern";
                <short-text> "You're in misty cavern.";
                <long-text> "You are following a wide path around the outer edge of a\n" _
                            "large cavern.  Far below, through a heavy white mist,\n" _
                            "strange splashing noises can be heard.  The mist rises up\n" _
                            "through a fissure in the ceiling.  The path exits to the\n" _
                            "south and west.";
            }
            <room> {
                <number> 99;
                <name> "Alcove";
                <short-text> "You're in alcove.";
                <long-text> "You are in an alcove.  A small nw path seems to widen\n" _
                            "after a short distance.  An extremely tight tunnel leads\n" _
                            "east.  It looks like a very tight squeeze.  An eerie\n" _
                            "light can be seen at the other end.";
            }
            <room> {
                <number> 100;
                <name> "Plover room";
                <short-text> "You're in plover room.";
                <long-text> "You're in a small chamber lit by an eerie green light.  An\n" _
                            "extremely narrow tunnel exits to the west.  A dark corridor\n" _
                            "leads ne.";
                <light>;
            }
            <room> {
                <name> "Dark-room";
                <number> 101;
                <short-text> "You're in dark-room.";
                <long-text> "You're in the dark-room.  A corridor leading south is the\n" _
                            "only exit.";
            }
            <room> {
                <number> 102;
                <name> "Arched hall";
                <short-text> "You're in arched hall.";
                <long-text> "You are in an arched hall.  A coral passage once continued\n" _
                            "up and east from here, but is now blocked by debris.  The\n" _
                            "air smells of sea water.";
            }
            <room> {
                <number> 103;
                <name> "Shell room";
                <short-text> "You're in shell room.";
                <long-text> "You're in a large room carved out of sedimentary rock.\n" _
                            "The floor and walls are littered with bits of shells\n" _
                            "imbedded in the stone.  A shallow passage proceeds\n" _
                            "downward, and a somewhat steeper one leads up.  A low\n" _
                            "hands and knees passage enters from the south.";
            }
            <room> {
                <number> 104;
                <short-text> "You are in a long sloping corridor with ragged sharp walls.";
                <long-text> "You are in a long sloping corridor with ragged sharp walls.";
            }
            <room> {
                <number> 105;
                <short-text> "You are in a cul-de-sac about eight feet across.";
                <long-text> "You are in a cul-de-sac about eight feet across.";
            }
            <room> {
                <number> 106;
                <name> "Anteroom";
                <short-text> "You're in anteroom.";
                <long-text> "You are in an anteroom leading to a large passage to the\n" _
                            "east.  Small passages go west and up.  The remnants of\n" _
                            "recent digging are evident.  A sign in midair here says:\n" _
                            "       'Cave under construction beyond this point.'\n" _
                            "              'Proceed at your own risk.'\n" _
                            "             'Witt construction company'";
            }
            <room> {
                <number> 107;
                <short-text> "You are in a maze of twisty little passages, all different.";
                <long-text> "You are in a maze of twisty little passages, all different.";
            }
            <room> {
                <number> 108;
                <short-text> "You're at Witt's end.";
                <long-text> "You are at Witt's end.  Passages lead off in ALL directions.";
            }
            <room> {
                <number> 109;
                <name> "Mirror canyon";
                <short-text> "You're in mirror canyon.";
                <long-text> "You are in a north/south canyon about 25 feet across.  The\n" _
                            "floor is covered by white mist seeping in from the north.\n" _
                            "The walls extend upward for well over 100 feet.  Suspended\n" _
                            "from some unseen point far above you, an enormous two-\n" _
                            "sided mirror is hanging paralled to and midway between\n" _
                            "the canyon walls.  (The mirror is obviously provided\n" _
                            "for the use of the dwarves, who as you know, are\n" _
                            "extremely vain.)  A small window can be seen in either\n" _
                            "wall, some fifty feet up.";
            }
            <room> {
                <number> 110;
                <name> "Window on pit";
                <short-text> "You're at window on pit.";
                <long-text> "You're at a low window overlooking a huge pit, which\n" _
                            "extends up out of sight.  A floor is indistinctly visible\n" _
                            "over 50 feet below.  Traces of white mist cover the floor\n" _
                            "of the pit, becoming thicker to the left.  Marks in the\n" _
                            "dust around the window would seem to indicate that\n" _
                            "someone has been here recently.  Directly across the pit\n" _
                            "from you and 25 feet away there is a similar window\n" _
                            "looking into a lighted room.  A shadowy figure can be seen\n" _
                            "there peering back at you.";
            }
            <room> {
                <number> 111;
                <name> "Top of stalactite";
                <short-text> "You're at top of stalactite.";
                <long-text> "A large stalactite extends from the roof and almost reaches\n" _
                            "the floor below.  You could climb down it, and jump from\n" _
                            "it to the floor, but having done so you would be unable to\n" _
                            "reach it to climb back up.";
            }
            <room> {
                <number> 112;
                <short-text> "You are in a little maze of twisting passages, all different.";
                <long-text> "You are in a little maze of twisting passages, all different.";
            }
            <room> {
                <number> 113;
                <name> "Reservoir";
                <short-text> "You're at reservoir.";
                <long-text> "You are at the edge of a large underground reservoir.  An\n" _
                            "opaque cloud of white mist fills the room and rises\n" _
                            "rapidly upward.  The lake is fed by a stream which tumbles\n" _
                            "out of a hole in the wall about 10 feet overhead and\n" _
                            "splashes noisily into the water somewhere within the mist.\n" _
                            "The only passage goes back toward the south.";
                <water>;
            }
            <room> {
                <number> 114;
                <short-text> "Dead end.";
                <long-text> "Dead end.";
            }
            <room> {
                <number> 115;
                <name> "Northeast of repository";
                <short-text> "You're at ne end of repository.";
                <long-text> "You are at the northeast end of an immense room, even\n" _
                            "larger than the giant room.  It appears to be a repository\n" _
                            "for the 'Adventure' program.  Massive torches far overhead\n" _
                            "bathe the room with smoky yellow light.  Scattered about\n" _
                            "you can be seen a pile of bottles (all of them empty), a\n" _
                            "nursery of young beanstalks murmuring quietly, a bed of\n" _
                            "oysters, a bundle of black rods with rusty stars on their\n" _
                            "ends, and a collection of brass lanterns.  Off to one side\n" _
                            "a great many Dwarves are sleeping on the floor, snoring\n" _
                            "loudly.  A sign nearby reads:\n" _
                            "        'Do NOT disturb the Dwarves!'\n" _
                            "An immense mirror is hanging against one wall, and\n" _
                            "stretches to the other end of the room, where various\n" _
                            "other sundry objects can be glimpsed dimly in the distance.";
                <light>;
            }
            <room> {
                <number> 116;
                <name> "Southwest of repository";
                <short-text> "You're at sw end of repository.";
                <long-text> "You are at the southwest end of the repository.  To one\n" _
                            "side is a pit full of fierce green snakes.  On the other\n" _
                            "side is a row of small wicker cages, each of which contains\n" _
                            "a little sulking bird.  In one corner is a bundle of\n" _
                            "black rods with rusty marks on their ends.  A large\n" _
                            "number of velvet pillows are scattered about on the floor.\n" _
                            "A vast mirror stretches off to the northeast.  At your\n" _
                            "feet is a large steel grate, next to which is a sign\n" _
                            "which reads:\n" _
                            "     'Treasure vault.  Keys in main office.'";
                <light>;
            }
            <room> {
                <number> 117;
                <name> "Southwest of chasm";
                <short-text> "You're on sw side of chasm.";
                <long-text> "You are on one side of a large deep chasm.  A heavy white\n" _
                            "mist rising up from below obscures all view of the far\n" _
                            "side.  A sw path leads away from the chasm into a winding\n" _
                            "corridor.";
            }
            <room> {
                <number> 118;
                <name> "Sloping corridor";
                <short-text> "You're in sloping corridor.";
                <long-text> "You are in a long winding corridor sloping out of sight\n" _
                            "in both directions.";
            }
            <room> {
                <number> 119;
                <short-text> "You are in a secret canyon which exits to the north and east.";
                <long-text> "You are in a secret canyon which exits to the north and east.";
            }
            <room> {
                <number> 120;
                <short-text> "You are in a secret canyon which exits to the north and east.";
                <long-text> "You are in a secret canyon which exits to the north and east.";
            }
            <room> {
                <number> 121;
                <short-text> "You are in a secret canyon which exits to the north and east.";
                <long-text> "You are in a secret canyon which exits to the north and east.";
            }
            <room> {
                <number> 122;
                <name> "Northeast side of chasm";
                <short-text> "You're on ne side of chasm.";
                <long-text> "You are on the far side of the chasm.  A ne path leads away\n" _
                            "from the chasm on this side.";
                <no-pirate>;
            }
            <room> {
                <number> 123;
                <name> "Corridor";
                <short-text> "You're in corridor.";
                <long-text> "You're in a long east/west corridor.  A faint rumbling noise\n" _
                            "can be heard in the distance.";
                <no-pirate>;
            }
            <room> {
                <number> 124;
                <name> "Fork in path";
                <short-text> "You're at fork in path.";
                <long-text> "The path forks here.  The left fork leads northeast.  A dull\n" _
                            "rumbling seems to get louder in that direction.  The right\n" _
                            "fork leads southeast down a gentle slope.  The main\n" _
                            "corridor enters from the west.";
                <no-pirate>;
            }
            <room> {
                <number> 125;
                <name> "Warm wall junction";
                <short-text> "You're at junction with warm walls.";
                <long-text> "The walls are quite warm here.  From the north can be heard\n" _
                            "a steady roar, so loud that the entire cave seems to be\n" _
                            "trembling.  Another passage leads south, and a low crawl\n" _
                            "goes east.";
                <no-pirate>;
            }
            <room> {
                <number> 126;
                <name> "Break-taking view";
                <short-text> "You're at breath-taking view.";
                <long-text> "You are on the edge of a breath-taking view.  Far below\n" _
                            "you is an active volcano, from which great gouts of molten\n" _
                            "lava come surging out, cascading back down into the depths.\n" _
                            "The glowing rock fills the farthest reaches of the cavern\n" _
                            "with a blood-red glare, giving everything an eerie,\n" _
                            "macabre appearance.  The air is filled with flickering\n" _
                            "sparks of ash and a heavy smell of brimstone.  The walls\n" _
                            "are hot to the touch, and the thundering of the volcano\n" _
                            "drowns out all other sounds.  Embedded in the jagged roof\n" _
                            "far overhead are myriad formations composed of pure\n" _
                            "white alabaster, which scatter their murky light into\n" _
                            "sinister apparitions upon the walls.  To one side is a\n" _
                            "deep gorge, filled with a bizarre chaos of tortured\n" _
                            "rock which seems to have been crafted by the Devil\n" _
                            "Himself.  An immense river of fire crashes out from\n" _
                            "the depths of the volcano, burns its way through the\n" _
                            "gorge, and plummets into a bottomless pit far off to your\n" _
                            "left.  To the right, an immense geyser of blistering\n" _
                            "steam erupts continuously from a barren island in the\n" _
                            "center of a sulfurous lake, which bubbles ominously.\n" _
                            "The far right wall is aflame with an incandescence of its\n" _
                            "own, which lends an additional infernal splendor to the\n" _
                            "already hellish scene.  A dark, foreboding passage exits\n" _
                            "to the south.";
                <no-pirate>;
            }
            <room> {
                <number> 127;
                <name> "Chamber of boulders";
                <short-text> "You're in chamber of boulders.";
                <long-text> "You are in a small chamber filled with large boulders.\n" _
                            "The walls are very warm, causing the air in the room\n" _
                            "to be almost stifling from the heat.  The only exit\n" _
                            "is a crawl heading west, through which is coming\n" _
                            "a low rumbling.";
                <no-pirate>;
            }
            <room> {
                <number> 128;
                <name> "Limestone passage";
                <short-text> "You're in limestone passage.";
                <long-text> "You are walking along a gently sloping north/south passage\n" _
                            "lined with oddly shaped limestone formations.";
                <no-pirate>;
            }
            <room> {
                <number> 129;
                <name> "Barren room entrance";
                <short-text> "You're in front of barren room.";
                <long-text> "You are standing at the entrance to a large, barren\n" _
                            "room.  A sign posted above the entrance reads:\n" _
                            "       'Caution!  Bear in room!'";
                <no-pirate>;
            }
            <room> {
                <number> 130;
                <name> "Barren room";
                <short-text> "You're in barren room.";
                <long-text> "You are inside a barren room.  The center of the room\n" _
                            "is completely empty except for some dust.  Marks in\n" _
                            "the dust lead away toward the far end of the room.\n" _
                            "The only exit is the way you came in.";
                <no-pirate>;
            }
            <room> {
                <number> 131;
                <short-text> "You are in a maze of twisting little passages, all different.";
                <long-text> "You are in a maze of twisting little passages, all different.";
            }
            <room> {
                <number> 132;
                <short-text> "You are in a little maze of twisty passages, all different.";
                <long-text> "You are in a little maze of twisty passages, all different.";
            }
            <room> {
                <number> 133;
                <short-text> "You are in a twisting maze of little passages, all different.";
                <long-text> "You are in a twisting maze of little passages, all different.";
            }
            <room> {
                <number> 134;
                <short-text> "You are in a twisting little maze of passages, all different.";
                <long-text> "You are in a twisting little maze of passages, all different.";
            }
            <room> {
                <number> 135;
                <short-text> "You are in a twisty little maze of passages, all different.";
                <long-text> "You are in a twisty little maze of passages, all different.";
            }
            <room> {
                <number> 136;
                <short-text> "You are in a twisty maze of little passages, all different.";
                <long-text> "You are in a twisty maze of little passages, all different.";
            }
            <room> {
                <number> 137;
                <short-text> "You are in a little twisty maze of passages, all different.";
                <long-text> "You are in a little twisty maze of passages, all different.";
            }
            <room> {
                <number> 138;
                <short-text> "You are in a maze of little twisting passages, all different.";
                <long-text> "You are in a maze of little twisting passages, all different.";
            }
            <room> {
                <number> 139;
                <short-text> "You are in a maze of little twisty passages, all different.";
                <long-text> "You are in a maze of little twisty passages, all different.";
            }
            <room> {
                <number> 140;
                <short-text> "Dead end.";
                <long-text> "Dead end.";
            }
        }
        <messages> {
            <message> {
                <number> 1;
                <text> "Somewhere nearby is Colossal Cave, where others have\n" _
                       "found fortunes in treasure and gold, though it is rumored\n" _
                       "that some who enter are never seen again.  Magic is said\n" _
                       "to work in the cave.  I will be your eyes and hands.  Direct\n" _
                       "me with commands of 1 or 2 words.  (Should you get stuck, type\n" _
                       "'help' for some general hints).";
            }
            <message> {
                <number> 2;
                <text> "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                       "A little dwarf with a big knife blocks your way.\n" _
                       "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
            }
            <message> {
                <number> 3;
                <text> "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                       "A little dwarf just walked around a corner, saw you, threw\n" _
                       "a little axe at you that missed, cursed, and ran away.\n" _
                       "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
            }
            <message> {
                <number> 4;
                <text> "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                       "There is a threatening little dwarf in the room with you!\n" _
                       "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
            }
            <message> {
                <number> 5;
                <text> "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                       "One sharp, nasty knife is thrown at you!\n" _
                       "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
            }
            <message> {
                <number> 6;
                <text> "!!!!!!!!!!!!!!!!!!!!!\n" _
                       "None of them hit you!\n" _
                       "!!!!!!!!!!!!!!!!!!!!!";
            }
            <message> {
                <number> 7;
                <text> "!!!!!!!!!!!!!!!!!!!!!\n" _
                       "One of them gets you!\n" _
                       "!!!!!!!!!!!!!!!!!!!!!";
            }
            <message> {
                <number> 8;
                <text> "A hollow voice says 'Plugh'.";
            }
            <message> {
                <number> 9;
                <text> "There is no way to go that direction.";
            }
            <message> {
                <number> 10;
                <text> "I am unsure how you are facing.  Use compass points or\n" _
                       "nearby objects.";
            }
            <message> {
                <number> 11;
                <text> "I don't know in from out here.  Use compass points or name\n" _
                       "something in the general direction you want to go.";
            }
            <message> {
                <number> 12;
                <text> "I don't know how to apply that word here.";
            }
            <message> {
                <number> 13;
                <text> "I don't understand that!";
            }
            <message> {
                <number> 14;
                <text> "I'm game.  Would you care to explain how?";
            }
            <message> {
                <number> 15;
                <text> "Sorry, but I am not allowed to give more detail.  I will\n" _
                       "repeat the long description of your location.";
            }
            <message> {
                <number> 16;
                <text> "It is now pitch dark.  If you proceed you will likely fall\n" _
                       "into a pit.";
            }
            <message> {
                <number> 17;
                <text> "If you prefer, simply type W rather than West.";
            }
            <message> {
                <number> 18;
                <text> "Are you trying to catch the bird?";
            }
            <message> {
                <number> 19;
                <text> "The bird is frightened right now and you cannot catch\n" _
                       "it no matter what you try.  Perhaps you might try later.";
            }
            <message> {
                <number> 20;
                <text> "Are you trying to somehow deal with the snake?";
            }
            <message> {
                <number> 21;
                <text> "You can't kill the snake, or drive it away, or avoid it,\n" _
                       "or anything like that.  There is a way to get by, but you\n" _
                       "don't have the necessary resources right now.";
            }
            <message> {
                <number> 22;
                <text> "Do you really want to quit now?";
            }
            <message> {
                <number> 23;
                <text> "You fell into a pit and broke every bone in your body!";
            }
            <message> {
                <number> 24;
                <text> "You are already carrying it!";
            }
            <message> {
                <number> 25;
                <text> "You can't be serious!";
            }
            <message> {
                <number> 26;
                <text> "The bird was unafraid when you entered, but as you approach\n" _
                       "it becomes disturbed and you cannot catch it.";
            }
            <message> {
                <number> 27;
                <text> "You can catch the bird, but you cannot carry it.";
            }
            <message> {
                <number> 28;
                <text> "There is nothing here with a lock!";
            }
            <message> {
                <number> 29;
                <text> "You aren't carrying it!";
            }
            <message> {
                <number> 30;
                <text> "The little bird attacks the green snake, and in an\n" _
                       "astounding flurry drives the snake away.";
            }
            <message> {
                <number> 31;
                <text> "You have no keys!";
            }
            <message> {
                <number> 32;
                <text> "It has no lock.";
            }
            <message> {
                <number> 33;
                <text> "I don't know how to lock or unlock such a thing.";
            }
            <message> {
                <number> 34;
                <text> "It was already locked.";
            }
            <message> {
                <number> 35;
                <text> "The grate is now locked.";
            }
            <message> {
                <number> 36;
                <text> "The grate is now unlocked.";
            }
            <message> {
                <number> 37;
                <text> "It was already unlocked.";
            }
            <message> {
                <number> 38;
                <text> "You have no source of light.";
            }
            <message> {
                <number> 39;
                <text> "Your lamp is now on.";
            }
            <message> {
                <number> 40;
                <text> "Your lamp is now off.";
            }
            <message> {
                <number> 41;
                <text> "There is no way to get past the bear to unlock the chain,\n" _
                       "which is probably just as well.";
            }
            <message> {
                <number> 42;
                <text> "Nothing happens.";
            }
            <message> {
                <number> 43;
                <text> "Where?";
            }
            <message> {
                <number> 44;
                <text> "There is nothing here to attack.";
            }
            <message> {
                <number> 45;
                <text> "The little bird is now dead.  Its body disappears.";
            }
            <message> {
                <number> 46;
                <text> "Attacking the snake both doesn't work and is very dangerous.";
            }
            <message> {
                <number> 47;
                <text> "!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                       "You killed a little dwarf.\n" _
                       "!!!!!!!!!!!!!!!!!!!!!!!!!!";
            }
            <message> {
                <number> 48;
                <text> "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                       "You attack a little dwarf, but he dodges out of the way.\n" _
                       "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
            }
            <message> {
                <number> 49;
                <text> "With what? Your bare hands?";
            }
            <message> {
                <number> 50;
                <text> "Good try, but that is an old worn-out magic word.";
            }
            <message> {
                <number> 51;
                <text> "I know of places, actions, and things.  Most of my vocabulary\n" _
                       "describes places and is used to move you there.  To move, try\n" _
                       "words like forest, building, downstream, enter, east, west,\n" _
                       "north, south, up or down.  I know about a few special objects,\n" _
                       "like a black rod hidden in the cave.  These objects can be\n" _
                       "manipulated using some of the action words I know.  Usually\n" _
                       "you will need to give both the object and action words (In\n" _
                       "either order), but sometimes I can infer the object from the\n" _
                       "verb alone.  Some objects also imply verbs; in particular,\n" _
                       "'inventory' implies 'take inventory', which causes me to give\n" _
                       "you a list of what you're carrying.  The objects have side\n" _
                       "effects; for instance, the rod scares the bird.  Usually people\n" _
                       "having trouble moving just need to try a few more words.\n" _
                       "Usually people trying unsuccessfully to manipulate an object\n" _
                       "are attempting something beyond their (or my!) capabilities and\n" _
                       "should try a completely different tack.  To speed the game you\n" _
                       "can sometimes move long distances with a single word.  For\n" _
                       "example, 'building' usually gets you to the building from\n" _
                       "anywhere above ground except when lost in the forest.  Also,\n" _
                       "note that cave passages turn a lot, and that leaving a room to\n" _
                       "the north does not guarantee entering the next from the south.\n" _
                       "Good luck! (Type 'information' for more details.  Type 'help\n" _
                       "help' to see a list of verbs and motions).";
            }
            <message> {
                <number> 52;
                <text> "!!!!!!!!!!\n" _
                       "It misses!\n" _
                       "!!!!!!!!!!";
            }
            <message> {
                <number> 53;
                <text> "!!!!!!!!!!!!\n" _
                       "It gets you!\n" _
                       "!!!!!!!!!!!!";
            }
            <message> {
                <number> 54;
                <text> "OK";
            }
            <message> {
                <number> 55;
                <text> "You can't unlock the keys.";
            }
            <message> {
                <number> 56;
                <text> "You have crawled around in some little holes and wound up\n" _
                       "back in the main passage.";
            }
            <message> {
                <number> 57;
                <text> "I don't know where the cave is, but hereabouts no stream\n" _
                       "can run on the surface for very long.  I would try the stream.";
            }
            <message> {
                <number> 58;
                <text> "I need more detailed instructions to do that.";
            }
            <message> {
                <number> 59;
                <text> "I can only tell you what you see as you move about and\n" _
                       "manipulate things.  I cannot tell you where remote things are.";
            }
            <message> {
                <number> 60;
                <text> "I don't know that word.";
            }
            <message> {
                <number> 61;
                <text> "What?";
            }
            <message> {
                <number> 62;
                <text> "Are you trying to get into the cave?";
            }
            <message> {
                <number> 63;
                <text> "The grate is very solid and has a hardened steel lock.  You\n" _
                       "cannot enter without a key, and there are no keys nearby.\n" _
                       "I would recommend looking elsewhere for the keys.";
            }
            <message> {
                <number> 64;
                <text> "The trees of the forest are large hardwood oak and maple,\n" _
                       "with an occasional grove of pine or spruce.  There is quite\n" _
                       "a bit of undergrowth, largely birch and ash saplings plus\n" _
                       "nondescript bushes of various sorts.  This time of year\n" _
                       "visibility is quite restricted by all the leaves, but travel\n" _
                       "is quite easy if you detour around the spruce and berry\n" _
                       "bushes.";
            }
            <message> {
                <number> 65;
                <text> "*************************************************\n" _
                       "*             Welcome to ADVENTURE!             *\n" _
                       "*  Original development by Willie Crowther.     *\n" _
                       "*  Major features added by Don Woods.           *\n" _
                       "*  Conversion to BDS C by J. R. Jaeger          *\n" _
                       "*  Unix standardization by Jerry D. Pohl.       *\n" _
                       "*  Conversion to JUNOS op script by Curtis Call *\n" _
                       "*************************************************\n" _
                       "     (Type 'instructions' for instructions)\n";
            }
            <message> {
                <number> 66;
                <text> "Digging without a shovel is quite impractical.  Even with a\n" _
                       "shovel progress is unlikely.";
            }
            <message> {
                <number> 67;
                <text> "Blasting requires dynamite.";
            }
            <message> {
                <number> 68;
                <text> "I'm as confused as you are.";
            }
            <message> {
                <number> 69;
                <text> "Mist is a white vapor, usually water.  Seen from time to time\n" _
                       "in caverns.  It can be found anywhere but is frequently a\n" _
                       "sign of a deep pit leading down to water.";
            }
            <message> {
                <number> 70;
                <text> "Your feet are now wet.";
            }
            <message> {
                <number> 71;
                <text> "I think I just lost my appetite.";
            }
            <message> {
                <number> 72;
                <text> "Thank you.  It was delicious!";
            }
            <message> {
                <number> 73;
                <text> "You have taken a drink from the stream.  The water tastes\n" _
                       "strongly of minerals, but is not unpleasant.  It is extremely\n" _
                       "cold.";
            }
            <message> {
                <number> 74;
                <text> "The bottle of water is now empty.";
            }
            <message> {
                <number> 75;
                <text> "Rubbing the electric lamp is not particularly rewarding.\n" _
                       "Anyway, nothing exciting happens.";
            }
            <message> {
                <number> 76;
                <text> "Peculiar.  Nothing unexpected happens.";
            }
            <message> {
                <number> 77;
                <text> "Your bottle is empty and the ground is wet.";
            }
            <message> {
                <number> 78;
                <text> "You can't pour that.";
            }
            <message> {
                <number> 79;
                <text> "Watch it, this is a family-friendly networking device!";
            }
            <message> {
                <number> 80;
                <text> "Which way?";
            }
            <message> {
                <number> 81;
                <text> "Oh dear, you seem to have gotten yourself killed.  I might\n" _
                       "be able to help you out, but I've never really done this\n" _
                       "before.  Do you want me to try to reincarnate you?";
            }
            <message> {
                <number> 82;
                <text> "All right.  But don't blame me if something goes wr......\n" _
                       "                    --- POOF !! ---\n" _
                       "You are engulfed in a cloud of orange smoke.  Coughing and\n" _
                       "gasping, you emerge from the smoke and find...";
            }
            <message> {
                <number> 83;
                <text> "You clumsy oaf, you've done it again!  I don't know how long\n" _
                       "I can keep this up.  Do you want me to try reincarnating\n" _
                       "you again?";
            }
            <message> {
                <number> 84;
                <text> "Okay, now where did I put my orange smoke? ... > POOF! <\n" _ /* ">" */
                       "Everything disappears in a dense cloud of orange smoke.";
            }
            <message> {
                <number> 85;
                <text> "Now you've really done it!  I'm out of orange smoke!  You\n" _
                       "don't expect me to do a decent reincarnation without any\n" _
                       "orange smoke, do you?";
            }
            <message> {
                <number> 86;
                <text> "Okay, If you're so smart, do it yourself!  I'm leaving!\n" _
                       " \n" _
                       "           *Sorry, you're dead.  Game over*";         
            }
            <message> {
                <number> 87;
                <text> "Reserved";
            }
            <message> {
                <number> 88;
                <text> "Reserved";
            }
            <message> {
                <number> 89;
                <text> "Reserved";
            }
            <message> {
                <number> 90;
                <text> "Reserved";
            }
            <message> {
                <number> 91;
                <text> "Sorry, but I no longer seem to remember how it was you\n" _
                       "got here.";
            }
            <message> {
                <number> 92;
                <text> "You can't carry anything more.  You'll have to drop something\n" _
                       "first.  You can only carry seven objects.";
            }
            <message> {
                <number> 93;
                <text> "You can't go through a locked steel grate!";
            }
            <message> {
                <number> 94;
                <text> "I believe what you want is right here with you.";
            }
            <message> {
                <number> 95;
                <text> "You don't fit through a two-inch slit!";
            }
            <message> {
                <number> 96;
                <text> "I respectfully suggest you go across the bridge instead\n" _
                       "of jumping.";
            }
            <message> {
                <number> 97;
                <text> "There is no way across the fissure.";
            }
            <message> {
                <number> 98;
                <text> "You're not carrying anything.";
            }
            <message> {
                <number> 99;
                <text> "You are currently holding the following:";
            }
            <message> {
                <number> 100;
                <text> "It's not hungry (It's merely pinin' for the Fjords).  Besides\n" _
                       "You have no bird seed.";
            }
            <message> {
                <number> 101;
                <text> "The snake has now devoured your bird.";
            }
            <message> {
                <number> 102;
                <text> "There's nothing here it wants to eat (Except perhaps you).";
            }
            <message> {
                <number> 103;
                <text> "You fool, Dwarves eat only coal!  Now you've made\n" _
                       "him REALLY mad !!";
            }
            <message> {
                <number> 104;
                <text> "You have nothing in which to carry it.";
            }
            <message> {
                <number> 105;
                <text> "Your bottle is already full.";
            }
            <message> {
                <number> 106;
                <text> "There is nothing here with which to fill the bottle.";
            }
            <message> {
                <number> 107;
                <text> "Your bottle is now full of water.";
            }
            <message> {
                <number> 108;
                <text> "Your bottle is now full of oil.";
            }
            <message> {
                <number> 109;
                <text> "You can't fill that.";
            }
            <message> {
                <number> 110;
                <text> "Don't be ridiculous!";
            }
            <message> {
                <number> 111;
                <text> "The door is extremely rusty and refuses to open.";
            }
            <message> {
                <number> 112;
                <text> "The plant indignantly shakes the oil off its leaves and asks:\n" _
                       "'Water?'.";
            }
            <message> {
                <number> 113;
                <text> "The hinges are quite thoroughly rusted now and won't budge.";
            }
            <message> {
                <number> 114;
                <text> "The oil has freed up the hinges so that the door will now move,\n" _
                       "although it requires some effort.";
            }
            <message> {
                <number> 115;
                <text> "The plant has exceptionally deep roots and cannot be pulled free.";
            }
            <message> {
                <number> 116;
                <text> "The Dwarves' knives vanish as they strike the walls of the cave.";
            }
            <message> {
                <number> 117;
                <text> "Something you're carrying won't fit through the tunnel with\n" _
                       "you.  You'd best take inventory and drop something.";
            }
            <message> {
                <number> 118;
                <text> "You can't fit this five-foot clam through that little passage!";
            }
            <message> {
                <number> 119;
                <text> "You can't fit this five foot oyster through that little passage!";
            }
            <message> {
                <number> 120;
                <text> "I advise you to put down the clam before opening it. >STRAIN!<"; /* > "*/
            }
            <message> {
                <number> 121;
                <text> "I advise you to put down the oyster before opening it.\n" _
                       ">WRENCH!<"; /* > "*/
            }
            <message> {
                <number> 122;
                <text> "You don't have anything strong enough to open the clam.";
            }
            <message> {
                <number> 123;
                <text> "You don't have anything strong enough to open the oyster.";
            }
            <message> {
                <number> 124;
                <text> "A glistening pearl falls out of the clam and rolls away.\n" _
                       "Goodness, this must really be an oyster.  (I never was\n" _
                       "very good at identifying bivalves.)  Whatever it is,\n" _
                       "it has now snapped shut again.";
            }
            <message> {
                <number> 125;
                <text> "The oyster creaks open, revealing nothing but oyster inside.\n" _
                       "It promptly snaps shut again.";
            }
            <message> {
                <number> 126;
                <text> "You have crawled around in some little holes and found your\n" _
                       "way blocked by a recent cave-in.  You are now back in the\n" _
                       "main passage.";
            }
            <message> {
                <number> 127;
                <text> "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" _
                       "There are faint rustling noises from the darkness behind\n" _
                       "you.\n" _
                       "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@";
            }
            <message> {
                <number> 128;
                <text> "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" _
                       "Out from the shadows behind you pounces a bearded pirate!\n" _
                       "'Har, har' he chortles, 'I'll just take all this booty and\n" _
                       "hide it away with me chest deep in the maze!'.  He snatches\n" _
                       "your treasure and vanishes into the gloom.\n" _
                       "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@";
            }
            <message> {
                <number> 129;
                <text> "A sepulchral voice reverberating through the cave says:\n" _
                       "'Cave closing soon.  All adventurers exit immediately\n" _
                       "through main office.'";
            }
            <message> {
                <number> 130;
                <text> "A mysterious recorded voice groans into life and announces:\n" _
                       "'This exit is closed.  Please leave via main office.'";
            }
            <message> {
                <number> 131;
                <text> "It looks as though you're dead.  Well, seeing as how it's so\n" _
                       "close to closing time anyway, I think we'll just call it a day.";
            }
            <message> {
                <number> 132;
                <text> "The sepulchral voice entones, 'The cave is now closed.'  As\n" _
                       "the echoes fade, there is a blinding flash of light (and a\n" _
                       "small puff of orange smoke). . . .\n" _
                       "As your eyes refocus you look around and find...";
            }
            <message> {
                <number> 133;
                <text> "There is a loud explosion, and a twenty-foot hole appears in\n" _
                       "the far wall, burying the Dwarves in the rubble.  You march\n" _
                       "through the hole and find yourself in the main office, where\n" _
                       "a cheering band of friendly elves carry the conquering\n" _
                       "adventurer off into the sunset.";
            }
            <message> {
                <number> 134;
                <text> "There is a loud explosion, and a twenty-foot hole appears in\n" _
                       "the far wall, burying the snakes in the rubble.  A river of\n" _
                       "molten lava pours in through the hole, destroying\n" _
                       "everything in its path, including you!!";
            }
            <message> {
                <number> 135;
                <text> "There is a loud explosion, and you are suddenly splashed across\n" _
                       "the walls of the room.";
            }
            <message> {
                <number> 136;
                <text> "The resulting ruckus has awakened the Dwarves.  There are now\n" _
                       "several threatening little Dwarves in the room with you!\n" _
                       "Most of them throw knives at you!  All of them get you!";
            }
            <message> {
                <number> 137;
                <text> "Oh, leave the poor unhappy bird alone.";
            }
            <message> {
                <number> 138;
                <text> "I daresay whatever you want is around here somewhere.";
            }
            <message> {
                <number> 139;
                <text> "I don't know the word 'stop'.   Use 'quit' if you want to\n" _
                       "give up.";
            }
            <message> {
                <number> 140;
                <text> "You can't get there from here.";
            }
            <message> {
                <number> 141;
                <text> "You are being followed by a very large, tame bear.";
            }
            <message> {
                <number> 142;
                <text> "If you want to end your adventure early, say 'quit'.  To\n" _  
                       "see how well you're doing, say 'score'.  To get full\n" _
                       "credit for a treasure, you must have left it safely in\n" _
                       "the building, though you get partial credit just for\n" _
                       "locating it.  You lose points for getting killed, or for\n" _
                       "quitting, though the former costs you more.  There are\n" _
                       "also points based on how much (If any) of the cave you\n" _
                       "have managed to explore;  in particular, there is a\n" _
                       "large bonus just for getting in (to distinguish the\n" _
                       "beginners from the rest of the pack), and there are\n" _
                       "other ways to determine whether you've been through\n" _
                       "some of the more harrowing sections.  If you think you\n" _
                       "have found all the treasures, just keep exploring for\n" _
                       "a while.  If nothing interesting happens, you haven't\n" _
                       "found them all yet.  If something interesting DOES\n" _
                       "happen, it means you're getting a bonus and have an\n" _
                       "opportunity to garner many more points in the master's\n" _
                       "section.";
            }
            <message> {
                <number> 143;
                <text> "Do you indeed wish to quit now?";
            }
            <message> {
                <number> 144;
                <text> "There is nothing here with which to fill the vase.";
            }
            <message> {
                <number> 145;
                <text> "The sudden change in temperature has delicately shattered\n" _
                       "the vase.";
            }
            <message> {
                <number> 146;
                <text> "It is beyond your power to do that.";
            }
            <message> {
                <number> 147;
                <text> "I don't know how.";
            }
            <message> {
                <number> 148;
                <text> "It is too far up for you to reach.";
            }
            <message> {
                <number> 149;
                <text> "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" _
                        "You killed a little Dwarf.  The body vanished in a cloud\n" _
                       "of greasy black smoke.\n" _
                       "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
            }
            <message> {
                <number> 150;
                <text> "The shell is very strong and impervious to attack.";
            }
            <message> {
                <number> 151;
                <text> "What's the matter, can't you read?  Now you'd best start\n" _
                       "over.";
            }
            <message> {
                <number> 152;
                <text> "The axe bounces harmlessly off the dragon's thick scales.";
            }
            <message> {
                <number> 153;
                <text> "The dragon looks rather nasty.  You'd best not try to get by.";
            }
            <message> {
                <number> 154;
                <text> "The little bird attacks the green dragon, and in an\n" _
                       "astounding flurry gets burnt to a cinder.  The ashes blow away.";
            }
            <message> {
                <number> 155;
                <text> "On what?";
            }
            <message> {
                <number> 156;
                <text> "Okay, from now on I'll only describe a place in full the\n" _
                       "first time you come to it.  To get the full description\n" _
                       "say 'look'.";
            }
            <message> {
                <number> 157;
                <text> "Trolls are close relatives with the rocks and have skin as\n" _
                       "tough as that of a rhinoceros.  The troll fends off your\n" _
                       "blows effortlessly.";
            }
            <message> {
                <number> 158;
                <text> "The troll deftly catches the axe, examines it carefully,\n" _
                       "and tosses it back, declaring, 'Good workmanship,\n" _
                       "but it's not valuable enough.'.";
            }
            <message> {
                <number> 159;
                <text> "The troll catches your treasure and scurries away out of sight.";
            }
            <message> {
                <number> 160;
                <text> "The troll refuses to let you cross.";
            }
            <message> {
                <number> 161;
                <text> "There is no longer any way across the chasm.";
            }
            <message> {
                <number> 162;
                <text> "Just as you reach the other side, the bridge buckles beneath\n" _
                       "the weight of the bear, which was still following you around.\n" _
                       "You scrabble desperately for support, but as the bridge\n" _
                       "collapses you stumble back and fall into the chasm.";
            }
            <message> {
                <number> 163;
                <text> "The bear lumbers toward the troll, who lets out a\n" _
                       "startled shriek and scurries away.  The bear soon gives\n" _
                       "up pursuit and wanders back.";
            }
            <message> {
                <number> 164;
                <text> "The axe misses and lands near the bear where you can't get\n" _
                       "at it.";
            }
            <message> {
                <number> 165;
                <text> "With what?  Your bare hands?  Against HIS bear hands??";
            }
            <message> {
                <number> 166;
                <text> "The bear is confused, he only wants to be your friend.";
            }
            <message> {
                <number> 167;
                <text> "For crying out loud, the poor thing is already dead!";
            }
            <message> {
                <number> 168;
                <text> "The bear eagerly wolfs down your food, after which he seems\n" _
                       "to calm down considerably, and even becomes rather friendly.";
            }
            <message> {
                <number> 169;
                <text> "The bear is still chained to the wall.";
            }
            <message> {
                <number> 170;
                <text> "The chain is still locked.";
            }
            <message> {
                <number> 171;
                <text> "The chain is now unlocked.";
            }
            <message> {
                <number> 172;
                <text> "The chain is now locked.";
            }
            <message> {
                <number> 173;
                <text> "There is nothing here to which the chain can be locked.";
            }
            <message> {
                <number> 174;
                <text> "There is nothing here to eat.";
            }
            <message> {
                <number> 175;
                <text> "Do you want the hint?";
            }
            <message> {
                <number> 176;
                <text> "Do you need help getting out of the maze?";
            }
            <message> {
                <number> 177;
                <text> "You can make the passages look less alike by dropping things.";
            }
            <message> {
                <number> 178;
                <text> "Are you trying to explore beyond the plover room?";
            }
            <message> {
                <number> 179;
                <text> "There is a way to explore that region without having to\n" _
                       "worry about falling into a pit.  None of the objects\n" _
                       "available is immediately useful in discovering the secret.";
            }
            <message> {
                <number> 180;
                <text> "Do you need help getting out of here?";
            }
            <message> {
                <number> 181;
                <text> "Don't go west.";
            }
            <message> {
                <number> 182;
                <text> "Gluttony is not one of the Troll's vices.  Avarice, however, is.";
            }
            <message> {
                <number> 183;
                <text> "Your lamp is getting dim.. You'd best start wrapping this up,\n" _
                       "unless you can find some fresh batteries.  I seem to recall\n" _
                       "there's a vending machine in the maze.  Bring some coins\n" _
                       "with you.";
            }
            <message> {
                <number> 184;
                <text> "Your lamp has run out of power.";
            }
            <message> {
                <number> 185;
                <text> "There's not much point in wandering around out here, and you\n" _
                       "can't explore the cave without a lamp.  So let's just call\n" _
                       "it a day.";
            }
            <message> {
                <number> 186;
                <text> "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" _
                       "There are faint rustling noises from the darkness behind you.\n" _
                       "As you turn toward them, the beam of your lamp falls across a\n" _
                       "bearded pirate.  He is carrying a large chest.  'Shiver me\n" _
                       "timbers!'  he cries, 'I've been spotted!  I'd best hide\n" _
                       "meself off to the maze and hide me chest!'.  With that,\n" _
                       "he vanished into the gloom\n" _
                       "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@";
            }
            <message> {
                <number> 187;
                <text> "Your lamp is getting dim.  You'd best go back for\n" _
                       "those batteries.";
            }
            <message> {
                <number> 188;
                <text> "Your lamp is getting dim.. I'm taking the liberty of replacing\n" _
                       "the batteries.";
            }
            <message> {
                <number> 189;
                <text> "Your lamp is getting dim, and you're out of spare batteries.\n" _
                       "You'd best start wrapping this up.";
            }
            <message> {
                <number> 190;
                <text> "I'm afraid the magazine is written in Dwarvish.";
            }
            <message> {
                <number> 191;
                <text> "'This is not the maze where the pirate leaves his treasure\n" _
                       "chest.'";
            }
            <message> {
                <number> 192;
                <text> "Hmm, this looks like a clue, which means it'll cost you 10\n" _
                       "points to read it.  Should I go ahead and read it anyway?";
            }
            <message> {
                <number> 193;
                <text> "It says, 'There is something strange about this place,\n" _
                       "such that one of the words I've always known now has\n" _
                       "a new effect.'";
            }
            <message> {
                <number> 194;
                <text> "It says the same thing it did before.";
            }
            <message> {
                <number> 195;
                <text> "I'm afraid I don't understand.";
            }
            <message> {
                <number> 196;
                <text> "'Congratulations on bringing light into the dark-room!'";
            }
            <message> {
                <number> 197;
                <text> "You strike the mirror a resounding blow, whereupon it\n" _
                       "shatters into a myriad tiny fragments.";
            }
            <message> {
                <number> 198;
                <text> "You have taken the vase and hurled it delicately to the\n" _
                       "ground.";
            }
            <message> {
                <number> 199;
                <text> "You prod the nearest Dwarf, who wakes up grumpily, takes\n" _
                       "one look at you, curses, and grabs for his axe.";
            }
            <message> {
                <number> 200;
                <text> "Is this acceptable?";
            }
            <message> {
                <number> 201;
                <text> "There's no point in suspending a demonstration game.";
            }
            <message> {
                <number> 202;
                <text> "This will replace the existing game with the past game.\n" _
                       "Are you sure you want to do this?";
            }
            <message> {
                <number> 203;
                <text> "Loading past game...";
            }
            <message> {
                <number> 204;
                <text> "Restore canceled!";
            }
            <message> {
                <number> 205;
                <text> "Sorry, that only works in debug mode.";
            }
        }
        <objects> {
            <object> {
                <number> 1;
                <text> "Set of keys";
                <text> "There are some keys on the ground here.";
            }
            <object> {
                <number> 2;
                <text> "Brass lantern";
                <text> "There is a shiny brass lamp nearby.";
                <text> "There is a lamp shining nearby.";
            }
            <object> {
                <number> 3;
                <text> "*Grate";
                <text> "The grate is locked.";
                <text> "The grate is open.";
                <fixed>;
                <structure>;
            }
            <object> {
                <number> 4;
                <text> "Wicker cage";
                <text> "There is a small wicker cage discarded nearby.";
            }
            <object> {
                <number> 5;
                <text> "Black rod";
                <text> "A three foot black rod with a rusty star on an end lies nearby.";
            }
            <object> {
                <number> 6;
                <text> "Black rod";
                <text> "A three foot black rod with a rusty mark on an end lies nearby.";
            }
            <object> {
                <number> $steps;
                <text> "*Steps";
                <text> "Rough stone steps lead down the pit.";
                <text> "Rough stone steps lead up the dome.";
                <fixed>;
                <structure>;
            }
            <object> {
                <number> 8;
                <text> "Little bird in cage";
                <text> "A cheerful little bird is sitting here singing.";
                <text> "There is a little bird in the cage.";
                <creature>;
            }
            <object> {
                <number> $door;
                <text> "*Rusty door";
                <text> "The way north is barred by a massive, rusty, iron door.";
                <text> "The way north leads through a massive, rusty, iron door.";
                <fixed>;
                <structure>;
            }
            <object> {
                <number> 10;
                <text> "Velvet pillow";
                <text> "A small velvet pillow lies on the floor.";
            }
            <object> {
                <number> $snake;
                <text> "Snake";
                <text> "A huge green fierce snake bars the way!";
                <fixed>;
                <creature>;
            }
            <object> {
                <number> $fissure;
                <text> "*Fissure";
                <text> "If only there were some way to bridge the gap!";
                <text> "A crystal bridge now spans the fissure.";
                <text> "The crystal bridge has vanished!";
                <fixed>;
                <structure>;
            }
            <object> {
                <number> 13;
                <text> "*Stone tablet";
                <text> "A massive stone tablet imbedded in the wall reads:\n" _
                       "'Congratulations on bringing light into the dark-room!'";
                <fixed>;
                <structure>;
            }
            <object> {
                <number> 14;
                <text> "Giant clam >Grunt!<"; /* "> */
                <text> "There is an enormous clam here with its shell tightly closed.";
                <creature>;
            }
            <object> {
                <number> $oyster;
                <text> "Giant oyster >Groan!<";   /* "> */
                <text> "There is an enormous oyster here with its shell tightly closed.";
                <text> "Interesting.  There seems to be something written on the\n" _
                       "underside of the oyster.";
                <creature>;
            }
            <object> {
                <number> 16;
                <text> "'Spelunker Today'";
                <text> "There are a few recent issues of 'Spelunker Today' magazine\n" _
                       "here.";
            }
            <object> {
                <number> $dwarf;
                <fixed>;
                <unlisted>; /* I assume, this might have to be removed */
                <creature>;
            }
            <object> {
                <number> 18;
            }
            <object> {
                <number> 19;
                <text> "Tasty food";
                <text> "There is tasty food here.";
            }
            <object> {
                <number> 20;
                <text> "Small bottle";
                <text> "There is a bottle of water here.";
                <text> "There is an empty bottle here.";
                <text> "There is a bottle of oil here.";
            }
            <object> {
                <number> 21;
                <text> "Water in the bottle.";
            }
            <object> {
                <number> 22;
                <text> "Oil in the bottle";
            }
            <object> {
                <number> $mirror;
                <text> "*Mirror";
                <text> "Enormous mirror";
                <fixed>;
            }
            <object> {
                <number> $plant;
                <text> "Plant";
                <text> "There is a tiny little plant in the pit, murmuring\n" _
                       "'Water, Water, ...'";
                <text> "The plant spurts into furious growth for a few seconds.";
                <text> "There is a 12-foot-tall beanstalk stretching up out of\n" _
                       "the pit, bellowing 'Water!! Water!!'";
                <text> "The plant grows explosively, almost filling the bottom\n" _
                       "of the pit.";
                <text> "There is a gigantic beanstalk stretching all the way\n" _
                       "up to the hole.";
                <text> "You've over-watered the plant!  It's shriveling up!\n" _
                       "It's, It's...";
            }
            <object> {
                <number> $plant-top;
                <text> "*Top of plant";
                <text> "You sense plant life in the west pit below you.";
                <text> "The top of a 12-foot-tall beanstalk is poking up out of\n" _
                       "the west pit.";
                <text> "There is a huge beanstalk growing out of the west pit up to\n" _
                       "the hole.";
                <fixed>;
            }
            <object> {
                <number> 26;
                <text> "*Stalactite";
                <unlisted>;
                <fixed>;
                <structure>;
            }
            <object> {
                <number> $shadowy-figure;
                <text> "*Shadowy figure";
                <text> "The shadowy figure seems to be trying to attract your attention.";
                <fixed>;
                <creature>;
            }
            <object> {
                <number> $axe;
                <text> "Dwarf's axe";
                <text> "There is a little axe here.";
                <text> "There is a little axe lying beside the bear.";
            }
            <object> {
                <number> 29;
                <text> "*Cave drawings";
                <text> "Ancient cave drawings.";
                <fixed>;
                <unlisted>;
                <structure>;
            }
            <object> {
                <number> 30;
                <text> "*Pirate";
                <fixed>;
                <creature>;
            }
            <object> {
                <number> $dragon;
                <text> "*Dragon";
                <text> "A huge green fierce dragon bars the way!";
                <text> "Congratulations!  You have just vanquished a dragon with\n" _
                       "your bare hands!  (Unbelievable, isn't it?)";
                <text> "The body of a huge green dead dragon is lying off to one\n" _
                       "side.";
                <fixed>;
                <creature>;
            }
            <object> {
                <number> $chasm; /* also bridge */
                <text> "*Chasm";
                <text> "A rickety wooden bridge extends across the chasm, vanishing\n" _
                       "into the mist.  A sign posted on the bridge reads:\n" _
                       "          'Stop!  Pay Troll!'";
                <text> "The wreckage of a bridge (and a dead bear) can be seen\n" _
                       "at the bottom of the chasm.";
                <fixed>;
                <structure>;
            }
            <object> {
                <number> $troll;
                <text> "*Troll";
                <text> "A burly troll stands by the bridge and insists you throw\n" _
                       "him a treasure before you may cross.";
                <text> "The troll steps out from beneath the bridge and blocks\n" _
                       "your way.";
                <fixed>;
                <creature>;
            }
            <object> {
                <number> $troll-hidden;
                <text> "*Phony troll";
                <text> "The troll is nowhere to be seen.";
                <fixed>;
                <creature>;
            }
            <object> {
                <number> $bear;
                <text> "";  
                <text> "There is a ferocious cave bear eyeing you from the far\n" _
                       "end of the room!";
                <text> "There is a gentle cave bear sitting placidly in one corner.";
                <text> "There is a contented-looking bear wandering about nearby.";
                <creature>;
            }
            <object> {
                <number> $message;
                <text> "*Message in second maze";
                <text> "There is a message scrawled in the dust in a flowery script,\n" _
                       "reading:\n" _
                       "           'This is not the maze where the'\n" _
                       "           'pirate leaves his treasure chest'";
                <fixed>;
                <structure>;
            }
            <object> {
                <number> 37;
                <text> "*Volcano and,or Geyser";
                <unlisted>;
                <fixed>;
                <structure>;
            }
            <object> {
                <number> $vend;
                <text> "*Vending machine";
                <text> "There is a massive vending machine here.  The instructions\n" _
                       "on it read:\n" _
                       "     'Drop coins here to receive fresh batteries.'";
                <fixed>;
            }
            <object> {
                <number> $batteries;
                <text> "Batteries";
                <text> "There are fresh batteries here.";
                <text> "Some worn-out batteries have been discarded nearby.";
            }
            <object> {
                <number> 40;
                <text> "*Carpet and,or moss";
                <text> "Carpet and moss";
                <fixed>;
                <unlisted>;
                <structure>;
            }
            <object> {
                <number> $satyr;
                <text> "*Satyr";
                <text> "A Satyr is dancing wildly around a giant Juniper bush!\n" _
                       "He sees you, smiles, and recites a Haiku:";
                <creature>;
            }
            <object> {
                <number> $tome;
                <text> "'Tome of Arcane JUNOS Knowledge'";
                <text> "The 'Tome of Arcane JUNOS Knowledge' is laying here on\n" _
                       "the floor.";
                <text> "This passage is very smudged, you can barely make it out:";
                <text> "This passage appears to have been typed, rather than scribed:";
                <text> "This passage was written with harsh thick lines:";
                <text> "This passage was clearly written by an elegant hand, probably\n" _
                       "an Elf's:";
            }
            <object> {
                <number> 43;
                <text> "SNMP MIB";
            }
            <object> {
                <number> 44;
            }
            <object> {
                <number> 45;
            }
            <object> {
                <number> 46;
            }
            <object> {
                <number> 47;
            }
            <object> {
                <number> 48;
            }
            <object> {
                <number> 49;
            }
            <object> {
                <number> 50;
                <text> "Large gold nugget";
                <text> "There is a large sparkling nugget of gold here!";
            }
            <object> {
                <number> 51;
                <text> "Several diamonds";
                <text> "There are diamonds here!";
            }
            <object> {
                <number> 52;
                <text> "Bars of silver";
                <text> "There are bars of silver here!";
            }
            <object> {
                <number> 53;
                <text> "Precious jewelry";
                <text> "There is precious jewelry here!";
            }
            <object> {
                <number> 54;
                <text> "Rare coins";
                <text> "There are many coins here!";
            }
            <object> {
                <number> 55;
                <text> "Treasure chest";
                <text> "The pirate's treasure chest is here!";
            }
            <object> {
                <number> 56;
                <text> "Golden eggs";
                <text> "There is a large nest here, full of golden eggs!";
                <text> "The nest of golden eggs has vanished!";
                <text> "Done!";
            }
            <object> {
                <number> 57;
                <text> "Jeweled trident";
                <text> "There is a jewel-encrusted trident here!";
            }
            <object> {
                <number> $vase;
                <text> "Ming vase";
                <text> "There is a delicate, precious, ming vase here!";
                <text> "The vase is now resting, delicately, on a velvet pillow.";
                <text> "The floor is littered with worthless shards of pottery.";
                <text> "The ming vase drops with a delicate crash.";
            }
            <object> {
                <number> 59;
                <text> "Egg-sized emerald";
                <text> "There is an emerald here the size of a plover's egg!";
            }
            <object> {
                <number> 60;
                <text> "Platinum pyramid";
                <text> "There is a platinum pyramid here, 8 inches on a side!";
            }
            <object> {
                <number> 61;
                <text> "Glistening pearl";
                <text> "Off to one side lies a glistening pearl!";
            }
            <object> {
                <number> $rug;
                <text> "Persian rug";
                <text> "There is a persian rug spread out on the floor!";
                <text> "The dragon is sprawled out on a persian rug!!";
            }
            <object> {
                <number> $spices;
                <text> "Rare spices";
                <text> "There are rare spices here!";
            }
            <object> {
                <number> 64;
                <text> "Golden chain";
                <text> "There is a golden chain lying in a heap on the floor!";
                <text> "The bear is locked to the wall with a golden chain!";
                <text> "There is a golden chain locked to the wall!";
            }
        }
        <vocabulary> {
            <word> {
                <word> "hill";
                <number> 2;
                <motion>;
            }
            <word> {
                <word> "road";
                <number> 2;
                <motion>;
            }
            <word> {
                <word> "enter";
                <number> 3;
                <motion>;
            }
            <word> {
                <word> "downstream";
                <number> 4;
                <motion>;
            }
            <word> {
                <word> "upstream";
                <number> 4;
                <motion>;
            }
            <word> {
                <word> "forest";
                <number> 6;
                <motion>;
            }
            <word> {
                <word> "forward";
                <number> 7;
                <motion>;
            }
            <word> {
                <word> "onward";
                <number> 7;
                <motion>;
            }
            <word> {
                <word> "back";
                <number> 8;
                <motion>;
            }
            <word> {
                <word> "retreat";
                <number> 8;
                <motion>;
            }
            <word> {
                <word> "return";
                <number> 8;
                <motion>;
            }
            <word> {
                <word> "valley";
                <number> 9;
                <motion>;
            }
            <word> {
                <word> "stairs";
                <number> 10;
                <motion>;
            }
            <word> {
                <word> "exit";
                <number> 11;
                <motion>;
            }
            <word> {
                <word> "leave";
                <number> 11;
                <motion>;
            }
            <word> {
                <word> "out";
                <number> 11;
                <motion>;
            }
            <word> {
                <word> "outside";
                <number> 11;
                <motion>;
            }
            <word> {
                <word> "building";
                <number> 12;
                <motion>;
            }
            <word> {
                <word> "house";
                <number> 12;
                <motion>;
            }
            <word> {
                <word> "gully";
                <number> 13;
                <motion>;
            }
            <word> {
                <word> "stream";
                <number> 14;
                <motion>;
            }
            <word> {
                <word> "rock";
                <number> 15;
                <motion>;
            }
            <word> {
                <word> "bed";
                <number> 16;
                <motion>;
            }
            <word> {
                <word> "crawl";
                <number> 17;
                <motion>;
            }
            <word> {
                <word> "cobblestone";
                <number> 18;
                <motion>;
            }
            <word> {
                <word> "in";
                <number> 19;
                <motion>;
            }
            <word> {
                <word> "inside";
                <number> 19;
                <motion>;
            }
            <word> {
                <word> "inward";
                <number> 19;
                <motion>;
            }
            <word> {
                <word> "surface";
                <number> 20;
                <motion>;
            }
            <word> {
                <word> "nowhere";
                <number> 21;
                <motion>;
            }
            <word> {
                <word> "null";
                <number> 21;
                <motion>;
            }
            <word> {
                <word> "dark";
                <number> 22;
                <motion>;
            }
            <word> {
                <word> "passage";
                <number> 23;
                <motion>;
            }
            <word> {
                <word> "tunnel";
                <number> 23;
                <motion>;
            }
            <word> {
                <word> "low";
                <number> 24;
                <motion>;
            }
            <word> {
                <word> "canyon";
                <number> 25;
                <motion>;
            }
            <word> {
                <word> "awkward";
                <number> 26;
                <motion>;
            }
            <word> {
                <word> "giant";
                <number> 27;
                <motion>;
            }
            <word> {
                <word> "view";
                <number> 28;
                <motion>;
            }
            <word> {
                <word> "above";
                <number> 29;
                <motion>;
            }
            <word> {
                <word> "ascend";
                <number> 29;
                <motion>;
            }
            <word> {
                <word> "u";
                <number> 29;
                <motion>;
            }
            <word> {
                <word> "up";
                <number> 29;
                <motion>;
            }
            <word> {
                <word> "upward";
                <number> 29;
                <motion>;
            }
            <word> {
                <word> "d";
                <number> 30;
                <motion>;
            }
            <word> {
                <word> "descend";
                <number> 30;
                <motion>;
            }
            <word> {
                <word> "down";
                <number> 30;
                <motion>;
            }
            <word> {
                <word> "downward";
                <number> 30;
                <motion>;
            }
            <word> {
                <word> "pit";
                <number> 31;
                <motion>;
            }
            <word> {
                <word> "outdoors";
                <number> 32;
                <motion>;
            }
            <word> {
                <word> "crack";
                <number> 33;
                <motion>;
            }
            <word> {
                <word> "steps";
                <number> 34;
                <motion>;
            }
            <word> {
                <word> "dome";
                <number> 35;
                <motion>;
            }
            <word> {
                <word> "left";
                <number> 36;
                <motion>;
            }
            <word> {
                <word> "right";
                <number> 37;
                <motion>;
            }
            <word> {
                <word> "hall";
                <number> 38;
                <motion>;
            }
            <word> {
                <word> "jump";
                <number> $jump;
                <motion>;
            }
            <word> {
                <word> "barren";
                <number> 40;
                <motion>;
            }
            <word> {
                <word> "over";
                <number> $over;
                <motion>;
            }
            <word> {
                <word> "across";
                <number> $across;
                <motion>;
            }
            <word> {
                <word> "e";
                <number> 43;
                <motion>;
            }
            <word> {
                <word> "east";
                <number> 43;
                <motion>;
            }
            <word> {
                <word> "w";
                <number> 44;
                <motion>;
            }
            <word> {
                <word> "west";
                <number> 44;
                <motion>;
            }
            <word> {
                <word> "n";
                <number> 45;
                <motion>;
            }
            <word> {
                <word> "north";
                <number> 45;
                <motion>;
            }
            <word> {
                <word> "s";
                <number> 46;
                <motion>;
            }
            <word> {
                <word> "south";
                <number> 46;
                <motion>;
            }
            <word> {
                <word> "ne";
                <number> 47;
                <motion>;
            }
            <word> {
                <word> "northeast";
                <number> 47;
                <motion>;
            }
            <word> {
                <word> "north-east";
                <number> 47;
                <motion>;
            }
            <word> {
                <word> "se";
                <number> 48;
                <motion>;
            }
            <word> {
                <word> "southeast";
                <number> 48;
                <motion>;
            }
            <word> {
                <word> "south-east";
                <number> 48;
                <motion>;
            }
            <word> {
                <word> "sw";
                <number> 49;
                <motion>;
            }
            <word> {
                <word> "southwest";
                <number> 49;
                <motion>;
            }
            <word> {
                <word> "south-west";
                <number> 49;
                <motion>;
            }
            <word> {
                <word> "nw";
                <number> 50;
                <motion>;
            }
            <word> {
                <word> "northwest";
                <number> 50;
                <motion>;
            }
            <word> {
                <word> "north-west";
                <number> 50;
                <motion>;
            }
            <word> {
                <word> "debris";
                <number> 51;
                <motion>;
            }
            <word> {
                <word> "hole";
                <number> 52;
                <motion>;
            }
            <word> {
                <word> "wall";
                <number> 53;
                <motion>;
            }
            <word> {
                <word> "broken";
                <number> 54;
                <motion>;
            }
            <word> {
                <word> "y2";
                <number> 55;
                <motion>;
            }
            <word> {
                <word> "climb";
                <number> 56;
                <motion>;
            }
            <word> {
                <word> "describe";
                <number> 57;
                <motion>;
            }
            <word> {
                <word> "examine";
                <number> 57;
                <motion>;
            }
            <word> {
                <word> "look";
                <number> 57;
                <motion>;
            }
            <word> {
                <word> "touch";
                <number> 57;
                <motion>;
            }
            <word> {
                <word> "floor";
                <number> 58;
                <motion>;
            }
            <word> {
                <word> "room";
                <number> 59;
                <motion>;
            }
            <word> {
                <word> "slit";
                <number> 60;
                <motion>;
            }
            <word> {
                <word> "slab";
                <number> 61;
                <motion>;
            }
            <word> {
                <word> "xyzzy";
                <number> 62;
                <motion>;
            }
            <word> {
                <word> "depression";
                <number> 63;
                <motion>;
            }
            <word> {
                <word> "entrance";
                <number> 64;
                <motion>;
            }
            <word> {
                <word> "plugh";
                <number> 65;
                <motion>;
            }
            <word> {
                <word> "secret";
                <number> 66;
                <motion>;
            }
            <word> {
                <word> "cave";
                <number> 67;
                <motion>;
            }
            <word> {
                <word> "cross";
                <number> $cross;
                <motion>;
            }
            <word> {
                <word> "bedquilt";
                <number> 70;
                <motion>;
            }
            <word> {
                <word> "plover";
                <number> 71;
                <motion>;
            }
            <word> {
                <word> "oriental";
                <number> 72;
                <motion>;
            }
            <word> {
                <word> "cavern";
                <number> 73;
                <motion>;
            }
            <word> {
                <word> "shell";
                <number> 74;
                <motion>;
            }
            <word> {
                <word> "reservoir";
                <number> 75;
                <motion>;
            }
            <word> {
                <word> "main";
                <number> 76;
                <motion>;
            }
            <word> {
                <word> "office";
                <number> 76;
                <motion>;
            }
            <word> {
                <word> "fork";
                <number> 77;
                <motion>;
            }
            <word> {
                <word> "instructions";
                <number> 78;
                <motion>;
            }
            <word> {
                <word> "key";
                <number> 1;
                <object>;
            }
            <word> {
                <word> "keys";
                <number> 1;
                <object>;
            }
            <word> {
                <word> "headlamp";
                <number> 2;
                <object>;
            }
            <word> {
                <word> "lamp";
                <number> 2;
                <object>;
            }
            <word> {
                <word> "lantern";
                <number> 2;
                <object>;
            }
            <word> {
                <word> "grate";
                <number> 3;
                <object>;
            }
            <word> {
                <word> "cage";
                <number> 4;
                <object>;
            }
            <word> {
                <word> "rod";
                <number> 5;
                <object>;
            }
            <word> {
                <word> "rod";
                <number> 6;
                <object>;
            }
            <word> {
                <word> "steps";
                <number> 7;
                <object>;
            }
            <word> {
                <word> "bird";
                <number> 8;
                <object>;
            }
            <word> {
                <word> "door";
                <number> 9;
                <object>;
            }
            <word> {
                <word> "pillow";
                <number> 10;
                <object>;
            }
            <word> {
                <word> "velvet";
                <number> 10;
                <object>;
            }
            <word> {
                <word> "snake";
                <number> 11;
                <object>;
            }
            <word> {
                <word> "fissure";
                <number> 12;
                <object>;
            }
            <word> {
                <word> "tablet";
                <number> 13;
                <object>;
            }
            <word> {
                <word> "clam";
                <number> 14;
                <object>;
            }
            <word> {
                <word> "oyster";
                <number> 15;
                <object>;
            }
            <word> {
                <word> "spelunker today";
                <number> 16;
                <object>;
            }
            <word> {
                <word> "issue";
                <number> 16;
                <object>;
            }
            <word> {
                <word> "magazine";
                <number> 16;
                <object>;
            }
            <word> {
                <word> "spelunker";
                <number> 16;
                <object>;
            }
            <word> {
                <word> "dwarf";
                <number> 17;
                <object>;
            }
            <word> {
                <word> "dwarves";
                <number> 17;
                <object>;
            }
            <word> {
                <word> "dwarfs";
                <number> 17;
                <object>;
            }
            <word> {
                <word> "knife";
                <number> 18;
                <object>;
            }
            <word> {
                <word> "knives";
                <number> 18;
                <object>;
            }
            <word> {
                <word> "food";
                <number> 19;
                <object>;
            }
            <word> {
                <word> "rations";
                <number> 19;
                <object>;
            }
            <word> {
                <word> "bottle";
                <number> 20;
                <object>;
            }
            <word> {
                <word> "jar";
                <number> 20;
                <object>;
            }
            <word> {
                <word> "h2o";
                <number> 21;
                <object>;
            }
            <word> {
                <word> "water";
                <number> 21;
                <object>;
            }
            <word> {
                <word> "oil";
                <number> 22;
                <object>;
            }
            <word> {
                <word> "mirror";
                <number> 23;
                <object>;
            }
            <word> {
                <word> "beans";
                <number> 24;
                <object>;
            }
            <word> {
                <word> "plant";
                <number> 24;
                <object>;
            }
            <word> {
                <word> "plant";
                <number> 25;
                <object>;
            }
            <word> {
                <word> "stalactite";
                <number> 26;
                <object>;
            }
            <word> {
                <word> "figure";
                <number> 27;
                <object>;
            }
            <word> {
                <word> "shadow";
                <number> 27;
                <object>;
            }
            <word> {
                <word> "axe";
                <number> 28;
                <object>;
            }
            <word> {
                <word> "drawing";
                <number> 29;
                <object>;
            }
            <word> {
                <word> "pirate";
                <number> 30;
                <object>;
            }
            <word> {
                <word> "dragon";
                <number> 31;
                <object>;
            }
            <word> {
                <word> "chasm";
                <number> 32;
                <object>;
            }
            <word> {
                <word> "troll";
                <number> 33;
                <object>;
            }
            <word> {
                <word> "troll";
                <number> 34;
                <object>;
            }
            <word> {
                <word> "bear";
                <number> 35;
                <object>;
            }
            <word> {
                <word> "message";
                <number> 36;
                <object>;
            }
            <word> {
                <word> "geyser";
                <number> 37;
                <object>;
            }
            <word> {
                <word> "volcano";
                <number> 37;
                <object>;
            }
            <word> {
                <word> "machine";
                <number> 38;
                <object>;
            }
            <word> {
                <word> "vending";
                <number> 38;
                <object>;
            }
            <word> {
                <word> "batteries";
                <number> 39;
                <object>;
            }
            <word> {
                <word> "battery";
                <number> 39;
                <object>;
            }
            <word> {
                <word> "carpet";
                <number> 40;
                <object>;
            }
            <word> {
                <word> "moss";
                <number> 40;
                <object>;
            }
            <word> {
                <word> "satyr";
                <number> 41;
                <object>;
            }
            <word> {
                <word> "book";
                <number> 42;
                <object>;
            }
            <word> {
                <word> "tome";
                <number> 42;
                <object>;
            }
            <word> {
                <word> "mib";
                <number> 43;
                <object>;
            }
            <word> {
                <word> "gold";
                <number> 50;
                <object>;
            }
            <word> {
                <word> "nugget";
                <number> 50;
                <object>;
            }
            <word> {
                <word> "diamonds";
                <number> 51;
                <object>;
            }
            <word> {
                <word> "bars";
                <number> 52;
                <object>;
            }
            <word> {
                <word> "silver";
                <number> 52;
                <object>;
            }
            <word> {
                <word> "jewel";
                <number> 53;
                <object>;
            }
            <word> {
                <word> "jewelry";
                <number> 53;
                <object>;
            }
            <word> {
                <word> "jewels";
                <number> 53;
                <object>;
            }
            <word> {
                <word> "coins";
                <number> 54;
                <object>;
            }
            <word> {
                <word> "box";
                <number> 55;
                <object>;
            }
            <word> {
                <word> "chest";
                <number> 55;
                <object>;
            }
            <word> {
                <word> "treasure";
                <number> 55;
                <object>;
            }
            <word> {
                <word> "egg";
                <number> 56;
                <object>;
            }
            <word> {
                <word> "eggs";
                <number> 56;
                <object>;
            }
            <word> {
                <word> "nest";
                <number> 56;
                <object>;
            }
            <word> {
                <word> "trident";
                <number> 57;
                <object>;
            }
            <word> {
                <word> "ming";
                <number> 58;
                <object>;
            }
            <word> {
                <word> "pottery";
                <number> 58;
                <object>;
            }
            <word> {
                <word> "shard";
                <number> 58;
                <object>;
            }
            <word> {
                <word> "vase";
                <number> 58;
                <object>;
            }
            <word> {
                <word> "emerald";
                <number> 59;
                <object>;
            }
            <word> {
                <word> "platinum";
                <number> 60;
                <object>;
            }
            <word> {
                <word> "pyramid";
                <number> 60;
                <object>;
            }
            <word> {
                <word> "pearl";
                <number> 61;
                <object>;
            }
            <word> {
                <word> "persian";
                <number> 62;
                <object>;
            }
            <word> {
                <word> "rug";
                <number> 62;
                <object>;
            }
            <word> {
                <word> "spice";
                <number> 63;
                <object>;
            }
            <word> {
                <word> "spices";
                <number> 63;
                <object>;
            }
            <word> {
                <word> "chain";
                <number> 64;
                <object>;
            }
            <word> {
                <word> "capture";
                <number> 1;
                <verb>;
                <default-message> 24;
            }
            <word> {
                <word> "carry";
                <number> 1;
                <verb>;
                <default-message> 24;
            }
            <word> {
                <word> "catch";
                <number> 1;
                <verb>;
                <default-message> 24;
            }
            <word> {
                <word> "get";
                <number> 1;
                <verb>;
                <default-message> 24;
            }
            <word> {
                <word> "keep";
                <number> 1;
                <verb>;
                <default-message> 24;
            }
            <word> {
                <word> "steal";
                <number> 1;
                <verb>;
                <default-message> 24;
            }
            <word> {
                <word> "take";
                <number> 1;
                <verb>;
                <default-message> 24;
            }
            <word> {
                <word> "tote";
                <number> 1;
                <verb>;
                <default-message> 24;
            }
            <word> {
                <word> "discard";
                <number> 2;
                <verb>;
                <default-message> 29;
            }
            <word> {
                <word> "drop";
                <number> 2;
                <verb>;
                <default-message> 29;
            }
            <word> {
                <word> "dump";
                <number> 2;
                <verb>;
                <default-message> 29;
            }
            <word> {
                <word> "free";
                <number> 2;
                <verb>;
                <default-message> 29;
            }
            <word> {
                <word> "release";
                <number> 2;
                <verb>;
                <default-message> 29;
            }
            <word> {
                <word> "chant";
                <number> 3;
                <verb>;
            }
            <word> {
                <word> "mumble";
                <number> 3;
                <verb>;
            }
            <word> {
                <word> "say";
                <number> 3;
                <verb>;
            }
            <word> {
                <word> "sing";
                <number> 3;
                <verb>;
            }
            <word> {
                <word> "utter";
                <number> 3;
                <verb>;
            }
            <word> {
                <word> "open";
                <number> 4;
                <verb>;
                <default-message> 33;
            }
            <word> {
                <word> "unlock";
                <number> 4;
                <verb>;
                <default-message> 33;
            }
            <word> {
                <word> "nothing";
                <number> 5;
                <verb>;
            }
            <word> {
                <word> "close";
                <number> 6;
                <verb>;
                <default-message> 33;
            }
            <word> {
                <word> "lock";
                <number> 6;
                <verb>;
                <default-message> 33;
            }
            <word> {
                <word> "light";
                <number> 7;
                <verb>;
                <default-message> 38;
            }
            <word> {
                <word> "on";
                <number> 7;
                <verb>;
                <default-message> 38;
            }
            <word> {
                <word> "extinguish";
                <number> 8;
                <verb>;
                <default-message> 38;
            }
            <word> {
                <word> "off";
                <number> 8;
                <verb>;
                <default-message> 38;
            }
            <word> {
                <word> "shake";
                <number> 9;
                <verb>;
                <default-message> 42;
            }
            <word> {
                <word> "swing";
                <number> 9;
                <verb>;
                <default-message> 42;
            }
            <word> {
                <word> "wave";
                <number> 9;
                <verb>;
                <default-message> 42;
            }
            <word> {
                <word> "calm";
                <number> 10;
                <verb>;
                <default-message> 14;
            }
            <word> {
                <word> "placate";
                <number> 10;
                <verb>;
                <default-message> 14;
            }
            <word> {
                <word> "tame";
                <number> 10;
                <verb>;
                <default-message> 14;
            }
            <word> {
                <word> "continue";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "explore";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "follow";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "go";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "goto";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "proceed";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "run";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "travel";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "turn";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "walk";
                <number> 11;
                <verb>;
                <default-message> 43;
            }
            <word> {
                <word> "attack";
                <number> 12;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "fight";
                <number> 12;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "hit";
                <number> 12;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "kill";
                <number> 12;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "strike";
                <number> 12;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "pour";
                <number> 13;
                <verb>;
                <default-message> 29;
            }
            <word> {
                <word> "devour";
                <number> 14;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "eat";
                <number> 14;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "drink";
                <number> 15;
                <verb>;
                <default-message> 73;
            }
            <word> {
                <word> "rub";
                <number> 16;
                <verb>;
                <default-message> 75;
            }
            <word> {
                <word> "throw";
                <number> 17;
                <verb>;
                <default-message> 29;
            }
            <word> {
                <word> "toss";
                <number> 17;
                <verb>;
                <default-message> 29;
            }
            <word> {
                <word> "quit";
                <number> 18;
                <verb>;
                <default-message> 13;
            }
            <word> {
                <word> "find";
                <number> 19;
                <verb>;
                <default-message> 59;
            }
            <word> {
                <word> "inventory";
                <number> 20;
                <verb>;
                <default-message> 59;
            }
            <word> {
                <word> "invent";
                <number> 20;
                <verb>;
                <default-message> 59;
            }
            <word> {
                <word> "inven";
                <number> 20;
                <verb>;
                <default-message> 59;
            }
            <word> {
                <word> "inv";
                <number> 20;
                <verb>;
                <default-message> 59;
            }
            <word> {
                <word> "feed";
                <number> 21;
                <verb>;
                <default-message> 174;
            }
            <word> {
                <word> "fill";
                <number> 22;
                <verb>;
                <default-message> 109;
            }
            <word> {
                <word> "blast";
                <number> 23;
                <verb>;
                <default-message> 67;
            }
            <word> {
                <word> "blowup";
                <number> 23;
                <verb>;
                <default-message> 67;
            }
            <word> {
                <word> "detonate";
                <number> 23;
                <verb>;
                <default-message> 67;
            }
            <word> {
                <word> "ignite";
                <number> 23;
                <verb>;
                <default-message> 67;
            }
            <word> {
                <word> "score";
                <number> 24;
                <verb>;
                <default-message> 13;
            }
            <word> {
                <word> "fee";
                <number> 25;
                <verb>;
                <default-message> 147;
            }
            <word> {
                <word> "fie";
                <number> 25;
                <verb>;
                <default-message> 147;
            }
            <word> {
                <word> "foe";
                <number> 25;
                <verb>;
                <default-message> 147;
            }
            <word> {
                <word> "foo";
                <number> 25;
                <verb>;
                <default-message> 147;
            }
            <word> {
                <word> "fum";
                <number> 25;
                <verb>;
                <default-message> 147;
            }
            <word> {
                <word> "brief";
                <number> 26;
                <verb>;
                <default-message> 155;
            }
            <word> {
                <word> "peruse";
                <number> 27;
                <verb>;
                <default-message> 195;
            }
            <word> {
                <word> "read";
                <number> 27;
                <verb>;
                <default-message> 195;
            }
            <word> {
                <word> "break";
                <number> 28;
                <verb>;
                <default-message> 146;
            }
            <word> {
                <word> "shatter";
                <number> 28;
                <verb>;
                <default-message> 146;
            }
            <word> {
                <word> "smash";
                <number> 28;
                <verb>;
                <default-message> 146;
            }
            <word> {
                <word> "disturb";
                <number> 29;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "wake";
                <number> 29;
                <verb>;
                <default-message> 110;
            }
            <word> {
                <word> "pause";
                <number> 30;
                <verb>;
                <default-message> 13;
            }
            <word> {
                <word> "save";
                <number> 30;
                <verb>;
                <default-message> 13;
            }
            <word> {
                <word> "suspend";
                <number> 30;
                <verb>;
                <default-message> 13;
            }
            <word> {
                <word> "hours";
                <number> 31;
                <verb>;
                <default-message> 13;
            }
            <word> {
                <word> "log";
                <number> 32;
                <verb>;
            }
            <word> {
                <word> "restore";
                <number> 33;
                <verb>;
                <default-message> 13;
            }
            <word> {
                <word> "load";
                <number> 33;
                <verb>;
                <default-message> 13;
            }
            <word> {
                <word> "set-room";
                <number> $set-room;
                <verb>;
                <debug-only>;
                <default-message> 205;
            }
            <word> {
                <word> "set-dead";
                <number> $set-dead;
                <verb>;
                <debug-only>;
                <default-message> 205;
            }
            <word> {
                <word> "clear";
                <number> $clear;
                <verb>;
            }
            <word> {
                <word> "set-tally";
                <number> $set-tally;
                <verb>;
                <debug-only>;
                <default-message> 205;
            }
            <word> {
                <word> "set-clock";
                <number> $set-clock;
                <verb>;
                <debug-only>;
                <default-message> 205;
            }
            <word> {
                <word> "set-clock2";
                <number> $set-clock2;
                <verb>;
                <debug-only>;
                <default-message> 205;
            }
            <word> {
                <word> "set-limit";
                <number> $set-limit;
                <verb>;
                <debug-only>;
                <default-message> 205;
            }
            <word> {
                <word> "fee";
                <number> 1;
                <special-verb>;
            }
            <word> {
                <word> "fie";
                <number> 2;
                <special-verb>;
            }
            <word> {
                <word> "foe";
                <number> 3;
                <special-verb>;
            }
            <word> {
                <word> "foo";
                <number> 4;
                <special-verb>;
            }
            <word> {
                <word> "fum";
                <number> 5;
                <special-verb>;
            }
            <word> {
                <word> "abra";
                <number> 50;
                <special-verb>;
            }
            <word> {
                <word> "abracadabra";
                <number> 50;
                <special-verb>;
            }
            <word> {
                <word> "hocus";
                <number> 50;
                <special-verb>;
            }
            <word> {
                <word> "opensesame";
                <number> 50;
                <special-verb>;
            }
            <word> {
                <word> "pocus";
                <number> 50;
                <special-verb>;
            }
            <word> {
                <word> "sesame";
                <number> 50;
                <special-verb>;
            }
            <word> {
                <word> "shazam";
                <number> 50;
                <special-verb>;
            }
            <word> {
                <word> "?";
                <number> 51;
                <special-verb>;
            }
            <word> {
                <word> "help";
                <number> 51;
                <special-verb>;
            }
            <word> {
                <word> "tree";
                <number> 64;
                <special-verb>;
            }
            <word> {
                <word> "trees";
                <number> 64;
                <special-verb>;
            }
            <word> {
                <word> "dig";
                <number> 66;
                <special-verb>;
            }
            <word> {
                <word> "excavate";
                <number> 66;
                <special-verb>;
            }
            <word> {
                <word> "lost";
                <number> 68;
                <special-verb>;
            }
            <word> {
                <word> "mist";
                <number> 69;
                <special-verb>;
            }
            /* These next words are filtered for the kids sake */
            <word> {
                <word> "#:^?"; 
                <number> 79;
                <special-verb>;
            }
            <word> {
                <word> "%^&*"; 
                <number> 79;
                <special-verb>;
            }
            <word> {
                <word> "%^&*~;"; 
                <number> 79;
                <special-verb>;
            }
            <word> {
                <word> "!@#$";    
                <number> 79;
                <special-verb>;
            }
            <word> {
                <word> ">'~;";   
                <number> 79;
                <special-verb>;
            }
            <word> {
                <word> "stop";
                <number> 139;
                <special-verb>;
            }
            <word> {
                <word> "info";
                <number> 142;
                <special-verb>;
            }
            <word> {
                <word> "information";
                <number> 142;
                <special-verb>;
            }
            <word> {
                <word> "swim";
                <number> 147;
                <special-verb>;
            }
        }
        <cave-travel> {
            <room> {
                <number> 1;
                <travel-destination> {
                    <condition> 0;
                    <motion> 2;
                    <room> 2;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 2;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 2;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 3;
                    <room> 3;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 12;
                    <room> 3;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 19;
                    <room> 3;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 3;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 5;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 13;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 14;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 6;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 63;
                    <room> 8;
                }
            }
            <room> {
                <number> 2;
                <travel-destination> {
                    <condition> 0;
                    <motion> 2;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 12;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 7;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 6;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 5;
                }
            }
            <room> {
                <number> 3;
                <travel-destination> {
                    <condition> 0;
                    <motion> 3;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 32;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 62;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 65;
                    <room> 33;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 5;
                    <room> 79;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 14;
                    <room> 79;
                }
            }
            <room> {
                <number> 4;
                <travel-destination> {
                    <condition> 0;
                    <motion> 4;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 12;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 6;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 5;
                    <room> 7;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 7;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 7;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 63;
                    <room> 8;
                }
            }
            <room> {
                <number> 5;
                <travel-destination> {
                    <condition> 0;
                    <motion> 9;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 50;
                    <motion> 6;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 50;
                    <motion> 7;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 50;
                    <motion> 45;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 6;
                    <room> 6;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 5;
                }
            }
            <room> {
                <number> 6;
                <travel-destination> {
                    <condition> 0;
                    <motion> 2;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 9;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 6;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 5;
                }
            }
            <room> {
                <number> 7;
                <travel-destination> {
                    <condition> 0;
                    <motion> 12;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 4;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 4;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 6;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 5;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 15;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 16;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 60;
                    <room> 595;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 14;
                    <room> 595;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 595;
                }
            }
            <room> {
                <number> 8;
                <travel-destination> {
                    <condition> 0;
                    <motion> 6;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 5;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 12;
                    <room> 1;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 4;
                    <room> 7;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 13;
                    <room> 7;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 7;
                }
                <travel-destination> {
                    <condition> 303;
                    <motion> 3;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 303;
                    <motion> 19;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 303;
                    <motion> 30;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 3;
                    <room> 593;
                }
            }
            <room> {
                <number> 9;
                <travel-destination> {
                    <condition> 303;
                    <motion> 11;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 303;
                    <motion> 29;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 593;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 18;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 19;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 31;
                    <room> 14;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 51;
                    <room> 11;
                }
            }
            <room> {
                <number> 10;
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 20;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 21;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 19;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 22;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 51;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 31;
                    <room> 14;
                }
            }
            <room> {
                <number> 11;
                <travel-destination> {
                    <condition> 303;
                    <motion> 63;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 64;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 18;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 24;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 10;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 25;
                    <room> 12;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 19;
                    <room> 12;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 12;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 12;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 62;
                    <room> 3;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 31;
                    <room> 14;
                }
            }
            <room> {
                <number> 12;
                <travel-destination> {
                    <condition> 303;
                    <motion> 63;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 64;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 51;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 19;
                    <room> 13;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 13;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 13;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 31;
                    <room> 14;
                }
            }
            <room> {
                <number> 13;
                <travel-destination> {
                    <condition> 303;
                    <motion> 63;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 64;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 51;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 25;
                    <room> 12;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 12;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 14;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 31;
                    <room> 14;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 14;
                }
            }
            <room> {
                <number> 14;
                <travel-destination> {
                    <condition> 303;
                    <motion> 63;
                    <room> 8;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 64;
                    <room> 9;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 51;
                    <room> 11;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 13;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 13;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 30;
                    <room> 20;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 31;
                    <room> 20;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 34;
                    <room> 20;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 15;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 33;
                    <room> 16;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 16;
                }
            }
            <room> {
                <number> 15;
                <travel-destination> {
                    <condition> 0;
                    <motion> 36;
                    <room> 18;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 18;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 7;
                    <room> 17;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 38;
                    <room> 17;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 17;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 10;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 29;
                    <room> 22;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 31;
                    <room> 22;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 34;
                    <room> 22;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 35;
                    <room> 22;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 23;
                    <room> 22;
                }
                <travel-destination> {
                    <condition> 150;
                    <motion> 43;
                    <room> 22;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 14;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 55;
                    <room> 34;
                }
            }
            <room> {
                <number> 16;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 14;
                }
            }
            <room> {
                <number> 17;
                <travel-destination> {
                    <condition> 0;
                    <motion> 38;
                    <room> 15;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 15;
                }
                <travel-destination> {
                    <condition> 312;
                    <motion> $jump;
                    <room> 596;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> 7;
                    <room> 21;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> $over;
                    <room> 597;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> $across;
                    <room> 597;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> 44;
                    <room> 597;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> $cross;
                    <room> 597;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $over;
                    <room> 27;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $cross;
                    <room> 27;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $across;
                    <room> 27;
                }
            }
            <room> {
                <number> 18;
                <travel-destination> {
                    <condition> 0;
                    <motion> 38;
                    <room> 15;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 15;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 15;
                }
            }
            <room> {
                <number> 19;
                <travel-destination> {
                    <condition> 0;
                    <motion> 10;
                    <room> 15;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 15;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 15;
                }
                <travel-destination> {
                    <condition> 311;
                    <motion> 45;
                    <room> 28;
                }
                <travel-destination> {
                    <condition> 311;
                    <motion> 36;
                    <room> 28;
                }
                <travel-destination> {
                    <condition> 311;
                    <motion> 46;
                    <room> 29;
                }
                <travel-destination> {
                    <condition> 311;
                    <motion> 37;
                    <room> 29;
                }
                <travel-destination> {
                    <condition> 311;
                    <motion> 44;
                    <room> 30;
                }
                <travel-destination> {
                    <condition> 311;
                    <motion> 7;
                    <room> 30;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 32;
                }
                <travel-destination> {
                    <condition> 35;
                    <motion> 49;
                    <room> 74;
                }
                <travel-destination> {
                    <condition> 211;
                    <motion> 49;
                    <room> 32;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 66;
                    <room> 74;
                }
            }
            <room> {
                <number> 20;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 0;
                }
            }
            <room> {
                <number> 21;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 0;
                }
            }
            <room> {
                <number> 22;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 15;
                }
            }
            <room> {
                <number> 23;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 67;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $across;
                    <room> 67;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 68;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 61;
                    <room> 68;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 25;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 31;
                    <room> 25;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 52;
                    <room> 648;
                }
            }
            <room> {
                <number> 24;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 67;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 67;
                }
            }
            <room> {
                <number> 25;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 23;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 23;
                }
                /*<travel-destination> { 
                    <condition> 724;
                    <motion> 56;
                    <room> 31;
                }*/
                <travel-destination> {
                    <condition> 724; 
                    <motion> 56;
                    <room> 26;
                }
            }
            <room> {
                <number> 26;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 88;
                }
            }
            <room> {
                <number> 27;
                <travel-destination> {
                    <condition> 312;
                    <motion> $jump;
                    <room> 596;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> 7;
                    <room> 21;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> $over;
                    <room> 597;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> $across;
                    <room> 597;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> 43;
                    <room> 597;
                }
                <travel-destination> {
                    <condition> 412;
                    <motion> $cross;
                    <room> 597;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $over;
                    <room> 17;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $cross;
                    <room> 17;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $across;
                    <room> 17;
                }
                
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 40;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 41;
                }
            }
            <room> {
                <number> 28;
                <travel-destination> {
                    <condition> 0;
                    <motion> 38;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 33;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 55;
                    <room> 33;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 36;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 52;
                    <room> 36;
                }
            }
            <room> {
                <number> 29;
                <travel-destination> {
                    <condition> 0;
                    <motion> 38;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 19;
                }
            }
            <room> {
                <number> 30;
                <travel-destination> {
                    <condition> 0;
                    <motion> 38;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 62;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 62;
                }
            }
            <room> {
                <number> 31;
                <travel-destination> {
                    <condition> 524;
                    <motion> 1;
                    <room> 89;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 90;
                }
            }
            <room> {
                <number> 32;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 19;
                }
            }
            <room> {
                <number> 33;
                <travel-destination> {
                    <condition> 0;
                    <motion> 65;
                    <room> 3;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 28;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 34;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 53;
                    <room> 34;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 54;
                    <room> 34;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 35;
                }
                <travel-destination> {
                    <condition> 159;
                    <motion> 71;
                    <room> 302;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 71;
                    <room> 100;
                }
            }
            <room> {
                <number> 34;
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 33;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 55;
                    <room> 33;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 15;
                }
            }
            <room> {
                <number> 35;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 33;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 55;
                    <room> 33;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $jump;
                    <room> 20;
                }
            }
            <room> {
                <number> 36;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 37;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 37;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 28;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 52;
                    <room> 28;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 39;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 70;
                    <room> 65;
                }
            }
            <room> {
                <number> 37;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 36;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 36;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 38;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 31;
                    <room> 38;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 56;
                    <room> 38;
                }
            }
            <room> {
                <number> 38;
                <travel-destination> {
                    <condition> 0;
                    <motion> 56;
                    <room> 37;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 37;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 37;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 60;
                    <room> 595;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 14;
                    <room> 595;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 595;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 4;
                    <room> 595;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 5;
                    <room> 595;
                }
            }
            <room> {
                <number> 39;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 36;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 36;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 64;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 52;
                    <room> 64;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 58;
                    <room> 64;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 70;
                    <room> 65;
                }
            }
            <room> {
                <number> 40;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 41;
                }
            }
            <room> {
                <number> 41;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 42;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 42;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 42;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 56;
                    <room> 42;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 27;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 59;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 60;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 60;
                }
            }
            <room> {
                <number> 42;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 41;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 42;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 43;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 45;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 80;
                }
            }
            <room> {
                <number> 43;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 42;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 44;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 45;
                }
            }
            <room> {
                <number> 44;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 43;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 48;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 50;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 82;
                }
            }
            <room> {
                <number> 45;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 42;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 43;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 46;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 47;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 87;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 87;
                }
            }
            <room> {
                <number> 46;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 45;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 45;
                }
            }
            <room> {
                <number> 47;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 45;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 45;
                }
            }
            <room> {
                <number> 48;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 44;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 44;
                }
            }
            <room> {
                <number> 49;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 50;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 51;
                }
            }
            <room> {
                <number> 50;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 44;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 49;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 51;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 52;
                }
            }
            <room> {
                <number> 51;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 49;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 50;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 52;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 53;
                }
            }
            <room> {
                <number> 52;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 50;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 51;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 52;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 53;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 55;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 86;
                }
            }
            <room> {
                <number> 53;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 51;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 52;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 54;
                }
            }
            <room> {
                <number> 54;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 53;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 53;
                }
            }
            <room> {
                <number> 55;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 52;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 55;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 56;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 57;
                }
            }
            <room> {
                <number> 56;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 55;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 55;
                }
            }
            <room> {
                <number> 57;
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 13;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 56;
                    <room> 13;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 55;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 58;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 83;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 84;
                }
            }
            <room> {
                <number> 58;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 57;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 57;
                }
            }
            <room> {
                <number> 59;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 27;
                }
            }
            <room> {
                <number> 60;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 41;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 41;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 41;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 61;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 62;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 62;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 52;
                    <room> 62;
                }
            }
            <room> {
                <number> 61;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 60;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 62;
                }
                <travel-destination> {
                    <condition> 100;
                    <motion> 46;
                    <room> 107;
                }
            }
            <room> {
                <number> 62;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 60;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 63;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 30;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 61;
                }
            }
            <room> {
                <number> 63;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 62;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 62;
                }
            }
            <room> {
                <number> 64;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 39;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 56;
                    <room> 39;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 59;
                    <room> 39;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 65;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 70;
                    <room> 65;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 103;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 74;
                    <room> 103;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 106;
                }
            }
            <room> {
                <number> 65;
                <travel-destination> {
                    <condition> 0;
                    <motion> $east;
                    <room> 64; /* Complex junction */
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $west;
                    <room> 66; /* Swiss cheese room */
                }
                <travel-destination> {
                    <condition> 80; /* 80% of time */
                    <motion> $south;
                    <room> 556; /* Crawled around, back in main passge */
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $south;
                    <room> 68; /* Slab room */
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $slab;
                    <room> 68; /* Slab room */
                }
                <travel-destination> {
                    <condition> 80; /* 80% of time */
                    <motion> $up;
                    <room> 556; /* Crawled around, back in main passge */
                }
                <travel-destination> {
                    <condition> 50; /* 50% of time */
                    <motion> $up;
                    <room> 70; /* Secret N/S canyon */
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $up;
                    <room> 39; /* Dusty rock room */
                }
                <travel-destination> {
                    <condition> 60; /* 60% of time */
                    <motion> $north;
                    <room> 556; /* Crawled around, back in main passge */
                }
                <travel-destination> {
                    <condition> 75; /* 75% of time */
                    <motion> $north;
                    <room> 72; /* Large low room */
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $north;
                    <room> 71; /* Secret canyon junction */
                }
                <travel-destination> {
                    <condition> 80; /* 80% of time */
                    <motion> $down;
                    <room> 556; /* Crawled around, back in main passge */
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $down;
                    <room> 106; /* Anteroom */
                }
            }
            <room> {
                <number> 66;
                <travel-destination> {
                    <condition> 0;
                    <motion> $northeast;
                    <room> 65; /* bedquilt */
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $west;
                    <room> 67; /* east end of two pit room */
                }
                <travel-destination> {
                    <condition> 80;
                    <motion> $south;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $south;
                    <room> 77;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 25;
                    <room> 77; /* Tall ew canyon */
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $east;
                    <room> 96;
                }
                <travel-destination> {
                    <condition> 50;
                    <motion> $northwest;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $northwest;
                    <room> 97;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 72;
                    <room> 97;
                }
            }
            <room> {
                <number> 67;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 66;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 23;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $across;
                    <room> 23;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 24;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 31;
                    <room> 24;
                }
            }
            <room> {
                <number> 68;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 23;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 69;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 56;
                    <room> 69;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 65;
                }
            }
            <room> {
                <number> 69;
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 68;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 61;
                    <room> 68;
                }
                <travel-destination> {
                    <condition> 331;
                    <motion> 46;
                    <room> 120;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 119;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 109;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 75;
                    <room> 113;
                }
            }
            <room> {
                <number> 70;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 71;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 65;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 65;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 111;
                }
            }
            <room> {
                <number> 71;
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 65;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 70;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 110;
                }
            }
            <room> {
                <number> 72;
                <travel-destination> {
                    <condition> 0;
                    <motion> 70;
                    <room> 65;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 118;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 73;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 97;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 72;
                    <room> 97;
                }
            }
            <room> {
                <number> 73;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 72;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 72;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 72;
                }
            }
            <room> {
                <number> 74;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 19;
                }
                <travel-destination> {
                    <condition> 331;
                    <motion> 44;
                    <room> 120;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 121;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 75;
                }
            }
            <room> {
                <number> 75;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 76;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 77;
                }
            }
            <room> {
                <number> 76;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 75;
                }
            }
            <room> {
                <number> 77;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 75;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 78;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 66;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 66;
                }
            }
            <room> {
                <number> 78;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 77;
                }
            }
            <room> {
                <number> 79;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 3;
                }
            }
            <room> {
                <number> 80;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 42;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 80;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 80;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 81;
                }
            }
            <room> {
                <number> 81;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 80;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 80;
                }
            }
            <room> {
                <number> 82;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 44;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 44;
                }
            }
            <room> {
                <number> 83;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 57;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 84;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 85;
                }
            }
            <room> {
                <number> 84;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 57;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 83;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 114;
                }
            }
            <room> {
                <number> 85;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 83;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 83;
                }
            }
            <room> {
                <number> 86;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 52;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 52;
                }
            }
            <room> {
                <number> 87;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 45;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 45;
                }
            }
            <room> {
                <number> 88;
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 25;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 56;
                    <room> 25;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 25;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $jump;
                    <room> 20;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 92;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 27;
                    <room> 92;
                }
            }
            <room> {
                <number> 89;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 25;
                }
            }
            <room> {
                <number> 90;
                <travel-destination> {
                    <condition> 0;
                    <motion> 1;
                    <room> 23;
                }
            }
            <room> {
                <number> 91;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 95;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 73;
                    <room> 95;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 95;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 72;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 56;
                    <room> 72;
                }
            }
            <room> {
                <number> 92;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 88;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 93;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 94;
                }
            }
            <room> {
                <number> 93;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 92;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 27;
                    <room> 92;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 92;
                }
            }
            <room> {
                <number> 94;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 92;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 27;
                    <room> 92;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 92;
                }
                <travel-destination> {
                    <condition> 309;
                    <motion> 45;
                    <room> 95;
                }
                <travel-destination> {
                    <condition> 309;
                    <motion> 3;
                    <room> 95;
                }
                <travel-destination> {
                    <condition> 309;
                    <motion> 73;
                    <room> 95;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 611;
                }
            }
            <room> {
                <number> 95;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 94;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 94;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 27;
                    <room> 92;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 91;
                }
            }
            <room> {
                <number> 96;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 66;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 66;
                }
            }
            <room> {
                <number> 97;
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 66;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 72;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 72;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 98;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 98;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 73;
                    <room> 98;
                }
            }
            <room> {
                <number> 98;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 97;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 72;
                    <room> 97;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 99;
                }
            }
            <room> {
                <number> 99;
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 98;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 73;
                    <room> 98;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 301;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 301;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 100;
                }
            }
            <room> {
                <number> 100;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 301;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 301;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 301;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 99;
                }
                <travel-destination> {
                    <condition> 159;
                    <motion> 71;
                    <room> 302;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 71;
                    <room> 33;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 101;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 22;
                    <room> 101;
                }
            }
            <room> {
                <number> 101;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 100;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 71;
                    <room> 100;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 100;
                }
            }
            <room> {
                <number> 102;
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 103;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 74;
                    <room> 103;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 103;
                }
            }
            <room> {
                <number> 103;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 102;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 38;
                    <room> 102;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 104;
                }
                <travel-destination> {
                    <condition> 114;
                    <motion> 46;
                    <room> 618;
                }
                <travel-destination> {
                    <condition> 115;
                    <motion> 46;
                    <room> 619;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 64;
                }
            }
            <room> {
                <number> 104;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 103;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 74;
                    <room> 103;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 105;
                }
            }
            <room> {
                <number> 105;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 104;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 104;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 74;
                    <room> 103;
                }
            }
            <room> {
                <number> 106;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 64;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 65;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 108;
                }
            }
            <room> {
                <number> 107;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 61;
                }
            }
            <room> {
                <number> 108;
                <travel-destination> {
                    <condition> 95;
                    <motion> 43;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 95;
                    <motion> 45;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 95;
                    <motion> 46;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 95;
                    <motion> 47;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 95;
                    <motion> 48;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 95;
                    <motion> 49;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 95;
                    <motion> 50;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 95;
                    <motion> 29;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 95;
                    <motion> 30;
                    <room> 556;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $east;
                    <room> 106;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $north;
                    <room> 106;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $west;
                    <room> 626;
                }
            }
            <room> {
                <number> 109;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 69;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 113;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 75;
                    <room> 113;
                }
            }
            <room> {
                <number> 110;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 71;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $jump;
                    <room> 20;
                }
            }
            <room> {
                <number> 111;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 70;
                }
                <travel-destination> {
                    <condition> 40;
                    <motion> 30;
                    <room> 50;
                }
                <travel-destination> {
                    <condition> 40;
                    <motion> $jump;
                    <room> 50;
                }
                <travel-destination> {
                    <condition> 40;
                    <motion> 56;
                    <room> 50;
                }
                <travel-destination> {
                    <condition> 50;
                    <motion> 30;
                    <room> 53;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 45;
                }
            }
            <room> {
                <number> 112;
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 140;
                }
            }
            <room> {
                <number> 113;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 109;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 109;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 109;
                    <room> 109;
                }
            }
            <room> {
                <number> 114;
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 84;
                }
            }
            <room> {
                <number> 115;
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 116;
                }
            }
            <room> {
                <number> 116;
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 115;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 593;
                }
            }
            <room> {
                <number> 117;
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 118;
                }
                <travel-destination> {
                    <condition> 233; /* 33 = troll */
                    <motion> $over;
                    <room> 660; /* "The troll refuses to let you cross."; */
                }
                <travel-destination> {
                    <condition> 233; /* 33 = troll */
                    <motion> $across;
                    <room> 660; /* "The troll refuses to let you cross."; */
                }
                <travel-destination> {
                    <condition> 233; /* 33 = troll */
                    <motion> $cross;
                    <room> 660; /* "The troll refuses to let you cross."; */
                }
                <travel-destination> {
                    <condition> 233; /* 33 = troll */
                    <motion> 47;
                    <room> 660; /* "The troll refuses to let you cross."; */
                }
                <travel-destination> {
                    <condition> 332; /* 32 = chasm */
                    <motion> $over;
                    <room> 661; /* "There is no longer any way across the chasm.";*/
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $over;
                    <room> 303;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $across;
                    <room> 303;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $cross;
                    <room> 303;
                }
                <travel-destination> {
                    <condition> 332; /* 32 = chasm */
                    <motion> $jump;
                    <room> 21;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $jump;
                    <room> 596; /* "I respectfully suggest you go across the bridge instead\n" _
                       "of jumping."; */
                }
            }
            <room> {
                <number> 118;
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 72;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 117;
                }
            }
            <room> {
                <number> 119;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 69;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 69;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 653;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 307;
                    <room> 65;
                }
            }
            <room> {
                <number> 120;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 69;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 74;
                }
            }
            <room> {
                <number> 121;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 74;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 74;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 653;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 7;
                    <room> 653;
                }
            }
            <room> {
                <number> 122;
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 123;
                }
                <travel-destination> {
                    <condition> 233;
                    <motion> $over;
                    <room> 660;
                }
                <travel-destination> {
                    <condition> 233;
                    <motion> $across;
                    <room> 660;
                }
                <travel-destination> {
                    <condition> 233;
                    <motion> $cross;
                    <room> 660;
                }
                <travel-destination> {
                    <condition> 233;
                    <motion> 49;
                    <room> 660;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $over;
                    <room> 303;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $across;
                    <room> 303;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> $cross;
                    <room> 303;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 39;
                    <room> 596;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 77;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 28;
                    <room> 126;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 40;
                    <room> 129;
                }
            }
            <room> {
                <number> 123;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 122;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 77;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 28;
                    <room> 126;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 40;
                    <room> 129;
                }
            }
            <room> {
                <number> 124;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 123;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 125;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 36;
                    <room> 125;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 128;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 37;
                    <room> 128;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 128;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 28;
                    <room> 126;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 40;
                    <room> 129;
                }
            }
            <room> {
                <number> 125;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 77;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 126;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 28;
                    <room> 126;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 127;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 127;
                }
            }
            <room> {
                <number> 126;
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 125;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 23;
                    <room> 125;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 125;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 77;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 610;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 39;
                    <room> 610;
                }
            }
            <room> {
                <number> 127;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 125;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 125;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 17;
                    <room> 125;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 77;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 28;
                    <room> 126;
                }
            }
            <room> {
                <number> 128;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 77;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 129;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 129;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 40;
                    <room> 129;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 28;
                    <room> 126;
                }
            }
            <room> {
                <number> 129;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 128;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 128;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 77;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 130;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 19;
                    <room> 130;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 40;
                    <room> 130;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 3;
                    <room> 130;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 28;
                    <room> 126;
                }
            }
            <room> {
                <number> 130;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 129;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 77;
                    <room> 124;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 28;
                    <room> 126;
                }
            }
            <room> {
                <number> 131;
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 112;
                }
            }
            <room> {
                <number> 132;
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 112;
                }
            }
            <room> {
                <number> 133;
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 112;
                }
            }
            <room> {
                <number> 134;
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 112;
                }
            }
            <room> {
                <number> 135;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 112;
                }
            }
            <room> {
                <number> 136;
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 112;
                }
            }
            <room> {
                <number> 137;
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 112;
                }
            }
            <room> {
                <number> 138;
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 139;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 112;
                }
            }
            <room> {
                <number> 139;
                <travel-destination> {
                    <condition> 0;
                    <motion> 49;
                    <room> 107;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 50;
                    <room> 131;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 43;
                    <room> 132;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 44;
                    <room> 133;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 134;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 30;
                    <room> 135;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 48;
                    <room> 136;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 29;
                    <room> 137;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 46;
                    <room> 138;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 47;
                    <room> 112;
                }
            }
            <room> {
                <number> 140;
                <travel-destination> {
                    <condition> 0;
                    <motion> 45;
                    <room> 112;
                }
                <travel-destination> {
                    <condition> 0;
                    <motion> 11;
                    <room> 112;
                }
            }
        }
}

