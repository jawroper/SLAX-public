/*
*
*    NAME: show-trunk.slax
*    PURPOSE: Created to provide vlan information for all interfaces
*             that are defined as trunk interfaces.
*
*    CREATED: 02/12/09
*    BY: Jay Wilson (Solutions Architect - Western Area)
*    LAST MOD: 02/12/09
*    BY: Jay Wilson
*    VERSION: 1.00
*
*    MODIFICATION HISTORY:
*        V1.00 = Initial release
*
*/
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";

match / {
    <op-script-results> {
/*
*
*  RPC that returns the "show ethernet-switching interface" output
*
*/
        var $rpc = <get-ethernet-switching-interface-information> {
        }
        var $switch-output = jcs:invoke($rpc);
/*
*
*  RPC that returns the "show interface" output
*
*/
    var $rpc2 = <get-interface-information> {
    }
    var $physical-output = jcs:invoke($rpc2);
/*
*
*   Print out the Header line
*
*/

        <output> jcs:printf("%-12s %-8s %-23s %-9s %-13s %-s\n","Interface","State","VLAN Member","Tag/Untag","Blocked","Description");

/*
*
*   Get all the interfaces, but only look at "ge", "xe", and "ae" 
*
*/

        for-each ($switch-output/interface) {
            if (contains(interface-name,"ge") || contains(interface-name,"xe") || contains(interface-name,"ae")) {
/*
*
*   Output has unit appended to the interface name.  Drop it because
*      it is always 0 for "family ethernet-switching", which are the
*      only interfaces returned from the RPC call above.
*
*/
                var $interface = substring-before(interface-name,".");
                var $raw-interface = interface-name;
/*
*
*   Before processing the vlan information, varify that the interface
*      is set for "port-mode trunk".
*
*/
                if ($physical-output/physical-interface[name=$interface]/logical-interface[name=$raw-interface]/address-family[address-family-name="eth-switch"]/address-family-flags/ifff-port-mode-trunk) { 
                    call mash-up($interface = $interface, $physical-output = $physical-output, $switch-output = .);
                }
            }
        }
    }
}
/*
*   NAME: MASH-UP
*   PURPOSE: To combine the ethernet-switching-interface-information output
*            with the interface-information output.
*   CALLED: Called for all "ge", "xe", or "ae"that are returned by the RPC
*           to ethernet-switching-interface-information and that match any
*           additional criteria, such as "port-mode trunk"
*
*   PARMS PASSED:
*        $interface = interface to mash-up
*        $physical-output = the structure that is returned with the 
*                           RPC interface-information call.
*        $switch-output = the structure that goes with the interface
*                         that was returned with the RPC 
*                         ethernet-switching-interface-information.
*
*/
template mash-up($interface, $physical-output, $switch-output) {



/*
*
*   Save the initial information into a formated string.
*   This is needed to prevent a newline from being inserted before
*   the initial string is complete.
*
*/
    var $phy-prnt = { if ($physical-output/physical-interface/name == $interface) {
                          expr jcs:printf("%-12s %-8s ",$interface, $switch-output/interface-state);
                      }
                    }
    if ($phy-prnt) {
/*
*
*   Vlan membership for each interface comes back as a list, so
*   a for loop is needed to process it.
*
*   IF THE SCRIPT IS NOT OUTPUTTING ANY DATA,
*   NOTE THE VERSION OF JUNOS BEING USED AND
*   CHANGE THE NEXT FOR-EACH!!!!!!!!!!!!!!
*
*   interface-vlan-member was returned in JUNOS 9.1
*      as a leaf, so interface-vlan-name did not
*      exist as a leaf and block-status was 1 leaf up.
*   interface-vlan-member was returned in JUNOS 9.3
*      as a node set with interface-vlan-name and
*      bock-status as leafs.
*
*/

/*
*
*   If the interface is set to "port-mode trunk", but no vlans are
*      defined to the trunk, then only print out the interface number.
*
*/
       if (count($switch-output/interface-vlan-member-list/interface-vlan-member) > 0) {
           for-each($switch-output/interface-vlan-member-list/interface-vlan-member) {
/*
*
*  Reduce the length of blocked status by using a shorter string.
*
*/
              var $status = { if (contains(blocking-status,"STP")) {
                                 expr "STP Blocked";
                              }
                              else if (contains(blocking-status,"RTG")) {
                                 expr "RTG Blocked";
                              }
                              else {
                                 expr blocking-status;
                              }
                            }
/*
*
*    The first line for each interface is different than the other
*    output lines.   Check for the first time in the for loop and
*    add the safed initial string from above.
*/
              var $first = position();
              if ($first == 1) {
                  <output> jcs:printf("%-22s%-23s %-9s %-12s  %-s\n", $phy-prnt, interface-vlan-name, interface-vlan-member-tagness, $status, $physical-output/physical-interface[name=$interface]/description);
              }
              else {
/*
*
*   printf may look odd, but it is correct.  It must account for the
*   embedded spaces in the initial string.
*/
                  <output> jcs:printf("%-22s%-23s %-9s %-12s\n", " ", interface-vlan-name, interface-vlan-member-tagness, $status);
              }
             
           } 
       }
       else {
             <output> jcs:printf("%-22s\n",$phy-prnt);
       }
    }
}

