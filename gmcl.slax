/*
*
*    NAME: get-mc-lag-info.slax
*    PURPOSE: Created to retrieve the physical interface
*             information for each member of an MC-LAG.
*
*    CREATED: 10/10/12
*    BY: Jay Wilson (SR Con Eng -- Data Center)
*    LAST MOD: 10/10/12
*    BY: Jay Wilson
*    VERSION: 1.00
*
*    MODIFICATION HISTORY:
*        V1.00 = Initial release
*
*/
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";
/*
*
*  Define the argument that will be passed into the script.
*  This argument is by the event attribute "interface-name"
*  when the event triggers.
*
*/
var $arguments = {
        <argument> {
            <name> "lag";
            <description> "LAG Name";
        }
}
param $lag;
param $debug;

match / {
    <op-script-results> {
        var $loc-con = jcs:open();
        var $rpc1=<get-interface-information> {
                  terse;
                  }
        call $cmd1 = jcs:execute($loc-con,$rpc1);
        var $gii = $cmd1;
        var $rpc2 = <get-mc-ae-interface-information> {
                    }
        call $cmd2 = jcs:execute($loc-con,$rpc2);
        var $gmii = $cmd2;
        for-each ($gmii/mc-ae-status-information) {
            expr jcs:output(./mc-ae-status/member-link);
            expr jcs:output(./mc-ae-ifl-list/logical-interface);
            expr jcs:output(./mc-ae-ifl-list/mcp-state);
            for-each ($gii/ae-bundle-name ==./mc-ae-ifl-list/logical-interface)             {
                expr jcs:output(.//name);
            }
        }
/*        var $rmt-con = jcs:open($rmt-ip, $rmt-uid, $rmt-pwd);
*/
}

/*
*   NAME: REMOTE-COMMANDS
*   PURPOSE: commands to issues on the remote device
*   CALLED: Called after the all PARAMs are checked
*
*   PARMS PASSED:
*        $con = An open console connection used for all
*               remote RPC processing.
*
*/
template remote-commands($con) {
    if ($event-type == "up(1)") {
        var $cmd = {
                       <command> 'clear ethernet-switching table interface ' _ $rmt-ifname;
                   }
        var $cmd-output = jcs:execute($con,$cmd);
        call check-results($results=$cmd-output, $call-type="RMT", $if-type=$rmt-ifname);
    }
    var $cmd2 = {
                   <command> 'clear ethernet-switching table interface ' _ $rmt-ifxconnect;
               }
    var $cmd-output2 = jcs:execute($con,$cmd2);
    call check-results($results=$cmd-output2, $call-type="RMT", $if-type=$rmt-ifxconnect);
}
/*
*   NAME: CHECK-RESULTS
*   PURPOSE: write a message based on the results of an jcs:executing
*   CALLED: Called after each jcs:executing
*
*   PARMS PASSED:
*        $results = the ouput from the jcs:execute
*        $call-type = was this a local or remote executing
*        $if-type = the interface the jcs:execute was used on
*
*/
template check-results($results, $call-type, $if-type) {
    var $syslog-type = "rtg-rmt-clear.slax[I/W/E]: (" _ $call-type _ "/" _ $if-type _ ") ";
    for-each ($results//xnm:warning) {
        if (not(contains(message,"statement not found:"))) {
            expr jcs:syslog("user.warning", $syslog-type, message);
        }
    }
    if ($results//xnm:error) {
        for-each ($results//xnm:error) {
            expr jcs:syslog("user.error", $syslog-type, message);
        }
    }
    else {
        expr jcs:syslog("user.info", $syslog-type, "Successfully cleared");
    }
}
/*
*   NAME: WRITE-OUTPUT
*   PURPOSE: Writes a message to standard and/or the syslog depending on 
*            the parms passed to it.
*   CALLED: Called after the XML changes have been submitted to MGD process.
*
*
*   PARMS PASSED:
*        $level = The syslog message level
*        $id = Standout message ID
*        $type = The string identifying the type of message
*        $message = The string to print out 
*        $where = Used to specify if "b"oth STDOUT and SYSLOG
*                 should be written to or only "S"TDOUT
*
*/
template write-output($level = "user.info", $id = "INFO: ", $type = " ", $where = "b", $message) {
     var $stdmessage = $id _ $message;

     if ($where == "s") {
        expr jcs:output($stdmessage);
     }
     else {
         expr jcs:syslog($level, $type, $message);
         
         expr jcs:output($stdmessage);
     }         
}
