/*
*    PURPOSE: Created for Pima CC to display "interface" information
*             in a "cisco" style ouput.
*
*    CREATED: 11/18/09
*    BY: Jay Wilson (Solutions Architect - Western Area)
*    LAST MOD: 11/18/09
*    BY: Jay Wilson
*    VERSION: 1.01
*
*    MODIFICATION HISTORY:
*        V1.00 = Initial release
*        V1.01 = Modify "description" search to look at
*                all hiearchy levels under "interfaces"
*
*/
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";
var $arguments = {
    <argument> {
        <name> "fpc";
        <description> "EX member or slot # to display";
    }
}
param $fpc;


match / {
    <op-script-results> {
/*
*
*  RPC that returns the "show ethernet-switching interface" output
*
*/
        var $rpc = <get-ethernet-switching-interface-information> {
        }
        var $switch-output = jcs:invoke($rpc);
/*
*
*  RPC that returns the "show interface" output
*
*/
    var $rpc2 = <get-interface-information> {
    }
    var $physical-output = jcs:invoke($rpc2);
/*
*
*   Print out the Header line
*
*/

        <output> jcs:printf("%-12s %-8s %-23s %-6s %-5s %-s\n","Interface","State","VLAN Member","Duplex","Speed","Description");

/*
*
*   Get all the interfaces, but only look at "ge" and "xe" 
*   At the same time, get the FPC #
*
*/

        for-each ($switch-output/interface) {
            var $triple = substring-after(interface-name,'-');
            var $ct1 = substring-before($triple,'/');
            if ((contains(interface-name,"ge") || contains(interface-name,"xe")) && (not($fpc) || ($fpc == $ct1))) {
        
/*
*
*   Output has unit appended to the interface name.  Drop it because
*      it is always 0 for "family ethernet-switching", which are the
*      only interfaces returned from the RPC call above.
*
*/
                var $interface = substring-before(interface-name,".");
                call mash-up($interface = $interface, $physical-output = $physical-output, $switch-output = .);
            }
        }
    }
}
/*
*   NAME: MASH-UP
*   PURPOSE: To combine the ethernet-switching-interface-information output
*            with the interface-information output.
*   CALLED: Called for all "ge" or "xe" that are returned by the RPC
*           to ethernet-switching-interface-information and that match any
*           additional criteria, such fpc #
*
*   PARMS PASSED:
*        $interface = interface to mash-up
*        $physical-output = the structure that is returned with the 
*                           RPC interface-information call.
*        $switch-output = the structure that goes with the interface
*                         that was returned with the RPC 
*                         ethernet-switching-interface-information.
*
*/
template mash-up($interface, $physical-output, $switch-output) {



/*
*
*   Save the initial information into a formated string.
*   This is needed to prevent a newline from being inserted before
*   the initial string is complete.
*
*/
    var $phy-prnt = { if ($physical-output/physical-interface/name == $interface) {
                          expr jcs:printf("%-12s %-8s ",$interface, $switch-output/interface-state);
                      }
                    }
    if ($phy-prnt) {
/*
*
*   Vlan membership for each interface comes back as a list, so
*   a for loop is needed to process it.
*
*   IF THE SCRIPT IS NOT OUTPUTTING ANY DATA,
*   NOTE THE VERSION OF JUNOS BEING USED AND
*   CHANGE THE NEXT FOR-EACH!!!!!!!!!!!!!!
*
*   interface-vlan-member was returned in JUNOS 9.1
*   interface-vlan-name was returned in JUNOS 9.3   
*   interface-vlan-member/interface-vlan-name was returned in JUNOS 9.6
*
*/
       for-each($switch-output/interface-vlan-member-list/interface-vlan-member/interface-vlan-name) {
/*
*
*  Save the "port mode" (tagged / untagged)
*
*/
          var $mode = ../interface-vlan-member-tagness;
/*
*
*    The first line for each interface is different than the other
*    output lines.   Check for the first time in the for loop and
*    add the safed initial string from above.
*/
          var $first = position();
          if ($first == 1) {
/*
*
*    Get the speed and duplex for the port. 
*    Modify the the values to look like Cisco's output.
*
*/
              var $first-speed = { call get-speed($speed = $physical-output/physical-interface[name=$interface]/speed);
              }
              var $first-duplex = { call get-duplex($duplex = $physical-output/physical-interface[name=$interface]/duplex);
              }
              <output> jcs:printf("%-22s%-23s %-6s %-5s %-s\n", $phy-prnt, ., $first-speed, $first-duplex, $physical-output/physical-interface[name=$interface]//description);
          }
          else {
/*
*
*   printf may look odd, but it is correct.  It must account for the
*   embedded spaces in the initial string.
*/
              <output> jcs:printf("%-22s%-23s \n", " ", . );
          }
             
       } 
    }
}
/*
*
*   NAME: GET-SPEED
*   PURPOSE: To format the speed information to look like Cisco ouput.
*   CALLED: Called for all "ge" or "xe" that are returned by the RPC
*           to ethernet-switching-interface-information and that match any
*           additional criteria, such fpc #
*
*   PARMS PASSED:
*        $speed = speed of the interface being worked on
*
*/
template get-speed($speed) {
    var $output = { if (contains($speed,"m")) {
                       expr substring-before($speed,"m");
                    }
                    else if (contains($speed,"M")) {
                       expr substring-before($speed,"M");
                    }
                    else if (contains($speed,"g")) {
                       expr substring-before($speed,"g") _ "000";
                    }
                    else if (contains($speed,"G")) {
                       expr substring-before($speed,"G") _ "000";
                    }
                    else {
                       expr "Auto";
                    }
                  }
    expr $output;
}
/*
*
*   NAME: GET-DUPLEX
*   PURPOSE: To format the duplex information to look like Cisco ouput.
*   CALLED: Called for all "ge" or "xe" that are returned by the RPC
*           to ethernet-switching-interface-information and that match any
*           additional criteria, such fpc #
*
*   PARMS PASSED:
*        $duplex = duplex of the interface being worked on
*
*/
template get-duplex($duplex) {
    var $output = { if (contains($duplex,"-")) {
                       expr substring-before($duplex,"-");
                    }
                    else {
                       expr "Auto";
                    }
                  }
    expr $output;
}
