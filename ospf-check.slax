/*
*
*    NAME: ospf-check.slax
*    PURPOSE: Created to quickly check the stability of
*             and OSPF environment.
*
*
*    CREATED: 08/09/10
*    BY: Jay Wilson (Solutions Architect - Western Area)
*    LAST MOD: 08/09/10
*    BY: Jay Wilson
*    VERSION: 1.00
*
*    MODIFICATION HISTORY:
*        V1.00 = Initial release
*
*    USAGE:
*       1) Auto generate a file that contains all the devices you
*          want to compare the area(s) checksum(s) to.
*
*          admin@EX01>op ospf-check learn 1 | save /var/tmp/ospf-device-list
*
*       2) Compare the area(s) checksum(s) -- long version
*
*          admin@EX01>op ospf-check file /var/tmp/ospf-device-list rmt-uid admin -rmt-pwd ScripT
*          
*       3) Compare the area(s) checksum(s) -- short version
*
*          Set the "file", "rmt-uid", & "rmt-pwd" in the script
*              param $file = "/var/tmp/ospf-device-list";
*              param $rmt-uid = "admin";
*              param $rmt-pwd = "ScripT";
*         
*          admin@EX01>op ospf-check
* 
*      4) Check SPF running count for changes
*
*         admin@EX01>op ospf-check wait 5
*         (waits 5 seconds before pulling the SPF information a second time)
*
*/
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";

var $arguments = {
        <argument> {
            <name> "file";
            <description> "File path/name with remote hosts to check.";
        }
        <argument> {
            <name> "rmt-uid";
            <description> "UserID to use on the remote host.";
        }
        <argument> {
            <name> "rmt-pwd";
            <description> "Password of the UserID to use on the remote host.";
        }
        <argument> {
            <name> "wait";
            <description> "Wait x seconds to recheck SPFs runs.";
        }
        <argument> {
            <name> "learn";
            <description> "Learn all the ospf devices in area(s) I know about. (NOTE: Pipe the output to a file!)";
        }
}
param $file="/var/tmp/ospf-list";
param $wait;
param $rmt-uid="admin";
param $rmt-pwd="nlwotp";
param $learn;

/* Perform all local operations over a single connection for speed increase */

var $loc-con = jcs:open();

match / {
    <op-script-results> {
        if (not($learn)) {
            call local-checksum-loop();
            call remote-checksum-loop();
            expr jcs:output(" *****");
/*
*  Poll the local SPF "full run" value and print it
*/
            call local-spf-loop();

/*
*  If "wait" was pased in, wait x amount of time
*  and then repoll the local SPF "full run" value.
*/
            if ($wait) {
                expr jcs:sleep($wait);
                call local-spf-loop();
            }
        }
        else {
            call learn();
        }
    }
/*
*  Close the local RPC connection
*/
    expr jcs:close($loc-con);
}
/*
*
*   NAME: LOCAL-CHECKSUM-LOOP
*   PURPOSE: commands to issue on the local device
*   CALLED: Called first thing after a connection to
*           the local device has been opened.
*
*   PARMS PASSED:
*
*/
template local-checksum-loop() {
/*
*  Get the ospf overview information
*/
    var $rpc = <get-ospf-overview-information> {
    }
    var $rpc-output = jcs:execute($loc-con, $rpc);
/*
*  Print out the headers
*/
    expr jcs:output("        Host                Area         Checksum   SPF Runs\n");
    expr jcs:output("====================  ================  ==========  ========\n");
/*
*  For each "area found" on the device grab the "area"
*  checksum from the snmp OID
*/
    for-each ($rpc-output/ospf-overview/ospf-area-overview) {
        var $area = "1.3.6.1.2.1.14.2.1.8." _ ospf-area;
        var $snmp-rpc = <get-snmp-object> {
                           <snmp-object-name>$area;
        }
        var $snmp-out = jcs:execute($loc-con, $snmp-rpc);
        var $printf = jcs:printf("%-20s  %16s  %10s\n",$hostname,ospf-area,$snmp-out/snmp-object/object-value);
        expr jcs:output($printf);
    }
}
/*
*
*   NAME: LOCAL-SPF-LOOP
*   PURPOSE: to retrieve the SPF "full run" count on the
*            local device
*   CALLED: Called after the local and remote checksums
*           have been reported
*
*   PARMS PASSED:
*
*/
template local-spf-loop() {
    var $rpc = <get-ospf-overview-information> {
    }
    var $rpc-output = jcs:execute($loc-con, $rpc);
    var $printf =  jcs:printf("%-20s                              %10s\n",$hostname,$rpc-output/ospf-overview/ospf-topology-overview/ospf-full-spf-count);
    expr jcs:output($printf);
}

/*
*
*   NAME: REMOTE-CHECKSUM-LOOP
*   PURPOSE: commands to issue on the remote device
*   CALLED: Called after the local checksum has been reported
*
*   PARMS PASSED:
*
*/
template remote-checksum-loop() {
    var $rpc = <get-ospf-overview-information> {
    }
/*
*  Read the remote hosts to process from a file
*  and grab the "host" nodes
*/
    for-each (document($file)//host) {
        var $name = name;
/*
*  open a connection to the remote device
*/
        var $rmt-con = jcs:open(name, $rmt-uid, $rmt-pwd);
        var $rpc-output = jcs:execute($rmt-con, $rpc);
/*
*  For each "area found" on the remote device grab the "area"
*  checksum from the snmp OID
*/
        for-each ($rpc-output/ospf-overview/ospf-area-overview) {
            var $area = "1.3.6.1.2.1.14.2.1.8." _ ospf-area;
            var $snmp-rpc = <get-snmp-object> {
                           <snmp-object-name>$area;
            }
            var $snmp-out = jcs:execute($rmt-con, $snmp-rpc);
            var $printf = jcs:printf("%-20s  %16s  %10s\n",$name,ospf-area,$snmp-out/snmp-object/object-value);
            expr jcs:output($printf);
        }
/*
*  Close the connection to the remote device
*  before looping
*/
            expr jcs:close($rmt-con);
    }
}
/*
*
*   NAME: LEARN
*   PURPOSE: to create a file of devices to query for
*            checksum information
*   CALLED: Called if the "learn" argument is specified
*           when the script is invoked
*
*   PARMS PASSED:
*
*/
template learn() {
/*
*  Get the ospf overview information
*/
    var $rpc = <get-ospf-overview-information> {
    }
    var $rpc-output = jcs:execute($loc-con, $rpc);
/*
*  For each "area found" on the device grab the database information
*  and print information in XSLT style
*/
    <output> jcs:printf("<ospf-list>\n");
    for-each ($rpc-output/ospf-overview/ospf-area-overview) {
        var $rpc-area = <get-ospf-database-information> {
                        <extensive>;
                        <router>;
                        <area> ospf-area;
        }
        var $ospf-area = ospf-area;
        var $area-output = jcs:execute($loc-con, $rpc-area);
        for-each ($area-output/ospf-database) {
            if (not(our-entry)) {
               <output> jcs:printf("  <host>\n    <name>%s</name>\n    <area>%s</area>\n  </host>\n",ospf-router-lsa/ospf-link/link-data,$ospf-area);
            }
        }
    }
    <output> jcs:printf("</ospf-list>\n");
}
