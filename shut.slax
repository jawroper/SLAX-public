/*
*
*    NAME: mb.slax
*    PURPOSE: Created for Apple as a wrapper for working with the
*             PFE commands specific to micoburst (aka Incast) buffer
*             issues.
*
*    CREATED: 07/12/12
*    BY: Jay Wilson (SR Data Center Consulting Eng. Americas)
*    LAST MOD: 07/12/12
*    BY: Jay Wilson
*    VERSION: 1.00
*
*    MODIFICATION HISTORY:
*        V1.00 = Initial release
*
*/
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";

var $arguments = {
    <argument> {
        <name> "action";
        <description> "Start/Stop";
    }
    <argument> {
        <name> "interval";
        <description> "How often to check the for burst in microseconds. Default is 4";
    }
    <argument> {
        <name> "port";
        <description> "Port to monitor. Value of 66 means all and is the default.";
    }
    <argument> {
        <name> "dlowt";
        <description> "Buffer depth low threshold";
    }
    <argument> {
        <name> "dhight";
        <description> "Buffer depth high threshold";
    }
    <argument> {
        <name> "llowt";
        <description> "Buffer latency low threshold";
    }
    <argument> {
        <name> "lhight";
        <description> "Buffer latency high threshold";
    }
}

param $interface;

match / {
    if ($interface) {
/*
*
*   Open a connection with mgd
*
*/
        var $con = jcs:open();
        if (not($con)) {
            call write-output($level = "user.error", $id = "ERROR: ", $type = "shut.slax[Error]: ", $where = "b", $message = "Not able to connect to local mgd");
        }
/*
*
*   XML structure for disabling the INTERFACE
*
*/
        var $xml = {
            <configuration> {
                 <interfaces> {
                     <interface> {
                         <name> $interface;
                         <disable>;
                     }
                 }
            }
        }
/*
*
*   Use load-configuration template defined in junos.xsl to load and
*   commit the configuration
*
*/
        var $results := {
            call jcs:load-configuration($connection = $con, $configuration = $xml);
        }

/*
*
*   Check the results and process them
*
*/

        for-each ($results//xnm:warning) {
            if (not(contains(message,"statement not found:"))) {
            call write-output($level = "user.warning", $id = "WARNING: ", $type = "shut.slax[Warning]: ", $where = "b", $message = message);
            }
        }
        if ($results//xnm:error) {
            for-each ($results//xnm:error) {
                call write-output($level = "user.error", $id = "ERROR: ", $type = "shut.slax[Error]: ", $where = "b", $message = message);
            }
        }
        else {
            call write-output($level = "user.info", $id = "INFO: ", $type = "shut.slax[Success]: ", $where = "b", $message = "Successfully deactivated the interface");
        }

/*
*
*   Close the mgd connection
*
*/
        expr jcs:close($con);
/*
*
*   Now clear any error conditions that disable doesn't reset automatically
*
*/
        var $cmd1 = {
            <command> 'clear ethernet-switching bpdu-error interface ' _ $interface _ '.0';
        }
        var $cmd2 = {
            <command> 'clear ethernet-switching table interface ' _ $interface _ '.0';
        }
        var $result-cmd1 = jcs:invoke($cmd1);
        var $result-cmd2 = jcs:invoke($cmd2);
    }
    else {
        call write-output($where = "s", $message = "No Interface was specified!");
    } 
}

/*
*   NAME: WRITE-OUTPUT
*   PURPOSE: Writes a message to standard and/or the syslog depending on 
*            the parms passed to it.
*   CALLED: Called after the XML changes have been submitted to MGD process.
*
*
*   PARMS PASSED:
*        $level = The syslog message level
*        $id = Standout message ID
*        $type = The string identifying the type of message
*        $message = The string to print out 
*        $where = Used to specify if "b"oth STDOUT and SYSLOG
*                 should be written to or only "S"TDOUT
*
*/
template write-output($level = "user.info", $id = "INFO: ", $type = " ", $where = "b", $message) {
     var $stdmessage = $id _ $message;

     if ($where == "s") {
        expr jcs:output($stdmessage);
     }
     else {
         expr jcs:syslog($level, $type, $message);
         
         expr jcs:output($stdmessage);
     }         

}
